{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { useDisclosure, useFocusOnHide, useFocusOnPointerDown, useFocusOnShow, useIds } from \"@chakra-ui/hooks\";\nimport { popperCSSVars, usePopper } from \"@chakra-ui/popper\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport { callAllHandlers, contains, determineLazyBehavior, getRelatedTarget, px } from \"@chakra-ui/utils\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nvar TRIGGER = {\n  click: \"click\",\n  hover: \"hover\"\n};\n\n/**\r\n * @internal\r\n */\nexport function usePopover(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var {\n      closeOnBlur = true,\n      closeOnEsc = true,\n      initialFocusRef,\n      id,\n      returnFocusOnClose = true,\n      autoFocus = true,\n      arrowSize,\n      arrowShadowColor,\n      trigger = TRIGGER.click,\n      openDelay = 200,\n      closeDelay = 200,\n      isLazy,\n      lazyBehavior = \"unmount\"\n    } = props,\n    popperProps = _objectWithoutPropertiesLoose(props, [\"closeOnBlur\", \"closeOnEsc\", \"initialFocusRef\", \"id\", \"returnFocusOnClose\", \"autoFocus\", \"arrowSize\", \"arrowShadowColor\", \"trigger\", \"openDelay\", \"closeDelay\", \"isLazy\", \"lazyBehavior\"]);\n  var {\n    isOpen,\n    onClose,\n    onOpen,\n    onToggle\n  } = useDisclosure(props);\n  var triggerRef = useRef(null);\n  var popoverRef = useRef(null);\n  var isHoveringRef = useRef(false);\n  var hasBeenOpened = useRef(false);\n  if (isOpen) {\n    hasBeenOpened.current = true;\n  }\n  var [hasHeader, setHasHeader] = useState(false);\n  var [hasBody, setHasBody] = useState(false);\n  var [triggerId, popoverId, headerId, bodyId] = useIds(id, \"popover-trigger\", \"popover-content\", \"popover-header\", \"popover-body\");\n  var {\n    referenceRef,\n    getArrowProps,\n    getPopperProps,\n    getArrowInnerProps,\n    forceUpdate\n  } = usePopper(popperProps);\n  useFocusOnPointerDown({\n    enabled: isOpen,\n    ref: triggerRef\n  });\n  useFocusOnHide(popoverRef, {\n    focusRef: triggerRef,\n    visible: isOpen,\n    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click\n  });\n  useFocusOnShow(popoverRef, {\n    focusRef: initialFocusRef,\n    visible: isOpen,\n    shouldFocus: autoFocus && trigger === TRIGGER.click\n  });\n  var shouldRenderChildren = determineLazyBehavior({\n    hasBeenSelected: hasBeenOpened.current,\n    isLazy,\n    lazyBehavior,\n    isSelected: isOpen\n  });\n  var getPopoverProps = useCallback(function (props, _ref) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (_ref === void 0) {\n      _ref = null;\n    }\n    var popoverProps = _extends({}, props, {\n      style: _extends({}, props.style, {\n        transformOrigin: popperCSSVars.transformOrigin.varRef\n      }),\n      ref: mergeRefs(popoverRef, _ref),\n      children: shouldRenderChildren ? props.children : null,\n      id: popoverId,\n      tabIndex: -1,\n      role: \"dialog\",\n      onKeyDown: callAllHandlers(props.onKeyDown, event => {\n        if (closeOnEsc && event.key === \"Escape\") {\n          onClose();\n        }\n      }),\n      onBlur: callAllHandlers(props.onBlur, event => {\n        var relatedTarget = getRelatedTarget(event);\n        var targetIsPopover = contains(popoverRef.current, relatedTarget);\n        var targetIsTrigger = contains(triggerRef.current, relatedTarget);\n        var isValidBlur = !targetIsPopover && !targetIsTrigger;\n        if (isOpen && closeOnBlur && isValidBlur) {\n          onClose();\n        }\n      }),\n      \"aria-labelledby\": hasHeader ? headerId : undefined,\n      \"aria-describedby\": hasBody ? bodyId : undefined\n    });\n    if (trigger === TRIGGER.hover) {\n      popoverProps.role = \"tooltip\";\n      popoverProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n        isHoveringRef.current = true;\n      });\n      popoverProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n        isHoveringRef.current = false;\n        setTimeout(onClose, closeDelay);\n      });\n    }\n    return popoverProps;\n  }, [shouldRenderChildren, popoverId, hasHeader, headerId, hasBody, bodyId, trigger, closeOnEsc, onClose, isOpen, closeOnBlur, closeDelay]);\n  var getPopoverPositionerProps = useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n    return getPopperProps(_extends({}, props, {\n      style: _extends({\n        [popperCSSVars.arrowSize.var]: arrowSize ? px(arrowSize) : undefined,\n        [popperCSSVars.arrowShadowColor.var]: arrowShadowColor,\n        visibility: isOpen ? \"visible\" : \"hidden\"\n      }, props.style)\n    }), forwardedRef);\n  }, [arrowShadowColor, arrowSize, isOpen, getPopperProps]);\n  var openTimeout = useRef();\n  var closeTimeout = useRef();\n  var getTriggerProps = useCallback(function (props, _ref) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (_ref === void 0) {\n      _ref = null;\n    }\n    var triggerProps = _extends({}, props, {\n      ref: mergeRefs(triggerRef, _ref, referenceRef),\n      id: triggerId,\n      \"aria-haspopup\": \"dialog\",\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": popoverId\n    });\n    if (trigger === TRIGGER.click) {\n      triggerProps.onClick = callAllHandlers(props.onClick, onToggle);\n    }\n    if (trigger === TRIGGER.hover) {\n      /**\r\n       * Any content that shows on pointer hover should also show on keyboard focus.\r\n       * Consider focus and blur to be the `hover` for keyboard users.\r\n       *\r\n       * @see https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html\r\n       */\n      triggerProps.onFocus = callAllHandlers(props.onFocus, onOpen);\n      triggerProps.onBlur = callAllHandlers(props.onBlur, onClose);\n      /**\r\n       * Any content that shows on hover or focus must be dismissible.\r\n       * This case pressing `Escape` will dismiss the popover\r\n       */\n\n      triggerProps.onKeyDown = callAllHandlers(props.onKeyDown, event => {\n        if (event.key === \"Escape\") {\n          onClose();\n        }\n      });\n      triggerProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n        isHoveringRef.current = true;\n        openTimeout.current = window.setTimeout(onOpen, openDelay);\n      });\n      triggerProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n        isHoveringRef.current = false;\n        if (openTimeout.current) {\n          clearTimeout(openTimeout.current);\n          openTimeout.current = undefined;\n        }\n        closeTimeout.current = window.setTimeout(() => {\n          if (isHoveringRef.current === false) {\n            onClose();\n          }\n        }, closeDelay);\n      });\n    }\n    return triggerProps;\n  }, [triggerId, isOpen, popoverId, trigger, referenceRef, onToggle, onOpen, onClose, openDelay, closeDelay]);\n  useEffect(() => {\n    return () => {\n      if (openTimeout.current) {\n        clearTimeout(openTimeout.current);\n      }\n      if (closeTimeout.current) {\n        clearTimeout(closeTimeout.current);\n      }\n    };\n  }, []);\n  var getHeaderProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (ref === void 0) {\n      ref = null;\n    }\n    return _extends({}, props, {\n      id: headerId,\n      ref: mergeRefs(ref, node => {\n        setHasHeader(!!node);\n      })\n    });\n  }, [headerId]);\n  var getBodyProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (ref === void 0) {\n      ref = null;\n    }\n    return _extends({}, props, {\n      id: bodyId,\n      ref: mergeRefs(ref, node => {\n        setHasBody(!!node);\n      })\n    });\n  }, [bodyId]);\n  return {\n    forceUpdate,\n    isOpen,\n    onClose,\n    getArrowProps,\n    getArrowInnerProps,\n    getPopoverPositionerProps,\n    getPopoverProps,\n    getTriggerProps,\n    getHeaderProps,\n    getBodyProps\n  };\n}","map":{"version":3,"names":["useDisclosure","useFocusOnHide","useFocusOnPointerDown","useFocusOnShow","useIds","popperCSSVars","usePopper","mergeRefs","callAllHandlers","contains","determineLazyBehavior","getRelatedTarget","px","useCallback","useEffect","useRef","useState","TRIGGER","click","hover","usePopover","props","closeOnBlur","closeOnEsc","initialFocusRef","id","returnFocusOnClose","autoFocus","arrowSize","arrowShadowColor","trigger","openDelay","closeDelay","isLazy","lazyBehavior","popperProps","_objectWithoutPropertiesLoose","isOpen","onClose","onOpen","onToggle","triggerRef","popoverRef","isHoveringRef","hasBeenOpened","current","hasHeader","setHasHeader","hasBody","setHasBody","triggerId","popoverId","headerId","bodyId","referenceRef","getArrowProps","getPopperProps","getArrowInnerProps","forceUpdate","enabled","ref","focusRef","visible","shouldFocus","shouldRenderChildren","hasBeenSelected","isSelected","getPopoverProps","_ref","popoverProps","_extends","style","transformOrigin","varRef","children","tabIndex","role","onKeyDown","event","key","onBlur","relatedTarget","targetIsPopover","targetIsTrigger","isValidBlur","undefined","onMouseEnter","onMouseLeave","setTimeout","getPopoverPositionerProps","forwardedRef","var","visibility","openTimeout","closeTimeout","getTriggerProps","triggerProps","onClick","onFocus","window","clearTimeout","getHeaderProps","node","getBodyProps"],"sources":["../../src/use-popover.ts"],"sourcesContent":["import {\n  useDisclosure,\n  useFocusOnHide,\n  useFocusOnPointerDown,\n  useFocusOnShow,\n  useIds,\n} from \"@chakra-ui/hooks\"\nimport { popperCSSVars, usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport { HTMLProps, mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport {\n  callAllHandlers,\n  contains,\n  determineLazyBehavior,\n  FocusableElement,\n  getRelatedTarget,\n  LazyBehavior,\n  px,\n} from \"@chakra-ui/utils\"\nimport { RefObject, useCallback, useEffect, useRef, useState } from \"react\"\n\nconst TRIGGER = {\n  click: \"click\",\n  hover: \"hover\",\n} as const\n\nexport interface UsePopoverProps extends UsePopperProps {\n  /**\n   * The html `id` attribute of the popover.\n   * If not provided, we generate a unique id.\n   *\n   * This `id` is also used to auto-generate the `aria-labelledby`\n   * and `aria-decribedby` attributes that points to the `PopoverHeader` and `PopoverBody`\n   */\n  id?: string\n  /**\n   * If `true`, the popover will be opened in controlled mode.\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the popover will be initially opened.\n   */\n  defaultIsOpen?: boolean\n  /**\n   * The `ref` of the element that should receive focus when the popover opens.\n   */\n  initialFocusRef?: RefObject<FocusableElement>\n  /**\n   * If `true`, focus will be returned to the element that triggers the popover\n   * when it closes\n   */\n  returnFocusOnClose?: boolean\n  /**\n   * If `true`, focus will be transferred to the first interactive element\n   * when the popover opens\n   */\n  autoFocus?: boolean\n  /**\n   * If `true`, the popover will close when you blur out it by\n   * clicking outside or tabbing out\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the popover will close when you hit the `Esc` key\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback fired when the popover opens\n   */\n  onOpen?: () => void\n  /**\n   * Callback fired when the popover closes\n   */\n  onClose?: () => void\n  /**\n   * The size of the popover arrow\n   */\n  arrowSize?: number\n  /**\n   * The `box-shadow` of the popover arrow\n   */\n  arrowShadowColor?: string\n  /**\n   * The interaction that triggers the popover.\n   *\n   * `hover` - means the popover will open when you hover with mouse or\n   * focus with keyboard on the popover trigger\n   *\n   * `click` - means the popover will open on click or\n   * press `Enter` to `Space` on keyboard\n   */\n  trigger?: keyof typeof TRIGGER\n  openDelay?: number\n  closeDelay?: number\n  /**\n   * Performance 🚀:\n   * If `true`, the PopoverContent rendering will be deferred\n   * until the popover is open.\n   */\n  isLazy?: boolean\n  /**\n   * Performance 🚀:\n   * The lazy behavior of popover's content when not visible.\n   * Only works when `isLazy={true}`\n   *\n   * - \"unmount\": The popover's content is always unmounted when not open.\n   * - \"keepMounted\": The popover's content initially unmounted,\n   * but stays mounted when popover is open.\n   *\n   * @default \"unmount\"\n   */\n  lazyBehavior?: LazyBehavior\n}\n\n/**\n * @internal\n */\nexport function usePopover(props: UsePopoverProps = {}) {\n  const {\n    closeOnBlur = true,\n    closeOnEsc = true,\n    initialFocusRef,\n    id,\n    returnFocusOnClose = true,\n    autoFocus = true,\n    arrowSize,\n    arrowShadowColor,\n    trigger = TRIGGER.click,\n    openDelay = 200,\n    closeDelay = 200,\n    isLazy,\n    lazyBehavior = \"unmount\",\n    ...popperProps\n  } = props\n\n  const { isOpen, onClose, onOpen, onToggle } = useDisclosure(props)\n\n  const triggerRef = useRef<HTMLElement>(null)\n  const popoverRef = useRef<HTMLElement>(null)\n\n  const isHoveringRef = useRef(false)\n\n  const hasBeenOpened = useRef(false)\n  if (isOpen) {\n    hasBeenOpened.current = true\n  }\n\n  const [hasHeader, setHasHeader] = useState(false)\n  const [hasBody, setHasBody] = useState(false)\n\n  const [triggerId, popoverId, headerId, bodyId] = useIds(\n    id,\n    \"popover-trigger\",\n    \"popover-content\",\n    \"popover-header\",\n    \"popover-body\",\n  )\n\n  const {\n    referenceRef,\n    getArrowProps,\n    getPopperProps,\n    getArrowInnerProps,\n    forceUpdate,\n  } = usePopper(popperProps)\n\n  useFocusOnPointerDown({\n    enabled: isOpen,\n    ref: triggerRef,\n  })\n\n  useFocusOnHide(popoverRef, {\n    focusRef: triggerRef,\n    visible: isOpen,\n    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click,\n  })\n\n  useFocusOnShow(popoverRef, {\n    focusRef: initialFocusRef,\n    visible: isOpen,\n    shouldFocus: autoFocus && trigger === TRIGGER.click,\n  })\n\n  const shouldRenderChildren = determineLazyBehavior({\n    hasBeenSelected: hasBeenOpened.current,\n    isLazy,\n    lazyBehavior,\n    isSelected: isOpen,\n  })\n\n  const getPopoverProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const popoverProps: HTMLProps = {\n        ...props,\n        style: {\n          ...props.style,\n          transformOrigin: popperCSSVars.transformOrigin.varRef,\n        },\n        ref: mergeRefs(popoverRef, _ref),\n        children: shouldRenderChildren ? props.children : null,\n        id: popoverId,\n        tabIndex: -1,\n        role: \"dialog\",\n        onKeyDown: callAllHandlers(props.onKeyDown, (event) => {\n          if (closeOnEsc && event.key === \"Escape\") {\n            onClose()\n          }\n        }),\n        onBlur: callAllHandlers(props.onBlur, (event) => {\n          const relatedTarget = getRelatedTarget(event)\n          const targetIsPopover = contains(popoverRef.current, relatedTarget)\n          const targetIsTrigger = contains(triggerRef.current, relatedTarget)\n          const isValidBlur = !targetIsPopover && !targetIsTrigger\n\n          if (isOpen && closeOnBlur && isValidBlur) {\n            onClose()\n          }\n        }),\n        \"aria-labelledby\": hasHeader ? headerId : undefined,\n        \"aria-describedby\": hasBody ? bodyId : undefined,\n      }\n\n      if (trigger === TRIGGER.hover) {\n        popoverProps.role = \"tooltip\"\n        popoverProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n        })\n        popoverProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n          isHoveringRef.current = false\n          setTimeout(onClose, closeDelay)\n        })\n      }\n\n      return popoverProps\n    },\n    [\n      shouldRenderChildren,\n      popoverId,\n      hasHeader,\n      headerId,\n      hasBody,\n      bodyId,\n      trigger,\n      closeOnEsc,\n      onClose,\n      isOpen,\n      closeOnBlur,\n      closeDelay,\n    ],\n  )\n\n  const getPopoverPositionerProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) =>\n      getPopperProps(\n        {\n          ...props,\n          style: {\n            [popperCSSVars.arrowSize.var]: arrowSize\n              ? px(arrowSize)\n              : undefined,\n            [popperCSSVars.arrowShadowColor.var]: arrowShadowColor,\n            visibility: isOpen ? \"visible\" : \"hidden\",\n            ...props.style,\n          },\n        },\n        forwardedRef,\n      ),\n    [arrowShadowColor, arrowSize, isOpen, getPopperProps],\n  )\n\n  const openTimeout = useRef<number>()\n  const closeTimeout = useRef<number>()\n\n  const getTriggerProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const triggerProps: HTMLProps = {\n        ...props,\n        ref: mergeRefs(triggerRef, _ref, referenceRef),\n        id: triggerId,\n        \"aria-haspopup\": \"dialog\",\n        \"aria-expanded\": isOpen,\n        \"aria-controls\": popoverId,\n      }\n\n      if (trigger === TRIGGER.click) {\n        triggerProps.onClick = callAllHandlers(props.onClick, onToggle)\n      }\n\n      if (trigger === TRIGGER.hover) {\n        /**\n         * Any content that shows on pointer hover should also show on keyboard focus.\n         * Consider focus and blur to be the `hover` for keyboard users.\n         *\n         * @see https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html\n         */\n        triggerProps.onFocus = callAllHandlers(props.onFocus, onOpen)\n        triggerProps.onBlur = callAllHandlers(props.onBlur, onClose)\n\n        /**\n         * Any content that shows on hover or focus must be dismissible.\n         * This case pressing `Escape` will dismiss the popover\n         */\n        triggerProps.onKeyDown = callAllHandlers(props.onKeyDown, (event) => {\n          if (event.key === \"Escape\") {\n            onClose()\n          }\n        })\n\n        triggerProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n          openTimeout.current = window.setTimeout(onOpen, openDelay)\n        })\n\n        triggerProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n          isHoveringRef.current = false\n\n          if (openTimeout.current) {\n            clearTimeout(openTimeout.current)\n            openTimeout.current = undefined\n          }\n\n          closeTimeout.current = window.setTimeout(() => {\n            if (isHoveringRef.current === false) {\n              onClose()\n            }\n          }, closeDelay)\n        })\n      }\n\n      return triggerProps\n    },\n    [\n      triggerId,\n      isOpen,\n      popoverId,\n      trigger,\n      referenceRef,\n      onToggle,\n      onOpen,\n      onClose,\n      openDelay,\n      closeDelay,\n    ],\n  )\n\n  useEffect(() => {\n    return () => {\n      if (openTimeout.current) {\n        clearTimeout(openTimeout.current)\n      }\n      if (closeTimeout.current) {\n        clearTimeout(closeTimeout.current)\n      }\n    }\n  }, [])\n\n  const getHeaderProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      id: headerId,\n      ref: mergeRefs(ref, (node: HTMLElement | null) => {\n        setHasHeader(!!node)\n      }),\n    }),\n    [headerId],\n  )\n\n  const getBodyProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      id: bodyId,\n      ref: mergeRefs(ref, (node) => {\n        setHasBody(!!node)\n      }),\n    }),\n    [bodyId],\n  )\n\n  return {\n    forceUpdate,\n    isOpen,\n    onClose,\n    getArrowProps,\n    getArrowInnerProps,\n    getPopoverPositionerProps,\n    getPopoverProps,\n    getTriggerProps,\n    getHeaderProps,\n    getBodyProps,\n  }\n}\n\nexport type UsePopoverReturn = ReturnType<typeof usePopover>\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}