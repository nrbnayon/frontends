{"ast":null,"code":"import * as React from \"react\";\nexport function useEventListeners() {\n  var listeners = React.useRef(new Map());\n  var currentListeners = listeners.current;\n  var add = React.useCallback((el, type, listener, options) => {\n    listeners.current.set(listener, {\n      type,\n      el,\n      options\n    });\n    el.addEventListener(type, listener, options);\n  }, []);\n  var remove = React.useCallback((el, type, listener, options) => {\n    el.removeEventListener(type, listener, options);\n    listeners.current.delete(listener);\n  }, []);\n  React.useEffect(() => () => {\n    currentListeners.forEach((value, key) => {\n      remove(value.el, value.type, key, value.options);\n    });\n  }, [remove, currentListeners]);\n  return {\n    add,\n    remove\n  };\n}","map":{"version":3,"names":["React","useEventListeners","listeners","useRef","Map","currentListeners","current","add","useCallback","el","type","listener","options","set","addEventListener","remove","removeEventListener","delete","useEffect","forEach","value","key"],"sources":["../../src/use-event-listeners.ts"],"sourcesContent":["import * as React from \"react\"\n\ninterface EventListeners {\n  add<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (this: Document, ev: DocumentEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  add(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  remove<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (this: Document, ev: DocumentEventMap[K]) => any,\n    options?: boolean | EventListenerOptions,\n  ): void\n  remove(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions,\n  ): void\n}\n\nexport function useEventListeners(): EventListeners {\n  const listeners = React.useRef(new Map())\n  const currentListeners = listeners.current\n\n  const add = React.useCallback((el, type, listener, options) => {\n    listeners.current.set(listener, { type, el, options })\n    el.addEventListener(type, listener, options)\n  }, [])\n\n  const remove = React.useCallback((el, type, listener, options) => {\n    el.removeEventListener(type, listener, options)\n    listeners.current.delete(listener)\n  }, [])\n\n  React.useEffect(\n    () => () => {\n      currentListeners.forEach((value, key) => {\n        remove(value.el, value.type, key, value.options)\n      })\n    },\n    [remove, currentListeners],\n  )\n\n  return { add, remove }\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AA6BA,OAAO,SAASC,iBAATA,CAAA,EAA6C;EAClD,IAAMC,SAAS,GAAGF,KAAK,CAACG,MAAN,CAAa,IAAIC,GAAJ,EAAb,CAAlB;EACA,IAAMC,gBAAgB,GAAGH,SAAS,CAACI,OAAnC;EAEA,IAAMC,GAAG,GAAGP,KAAK,CAACQ,WAAN,CAAkB,CAACC,EAAD,EAAKC,IAAL,EAAWC,QAAX,EAAqBC,OAArB,KAAiC;IAC7DV,SAAS,CAACI,OAAV,CAAkBO,GAAlB,CAAsBF,QAAtB,EAAgC;MAAED,IAAF;MAAQD,EAAR;MAAYG;IAAZ,CAAhC;IACAH,EAAE,CAACK,gBAAH,CAAoBJ,IAApB,EAA0BC,QAA1B,EAAoCC,OAApC;EACD,CAHW,EAGT,EAHS,CAAZ;EAKA,IAAMG,MAAM,GAAGf,KAAK,CAACQ,WAAN,CAAkB,CAACC,EAAD,EAAKC,IAAL,EAAWC,QAAX,EAAqBC,OAArB,KAAiC;IAChEH,EAAE,CAACO,mBAAH,CAAuBN,IAAvB,EAA6BC,QAA7B,EAAuCC,OAAvC;IACAV,SAAS,CAACI,OAAV,CAAkBW,MAAlB,CAAyBN,QAAzB;EACD,CAHc,EAGZ,EAHY,CAAf;EAKAX,KAAK,CAACkB,SAAN,CACE,MAAM,MAAM;IACVb,gBAAgB,CAACc,OAAjB,CAAyB,CAACC,KAAD,EAAQC,GAAR,KAAgB;MACvCN,MAAM,CAACK,KAAK,CAACX,EAAP,EAAWW,KAAK,CAACV,IAAjB,EAAuBW,GAAvB,EAA4BD,KAAK,CAACR,OAAlC,CAAN;IACD,CAFD;EAGD,CALH,EAME,CAACG,MAAD,EAASV,gBAAT,CANF;EASA,OAAO;IAAEE,GAAF;IAAOQ;EAAP,CAAP;AACD"},"metadata":{},"sourceType":"module"}