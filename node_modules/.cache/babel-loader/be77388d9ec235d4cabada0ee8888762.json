{"ast":null,"code":"import { useTheme } from \"@chakra-ui/system\";\nimport { arrayToObjectNotation, fromEntries, isArray } from \"@chakra-ui/utils\";\nimport { getClosestValue } from \"./media-query.utils\";\nimport { useBreakpoint } from \"./use-breakpoint\";\n/**\r\n * React hook for getting the value for the current breakpoint from the\r\n * provided responsive values object.\r\n *\r\n * @example\r\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\r\n */\n\nexport function useBreakpointValue(values) {\n  var breakpoint = useBreakpoint();\n  var theme = useTheme();\n  if (!breakpoint) return undefined;\n  /**\r\n   * Get the non-number breakpoint keys from the provided breakpoints\r\n   */\n\n  var breakpoints = Object.keys(theme.breakpoints);\n  var obj = isArray(values) ? fromEntries(Object.entries(arrayToObjectNotation(values, breakpoints)).map(_ref => {\n    var [key, value] = _ref;\n    return [key, value];\n  })) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}","map":{"version":3,"names":["useTheme","arrayToObjectNotation","fromEntries","isArray","getClosestValue","useBreakpoint","useBreakpointValue","values","breakpoint","theme","undefined","breakpoints","Object","keys","obj","entries","map","_ref","key","value"],"sources":["../../src/use-breakpoint-value.ts"],"sourcesContent":["import { useTheme } from \"@chakra-ui/system\"\nimport { arrayToObjectNotation, fromEntries, isArray } from \"@chakra-ui/utils\"\nimport { getClosestValue } from \"./media-query.utils\"\nimport { useBreakpoint } from \"./use-breakpoint\"\n\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n */\nexport function useBreakpointValue<T = any>(\n  values: Record<string, T> | T[],\n): T | undefined {\n  const breakpoint = useBreakpoint()\n  const theme = useTheme()\n\n  if (!breakpoint) return undefined\n\n  /**\n   * Get the non-number breakpoint keys from the provided breakpoints\n   */\n  const breakpoints = Object.keys(theme.breakpoints)\n\n  const obj = isArray(values)\n    ? fromEntries<Record<string, T>>(\n        Object.entries(\n          arrayToObjectNotation(values, breakpoints),\n        ).map(([key, value]) => [key, value]),\n      )\n    : values\n\n  return getClosestValue(obj, breakpoint, breakpoints)\n}\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,mBAAzB;AACA,SAASC,qBAAT,EAAgCC,WAAhC,EAA6CC,OAA7C,QAA4D,kBAA5D;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,aAAT,QAA8B,kBAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,kBAATA,CACLC,MADK,EAEU;EACf,IAAMC,UAAU,GAAGH,aAAa,EAAhC;EACA,IAAMI,KAAK,GAAGT,QAAQ,EAAtB;EAEA,IAAI,CAACQ,UAAL,EAAiB,OAAOE,SAAP;EAEjB;AACF;AACA;;EACE,IAAMC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYJ,KAAK,CAACE,WAAlB,CAApB;EAEA,IAAMG,GAAG,GAAGX,OAAO,CAACI,MAAD,CAAP,GACRL,WAAW,CACTU,MAAM,CAACG,OAAP,CACEd,qBAAqB,CAACM,MAAD,EAASI,WAAT,CADvB,EAEEK,GAFF,CAEMC,IAAA;IAAA,IAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,GAAAF,IAAA;IAAA,OAAkB,CAACC,GAAD,EAAMC,KAAN,CAAlB;EAAA,CAFN,CADS,CADH,GAMRZ,MANJ;EAQA,OAAOH,eAAe,CAACU,GAAD,EAAMN,UAAN,EAAkBG,WAAlB,CAAtB;AACD"},"metadata":{},"sourceType":"module"}