{"ast":null,"code":"const encodePacket = require(\"./encodePacket\");\nconst decodePacket = require(\"./decodePacket\");\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\n\nconst encodePayload = (packets, callback) => {\n  // some packets may be added to the array while encoding, so the initial length must be saved\n  const length = packets.length;\n  const encodedPackets = new Array(length);\n  let count = 0;\n  packets.forEach((packet, i) => {\n    // force base64 encoding for binary packets\n    encodePacket(packet, false, encodedPacket => {\n      encodedPackets[i] = encodedPacket;\n      if (++count === length) {\n        callback(encodedPackets.join(SEPARATOR));\n      }\n    });\n  });\n};\nconst decodePayload = (encodedPayload, binaryType) => {\n  const encodedPackets = encodedPayload.split(SEPARATOR);\n  const packets = [];\n  for (let i = 0; i < encodedPackets.length; i++) {\n    const decodedPacket = decodePacket(encodedPackets[i], binaryType);\n    packets.push(decodedPacket);\n    if (decodedPacket.type === \"error\") {\n      break;\n    }\n  }\n  return packets;\n};\nmodule.exports = {\n  protocol: 4,\n  encodePacket,\n  encodePayload,\n  decodePacket,\n  decodePayload\n};","map":{"version":3,"names":["encodePacket","require","decodePacket","SEPARATOR","String","fromCharCode","encodePayload","packets","callback","length","encodedPackets","Array","count","forEach","packet","i","encodedPacket","join","decodePayload","encodedPayload","binaryType","split","decodedPacket","push","type","module","exports","protocol"],"sources":["E:/Hasan sir project/frontend/node_modules/engine.io-parser/lib/index.js"],"sourcesContent":["const encodePacket = require(\"./encodePacket\");\r\nconst decodePacket = require(\"./decodePacket\");\r\n\r\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\r\n\r\nconst encodePayload = (packets, callback) => {\r\n  // some packets may be added to the array while encoding, so the initial length must be saved\r\n  const length = packets.length;\r\n  const encodedPackets = new Array(length);\r\n  let count = 0;\r\n\r\n  packets.forEach((packet, i) => {\r\n    // force base64 encoding for binary packets\r\n    encodePacket(packet, false, encodedPacket => {\r\n      encodedPackets[i] = encodedPacket;\r\n      if (++count === length) {\r\n        callback(encodedPackets.join(SEPARATOR));\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\nconst decodePayload = (encodedPayload, binaryType) => {\r\n  const encodedPackets = encodedPayload.split(SEPARATOR);\r\n  const packets = [];\r\n  for (let i = 0; i < encodedPackets.length; i++) {\r\n    const decodedPacket = decodePacket(encodedPackets[i], binaryType);\r\n    packets.push(decodedPacket);\r\n    if (decodedPacket.type === \"error\") {\r\n      break;\r\n    }\r\n  }\r\n  return packets;\r\n};\r\n\r\nmodule.exports = {\r\n  protocol: 4,\r\n  encodePacket,\r\n  encodePayload,\r\n  decodePacket,\r\n  decodePayload\r\n};\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAC9C,MAAMC,YAAY,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAE9C,MAAME,SAAS,GAAGC,MAAM,CAACC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;;AAE3C,MAAMC,aAAa,GAAGA,CAACC,OAAO,EAAEC,QAAQ,KAAK;EAC3C;EACA,MAAMC,MAAM,GAAGF,OAAO,CAACE,MAAM;EAC7B,MAAMC,cAAc,GAAG,IAAIC,KAAK,CAACF,MAAM,CAAC;EACxC,IAAIG,KAAK,GAAG,CAAC;EAEbL,OAAO,CAACM,OAAO,CAAC,CAACC,MAAM,EAAEC,CAAC,KAAK;IAC7B;IACAf,YAAY,CAACc,MAAM,EAAE,KAAK,EAAEE,aAAa,IAAI;MAC3CN,cAAc,CAACK,CAAC,CAAC,GAAGC,aAAa;MACjC,IAAI,EAAEJ,KAAK,KAAKH,MAAM,EAAE;QACtBD,QAAQ,CAACE,cAAc,CAACO,IAAI,CAACd,SAAS,CAAC,CAAC;MAC1C;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AAED,MAAMe,aAAa,GAAGA,CAACC,cAAc,EAAEC,UAAU,KAAK;EACpD,MAAMV,cAAc,GAAGS,cAAc,CAACE,KAAK,CAAClB,SAAS,CAAC;EACtD,MAAMI,OAAO,GAAG,EAAE;EAClB,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,cAAc,CAACD,MAAM,EAAEM,CAAC,EAAE,EAAE;IAC9C,MAAMO,aAAa,GAAGpB,YAAY,CAACQ,cAAc,CAACK,CAAC,CAAC,EAAEK,UAAU,CAAC;IACjEb,OAAO,CAACgB,IAAI,CAACD,aAAa,CAAC;IAC3B,IAAIA,aAAa,CAACE,IAAI,KAAK,OAAO,EAAE;MAClC;IACF;EACF;EACA,OAAOjB,OAAO;AAChB,CAAC;AAEDkB,MAAM,CAACC,OAAO,GAAG;EACfC,QAAQ,EAAE,CAAC;EACX3B,YAAY;EACZM,aAAa;EACbJ,YAAY;EACZgB;AACF,CAAC"},"metadata":{},"sourceType":"script"}