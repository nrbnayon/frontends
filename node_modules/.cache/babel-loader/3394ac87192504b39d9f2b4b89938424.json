{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { useTheme } from \"@chakra-ui/system\";\nimport React from \"react\";\nimport createMediaQueries from \"./create-media-query\";\n\n/**\r\n * React hook used to get the current responsive media breakpoint.\r\n *\r\n * @param defaultBreakpoint default breakpoint name\r\n * (in non-window environments like SSR)\r\n *\r\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\r\n * to get the default breakpoint value from the user-agent\r\n */\nexport function useBreakpoint(defaultBreakpoint) {\n  var {\n    breakpoints\n  } = useTheme();\n  var mediaQueries = React.useMemo(() => createMediaQueries(_extends({\n    base: \"0px\"\n  }, breakpoints)), [breakpoints]);\n  var [currentBreakpoint, setCurrentBreakpoint] = React.useState(() => {\n    if (!defaultBreakpoint) {\n      return undefined;\n    }\n    var mediaQuery = mediaQueries.find(_ref => {\n      var {\n        breakpoint\n      } = _ref;\n      return breakpoint === defaultBreakpoint;\n    });\n    if (mediaQuery) {\n      var breakpoint = _objectWithoutPropertiesLoose(mediaQuery, [\"query\"]);\n      return breakpoint;\n    }\n    return undefined;\n  });\n  var current = currentBreakpoint == null ? void 0 : currentBreakpoint.breakpoint;\n  var update = React.useCallback((query, breakpoint) => {\n    if (query.matches && current !== breakpoint.breakpoint) {\n      setCurrentBreakpoint(breakpoint);\n    }\n  }, [current]);\n  React.useEffect(() => {\n    var listeners = new Set();\n    mediaQueries.forEach(_ref2 => {\n      var {\n          query\n        } = _ref2,\n        breakpoint = _objectWithoutPropertiesLoose(_ref2, [\"query\"]);\n      var mediaQuery = window.matchMedia(query); // trigger an initial update to determine media query\n\n      update(mediaQuery, breakpoint);\n      var handleChange = () => {\n        update(mediaQuery, breakpoint);\n      }; // add media query-listener\n\n      mediaQuery.addListener(handleChange); // push the media query list handleChange\n      // so we can use it to remove Listener\n\n      listeners.add({\n        mediaQuery,\n        handleChange\n      });\n      return () => {\n        // clean up 1\n        mediaQuery.removeListener(handleChange);\n      };\n    });\n    return () => {\n      // clean up 2: for safety\n      listeners.forEach(_ref3 => {\n        var {\n          mediaQuery,\n          handleChange\n        } = _ref3;\n        mediaQuery.removeListener(handleChange);\n      });\n      listeners.clear();\n    };\n  }, [mediaQueries, breakpoints, update]);\n  return current;\n}","map":{"version":3,"names":["useTheme","React","createMediaQueries","useBreakpoint","defaultBreakpoint","breakpoints","mediaQueries","useMemo","_extends","base","currentBreakpoint","setCurrentBreakpoint","useState","undefined","mediaQuery","find","_ref","breakpoint","_objectWithoutPropertiesLoose","current","update","useCallback","query","matches","useEffect","listeners","Set","forEach","_ref2","window","matchMedia","handleChange","addListener","add","removeListener","_ref3","clear"],"sources":["../../src/use-breakpoint.ts"],"sourcesContent":["import { useTheme } from \"@chakra-ui/system\"\nimport React from \"react\"\nimport createMediaQueries from \"./create-media-query\"\n\ninterface Listener {\n  mediaQuery: MediaQueryList\n  handleChange: () => void\n}\n\nexport interface Breakpoint {\n  breakpoint: string\n  maxWidth?: string\n  minWidth: string\n}\n\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\nexport function useBreakpoint(defaultBreakpoint?: string) {\n  const { breakpoints } = useTheme()\n\n  const mediaQueries = React.useMemo(\n    () => createMediaQueries({ base: \"0px\", ...breakpoints }),\n    [breakpoints],\n  )\n\n  const [currentBreakpoint, setCurrentBreakpoint] = React.useState(() => {\n    if (!defaultBreakpoint) {\n      return undefined\n    }\n\n    const mediaQuery = mediaQueries.find(\n      ({ breakpoint }) => breakpoint === defaultBreakpoint,\n    )\n\n    if (mediaQuery) {\n      const { query, ...breakpoint } = mediaQuery\n      return breakpoint\n    }\n\n    return undefined\n  })\n\n  const current = currentBreakpoint?.breakpoint\n\n  const update = React.useCallback(\n    (query: MediaQueryList, breakpoint: Breakpoint) => {\n      if (query.matches && current !== breakpoint.breakpoint) {\n        setCurrentBreakpoint(breakpoint)\n      }\n    },\n    [current],\n  )\n\n  React.useEffect(() => {\n    const listeners = new Set<Listener>()\n\n    mediaQueries.forEach(({ query, ...breakpoint }) => {\n      const mediaQuery = window.matchMedia(query)\n\n      // trigger an initial update to determine media query\n      update(mediaQuery, breakpoint)\n\n      const handleChange = () => {\n        update(mediaQuery, breakpoint)\n      }\n\n      // add media query-listener\n      mediaQuery.addListener(handleChange)\n\n      // push the media query list handleChange\n      // so we can use it to remove Listener\n      listeners.add({ mediaQuery, handleChange })\n\n      return () => {\n        // clean up 1\n        mediaQuery.removeListener(handleChange)\n      }\n    })\n\n    return () => {\n      // clean up 2: for safety\n      listeners.forEach(({ mediaQuery, handleChange }) => {\n        mediaQuery.removeListener(handleChange)\n      })\n      listeners.clear()\n    }\n  }, [mediaQueries, breakpoints, update])\n\n  return current\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,mBAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAATA,CAAuBC,iBAAvB,EAAmD;EACxD,IAAM;IAAEC;EAAF,IAAkBL,QAAQ,EAAhC;EAEA,IAAMM,YAAY,GAAGL,KAAK,CAACM,OAAN,CACnB,MAAML,kBAAkB,CAAAM,QAAA;IAAGC,IAAI,EAAE;EAAT,GAAmBJ,WAAnB,EADL,EAEnB,CAACA,WAAD,CAFmB,CAArB;EAKA,IAAM,CAACK,iBAAD,EAAoBC,oBAApB,IAA4CV,KAAK,CAACW,QAAN,CAAe,MAAM;IACrE,IAAI,CAACR,iBAAL,EAAwB;MACtB,OAAOS,SAAP;IACD;IAED,IAAMC,UAAU,GAAGR,YAAY,CAACS,IAAb,CACjBC,IAAA;MAAA,IAAC;QAAEC;MAAF,CAAD,GAAAD,IAAA;MAAA,OAAoBC,UAAU,KAAKb,iBAAnC;IAAA,CADiB,CAAnB;IAIA,IAAIU,UAAJ,EAAgB;MACd,IAAkBG,UAAlB,GAAAC,6BAAA,CAAiCJ,UAAjC;MACA,OAAOG,UAAP;IACD;IAED,OAAOJ,SAAP;EACD,CAfiD,CAAlD;EAiBA,IAAMM,OAAO,GAAGT,iBAAH,oBAAGA,iBAAiB,CAAEO,UAAnC;EAEA,IAAMG,MAAM,GAAGnB,KAAK,CAACoB,WAAN,CACb,CAACC,KAAD,EAAwBL,UAAxB,KAAmD;IACjD,IAAIK,KAAK,CAACC,OAAN,IAAiBJ,OAAO,KAAKF,UAAU,CAACA,UAA5C,EAAwD;MACtDN,oBAAoB,CAACM,UAAD,CAApB;IACD;EACF,CALY,EAMb,CAACE,OAAD,CANa,CAAf;EASAlB,KAAK,CAACuB,SAAN,CAAgB,MAAM;IACpB,IAAMC,SAAS,GAAG,IAAIC,GAAJ,EAAlB;IAEApB,YAAY,CAACqB,OAAb,CAAqBC,KAAA,IAA8B;MAAA,IAA7B;UAAEN;QAAF,CAA6B,GAAAM,KAAA;QAAjBX,UAAiB,GAAAC,6BAAA,CAAAU,KAAA;MACjD,IAAMd,UAAU,GAAGe,MAAM,CAACC,UAAP,CAAkBR,KAAlB,CAAnB,CADiD,CAGjD;;MACAF,MAAM,CAACN,UAAD,EAAaG,UAAb,CAAN;MAEA,IAAMc,YAAY,GAAGA,CAAA,KAAM;QACzBX,MAAM,CAACN,UAAD,EAAaG,UAAb,CAAN;MACD,CAFD,CANiD,CAUjD;;MACAH,UAAU,CAACkB,WAAX,CAAuBD,YAAvB,EAXiD,CAajD;MACA;;MACAN,SAAS,CAACQ,GAAV,CAAc;QAAEnB,UAAF;QAAciB;MAAd,CAAd;MAEA,OAAO,MAAM;QACX;QACAjB,UAAU,CAACoB,cAAX,CAA0BH,YAA1B;MACD,CAHD;IAID,CArBD;IAuBA,OAAO,MAAM;MACX;MACAN,SAAS,CAACE,OAAV,CAAkBQ,KAAA,IAAkC;QAAA,IAAjC;UAAErB,UAAF;UAAciB;QAAd,CAAiC,GAAAI,KAAA;QAClDrB,UAAU,CAACoB,cAAX,CAA0BH,YAA1B;MACD,CAFD;MAGAN,SAAS,CAACW,KAAV;IACD,CAND;EAOD,CAjCD,EAiCG,CAAC9B,YAAD,EAAeD,WAAf,EAA4Be,MAA5B,CAjCH;EAmCA,OAAOD,OAAP;AACD"},"metadata":{},"sourceType":"module"}