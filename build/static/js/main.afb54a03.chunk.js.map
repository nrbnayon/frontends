{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","selectedChat","setSelectedChat","useState","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","_jsx","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","_jsxs","VStack","spacing","FormControl","id","isRequired","FormLabel","Input","type","placeholder","onChange","e","target","InputGroup","size","InputRightElement","width","Button","h","bg","_hover","borderWidth","onClick","handleClick","leftIcon","Icon","as","ViewOffIcon","ViewIcon","colorScheme","style","marginTop","async","title","status","duration","isClosable","position","config","headers","data","axios","post","setItem","stringify","error","description","response","message","isLoading","variant","Signup","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","backgroundColor","p","accept","pics","undefined","console","log","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","Container","maxW","centerContent","Box","d","justifyContent","w","m","borderRadius","Text","fontSize","fontFamily","Tabs","isFitted","TabList","mb","Tab","TabPanels","TabPanel","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","_users$","ProfileModal","isOpen","onOpen","onClose","useDisclosure","_Fragment","IconButton","base","icon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","flexDir","alignItems","Image","boxSize","src","alt","md","ModalFooter","ScrollableChat","ScrollableFeed","map","display","Tooltip","label","placement","hasArrow","Avatar","mt","mr","cursor","concat","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","Badge","px","py","CloseIcon","pl","UserListItem","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleAddUser","find","u","user1","groupAdmin","Authorization","token","put","chatId","handleRemove","chatName","flexWrap","pb","ml","query","get","handleSearch","Spinner","socket","selectedChatCompare","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","typingText","setTypingText","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","io","on","inputText","newMessageRecieved","chat","includes","ArrowBackIcon","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","event","key","marginRight","Lottie","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","getSenderFull","Chatbox","ChatLoading","Stack","Skeleton","height","GroupChatModal","selectedUsers","setSelectedUsers","handleDelete","delUser","filter","sel","slice","handleGroup","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","AddIcon","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","notif","MenuItem","n","ChevronDownIcon","MenuDivider","logoutHandler","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","Chatpage","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.afb54a03.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Icon, useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport { ViewIcon, ViewOffIcon } from \"@chakra-ui/icons\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n  const { setUser } = ChatState();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setUser(data);\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Sorry!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"10px\">\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button\r\n              h=\"90%\"\r\n              bg=\"transparent\"\r\n              _hover={\"none\"}\r\n              borderWidth=\"none\"\r\n              size=\"lg\"\r\n              onClick={handleClick}\r\n              leftIcon={<Icon as={show ? ViewOffIcon : ViewIcon} />}\r\n            ></Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n      <Button\r\n        variant=\"solid\"\r\n        colorScheme=\"red\"\r\n        width=\"100%\"\r\n        onClick={() => {\r\n          setEmail(\"guest@example.com\");\r\n          setPassword(\"123456\");\r\n        }}\r\n      >\r\n        Get Guest User Credentials\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport { Icon, ViewIcon, ViewOffIcon } from \"@chakra-ui/icons\";\r\n\r\nconst Signup = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [pic, setPic] = useState();\r\n  const [picLoading, setPicLoading] = useState(false);\r\n\r\n  const submitHandler = async () => {\r\n    setPicLoading(true);\r\n    if (!name || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(name, email, password, pic);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        \"/api/user\",\r\n        {\r\n          name,\r\n          email,\r\n          password,\r\n          pic,\r\n        },\r\n        config\r\n      );\r\n      console.log(data);\r\n      toast({\r\n        title: \"Registration Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setPicLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n    }\r\n  };\r\n\r\n  const postDetails = (pics) => {\r\n    setPicLoading(true);\r\n    if (pics === undefined) {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(pics);\r\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\r\n      const data = new FormData();\r\n      data.append(\"file\", pics);\r\n      data.append(\"upload_preset\", \"Chatters\");\r\n      data.append(\"cloud_name\", \"nayon\");\r\n      fetch(\"https://api.cloudinary.com/v1_1/nayon/image/upload\", {\r\n        method: \"post\",\r\n        body: data,\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setPic(data.url.toString());\r\n          console.log(data.url.toString());\r\n          setPicLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setPicLoading(false);\r\n        });\r\n    } else {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"5px\">\r\n      <FormControl id=\"first-name\" isRequired>\r\n        <FormLabel>Name</FormLabel>\r\n        <Input\r\n          placeholder=\"Enter Your Name\"\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter Password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button\r\n              h=\"90%\"\r\n              bg=\"transparent\"\r\n              _hover={{ backgroundColor: \"transparent\" }}\r\n              borderWidth=\"none\"\r\n              size=\"lg\"\r\n              onClick={handleClick}\r\n              leftIcon={<Icon as={show ? ViewOffIcon : ViewIcon} />}\r\n            ></Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Confirm Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Confirm password\"\r\n            onChange={(e) => setConfirmpassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button\r\n              h=\"90%\"\r\n              bg=\"transparent\"\r\n              _hover={\"none\"}\r\n              borderWidth=\"none\"\r\n              size=\"lg\"\r\n              onClick={handleClick}\r\n              leftIcon={<Icon as={show ? ViewOffIcon : ViewIcon} />}\r\n            ></Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"pic\">\r\n        <FormLabel>Upload your Picture</FormLabel>\r\n        <Input\r\n          type=\"file\"\r\n          p={1.5}\r\n          accept=\"image/*\"\r\n          onChange={(e) => postDetails(e.target.files[0])}\r\n        />\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={picLoading}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Signup from \"../components/Authentication/Signup\";\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    if (user) history.push(\"/chats\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\r\n          Chatters\r\n        </Text>\r\n      </Box>\r\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n        <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Tab>Login</Tab>\r\n            <Tab>Sign Up</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              src={user.pic}\r\n              alt={user.name}\r\n            />\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\n\r\nconst UserListItem = ({ user, handleFunction }) => {\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      console.log(data._id);\r\n      // setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\n\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nconst ENDPOINT = \"https://msg-n0bs.onrender.com\";\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n  const [typingText, setTypingText] = useState(\"\");\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", (inputText) => {\r\n      console.log(`Received typing event: ${inputText}`);\r\n      setTypingText(inputText);\r\n    });\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n    socket.on(\"typing\", (inputText) => {\r\n      // Handle the broadcasted typing information (inputText)\r\n      setIsTyping(true);\r\n      setTypingText(inputText);\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    const inputText = e.target.value;\r\n    setNewMessage(inputText);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id, inputText);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping ? (\r\n                <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                  <div style={{ marginRight: \"10px\", display: \"flex\" }}>\r\n                    <div>{typingText}</div>\r\n                    <Lottie\r\n                      options={defaultOptions}\r\n                      width={70}\r\n                      style={{\r\n                        marginBottom: 15,\r\n                        marginLeft: 8,\r\n                        background: \"transparent\",\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        // to get socket.io on same page\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { user, chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: Nayon, Turza\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState({});\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      display={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n        <GroupChatModal>\r\n          <Button\r\n            d=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n          Chatters\r\n        </Text>\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        {user && <MyChats fetchAgain={fetchAgain} />}\r\n        {user && (\r\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import \"./App.css\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path=\"/\" component={Homepage} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}