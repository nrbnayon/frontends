{"ast":null,"code":"import { createTransform } from \"./create-transform\";\nexport function toConfig(scale, transform) {\n  return property => {\n    var result = {\n      property,\n      scale\n    };\n    result.transform = createTransform({\n      scale,\n      transform\n    });\n    return result;\n  };\n}\nvar getRtl = _ref => {\n  var {\n    rtl,\n    ltr\n  } = _ref;\n  return theme => theme.direction === \"rtl\" ? rtl : ltr;\n};\nexport function logical(options) {\n  var {\n    property,\n    scale,\n    transform\n  } = options;\n  return {\n    scale,\n    property: getRtl(property),\n    transform: scale ? createTransform({\n      scale,\n      compose: transform\n    }) : transform\n  };\n}","map":{"version":3,"names":["createTransform","toConfig","scale","transform","property","result","getRtl","_ref","rtl","ltr","theme","direction","logical","options","compose"],"sources":["../../../src/utils/prop-config.ts"],"sourcesContent":["import { Dict } from \"@chakra-ui/utils\"\nimport * as CSS from \"csstype\"\nimport { createTransform } from \"./create-transform\"\nimport { ThemeScale } from \"../create-theme-vars\"\nimport type { CssTheme, Transform } from \"./types\"\n\ntype CSSProp = keyof CSS.Properties | (string & {})\ntype MaybeArray<T> = T | T[]\ntype MaybeThemeFunction<T> = T | ((theme: CssTheme) => T)\ntype StringUnion<T> = T | (string & {})\n\nexport interface PropConfig {\n  /**\n   * This is useful for props that need to leverage CSS variables\n   * Static styles to append to the computed styles.\n   *\n   * It does not get replicated if value is responsive or styles are nested.\n   */\n  static?: Dict\n  /**\n   * The theme scale this maps to\n   */\n  scale?: ThemeScale\n  /**\n   * Css property or Css variable the prop maps to\n   */\n  property?: MaybeThemeFunction<MaybeArray<StringUnion<CSSProp>>>\n  /**\n   * Function to transform the value passed\n   */\n  transform?: Transform\n  /**\n   * Useful for `layerStyle`, tex`tStyles and `apply` where their\n   * transform function returns theme aware styles\n   */\n  processResult?: boolean\n}\n\nexport type Config = Record<string, PropConfig | true>\n\nexport function toConfig(scale: ThemeScale, transform?: Transform) {\n  return <T extends CSSProp>(property: T | T[]) => {\n    const result: PropConfig = { property, scale }\n    result.transform = createTransform({\n      scale,\n      transform,\n    })\n    return result\n  }\n}\n\ninterface Opts {\n  scale?: ThemeScale\n  property: { ltr: MaybeArray<CSSProp>; rtl: MaybeArray<CSSProp> }\n  transform?: Transform\n}\n\nconst getRtl = ({ rtl, ltr }: Opts[\"property\"]) => (theme: Dict) =>\n  theme.direction === \"rtl\" ? rtl : ltr\n\nexport function logical(options: Opts): PropConfig {\n  const { property, scale, transform } = options\n  return {\n    scale,\n    property: getRtl(property),\n    transform: scale\n      ? createTransform({\n          scale,\n          compose: transform,\n        })\n      : transform,\n  }\n}\n"],"mappings":"AAEA,SAASA,eAAT,QAAgC,oBAAhC;AAsCA,OAAO,SAASC,QAATA,CAAkBC,KAAlB,EAAqCC,SAArC,EAA4D;EACjE,OAA2BC,QAApB,IAA0C;IAC/C,IAAMC,MAAkB,GAAG;MAAED,QAAF;MAAYF;IAAZ,CAA3B;IACAG,MAAM,CAACF,SAAP,GAAmBH,eAAe,CAAC;MACjCE,KADiC;MAEjCC;IAFiC,CAAD,CAAlC;IAIA,OAAOE,MAAP;EACD,CAPD;AAQD;AAQD,IAAMC,MAAM,GAAGC,IAAA;EAAA,IAAC;IAAEC,GAAF;IAAOC;EAAP,CAAD,GAAAF,IAAA;EAAA,OAAqCG,KAAD,IACjDA,KAAK,CAACC,SAAN,KAAoB,KAApB,GAA4BH,GAA5B,GAAkCC,GADrB;AAAA,CAAf;AAGA,OAAO,SAASG,OAATA,CAAiBC,OAAjB,EAA4C;EACjD,IAAM;IAAET,QAAF;IAAYF,KAAZ;IAAmBC;EAAnB,IAAiCU,OAAvC;EACA,OAAO;IACLX,KADK;IAELE,QAAQ,EAAEE,MAAM,CAACF,QAAD,CAFX;IAGLD,SAAS,EAAED,KAAK,GACZF,eAAe,CAAC;MACdE,KADc;MAEdY,OAAO,EAAEX;IAFK,CAAD,CADH,GAKZA;EARC,CAAP;AAUD"},"metadata":{},"sourceType":"module"}