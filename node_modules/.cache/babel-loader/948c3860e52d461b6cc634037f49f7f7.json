{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { cx, omit, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { TabsDescendantsProvider, TabsProvider, useTab, useTabIndicator, useTabList, useTabPanel, useTabPanels, useTabs } from \"./use-tabs\";\n\n/**\r\n * Tabs\r\n *\r\n * Provides context and logic for all tabs components. It doesn't render\r\n * any DOM node.\r\n */\nexport var Tabs = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useMultiStyleConfig(\"Tabs\", props);\n  var _omitThemingProps = omitThemingProps(props),\n    {\n      children,\n      className\n    } = _omitThemingProps,\n    rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"children\", \"className\"]);\n  var _useTabs = useTabs(rest),\n    {\n      htmlProps,\n      descendants\n    } = _useTabs,\n    ctx = _objectWithoutPropertiesLoose(_useTabs, [\"htmlProps\", \"descendants\"]);\n  var context = React.useMemo(() => ctx, [ctx]);\n  var rootProps = omit(htmlProps, [\"isFitted\"]);\n  return /*#__PURE__*/React.createElement(TabsDescendantsProvider, {\n    value: descendants\n  }, /*#__PURE__*/React.createElement(TabsProvider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: cx(\"chakra-tabs\", className),\n    ref: ref\n  }, rootProps, {\n    __css: styles.root\n  }), children))));\n});\nif (__DEV__) {\n  Tabs.displayName = \"Tabs\";\n}\n\n/**\r\n * Tab button used to activate a specific tab panel. It renders a `button`,\r\n * and is responsible for automatic and manual selection modes.\r\n */\nexport var Tab = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useStyles();\n  var tabProps = useTab(_extends({}, props, {\n    ref\n  }));\n  var tabStyles = _extends({\n    outline: \"0\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }, styles.tab);\n  return /*#__PURE__*/React.createElement(chakra.button, _extends({}, tabProps, {\n    className: cx(\"chakra-tabs__tab\", props.className),\n    __css: tabStyles\n  }));\n});\nif (__DEV__) {\n  Tab.displayName = \"Tab\";\n}\n\n/**\r\n * TabList is used to manage a list of tab buttons. It renders a `div` by default,\r\n * and is responsible the keyboard interaction between tabs.\r\n */\nexport var TabList = /*#__PURE__*/forwardRef((props, ref) => {\n  var tablistProps = useTabList(_extends({}, props, {\n    ref\n  }));\n  var styles = useStyles();\n  var tablistStyles = _extends({\n    display: \"flex\"\n  }, styles.tablist);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, tablistProps, {\n    className: cx(\"chakra-tabs__tablist\", props.className),\n    __css: tablistStyles\n  }));\n});\nif (__DEV__) {\n  TabList.displayName = \"TabList\";\n}\n\n/**\r\n * TabPanel\r\n * Used to render the content for a specific tab.\r\n */\nexport var TabPanel = /*#__PURE__*/forwardRef((props, ref) => {\n  var panelProps = useTabPanel(_extends({}, props, {\n    ref\n  }));\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    outline: \"0\"\n  }, panelProps, {\n    className: cx(\"chakra-tabs__tab-panel\", props.className),\n    __css: styles.tabpanel\n  }));\n});\nif (__DEV__) {\n  TabPanel.displayName = \"TabPanel\";\n}\n\n/**\r\n * TabPanel\r\n *\r\n * Used to manage the rendering of multiple tab panels. It uses\r\n * `cloneElement` to hide/show tab panels.\r\n *\r\n * It renders a `div` by default.\r\n */\nexport var TabPanels = /*#__PURE__*/forwardRef((props, ref) => {\n  var panelsProps = useTabPanels(props);\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, panelsProps, {\n    width: \"100%\",\n    ref: ref,\n    className: cx(\"chakra-tabs__tab-panels\", props.className),\n    __css: styles.tabpanels\n  }));\n});\nif (__DEV__) {\n  TabPanels.displayName = \"TabPanels\";\n}\n\n/**\r\n * TabIndicator\r\n *\r\n * Used to render an active tab indicator that animates between\r\n * selected tabs.\r\n */\nexport var TabIndicator = /*#__PURE__*/forwardRef((props, ref) => {\n  var indicatorStyle = useTabIndicator();\n  var style = _extends({}, props.style, indicatorStyle);\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref\n  }, props, {\n    className: cx(\"chakra-tabs__tab-indicator\", props.className),\n    style: style,\n    __css: styles.indicator\n  }));\n});\nif (__DEV__) {\n  TabIndicator.displayName = \"TabIndicator\";\n}","map":{"version":3,"names":["chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","cx","omit","__DEV__","React","TabsDescendantsProvider","TabsProvider","useTab","useTabIndicator","useTabList","useTabPanel","useTabPanels","useTabs","Tabs","props","ref","styles","_omitThemingProps","children","className","rest","_objectWithoutPropertiesLoose","_useTabs","htmlProps","descendants","ctx","context","useMemo","rootProps","createElement","value","div","_extends","__css","root","displayName","Tab","tabProps","tabStyles","outline","display","alignItems","justifyContent","tab","button","TabList","tablistProps","tablistStyles","tablist","TabPanel","panelProps","tabpanel","TabPanels","panelsProps","width","tabpanels","TabIndicator","indicatorStyle","style","indicator"],"sources":["../../src/tabs.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, omit, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  TabsDescendantsProvider,\n  TabsProvider,\n  useTab,\n  useTabIndicator,\n  useTabList,\n  UseTabListProps,\n  UseTabOptions,\n  useTabPanel,\n  useTabPanels,\n  useTabs,\n  UseTabsProps,\n} from \"./use-tabs\"\n\ninterface TabsOptions {\n  /**\n   * If `true`, tabs will stretch to width of the tablist.\n   */\n  isFitted?: boolean\n  /**\n   * The alignment of the tabs\n   */\n  align?: \"start\" | \"end\" | \"center\"\n}\n\nexport interface TabsProps\n  extends UseTabsProps,\n    ThemingProps<\"Tabs\">,\n    Omit<HTMLChakraProps<\"div\">, \"onChange\">,\n    TabsOptions {\n  children: React.ReactNode\n}\n\n/**\n * Tabs\n *\n * Provides context and logic for all tabs components. It doesn't render\n * any DOM node.\n */\nexport const Tabs = forwardRef<TabsProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Tabs\", props)\n  const { children, className, ...rest } = omitThemingProps(props)\n\n  const { htmlProps, descendants, ...ctx } = useTabs(rest)\n  const context = React.useMemo(() => ctx, [ctx])\n\n  const rootProps = omit(htmlProps as any, [\"isFitted\"])\n\n  return (\n    <TabsDescendantsProvider value={descendants}>\n      <TabsProvider value={context}>\n        <StylesProvider value={styles}>\n          <chakra.div\n            className={cx(\"chakra-tabs\", className)}\n            ref={ref}\n            {...rootProps}\n            __css={styles.root}\n          >\n            {children}\n          </chakra.div>\n        </StylesProvider>\n      </TabsProvider>\n    </TabsDescendantsProvider>\n  )\n})\n\nif (__DEV__) {\n  Tabs.displayName = \"Tabs\"\n}\n\nexport interface TabProps extends UseTabOptions, HTMLChakraProps<\"button\"> {}\n\n/**\n * Tab button used to activate a specific tab panel. It renders a `button`,\n * and is responsible for automatic and manual selection modes.\n */\nexport const Tab = forwardRef<TabProps, \"button\">((props, ref) => {\n  const styles = useStyles()\n  const tabProps = useTab({ ...props, ref })\n\n  const tabStyles: SystemStyleObject = {\n    outline: \"0\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    ...styles.tab,\n  }\n\n  return (\n    <chakra.button\n      {...tabProps}\n      className={cx(\"chakra-tabs__tab\", props.className)}\n      __css={tabStyles}\n    />\n  )\n})\n\nif (__DEV__) {\n  Tab.displayName = \"Tab\"\n}\n\nexport interface TabListProps\n  extends UseTabListProps,\n    Omit<HTMLChakraProps<\"div\">, \"onKeyDown\" | \"ref\"> {}\n\n/**\n * TabList is used to manage a list of tab buttons. It renders a `div` by default,\n * and is responsible the keyboard interaction between tabs.\n */\nexport const TabList = forwardRef<TabListProps, \"div\">((props, ref) => {\n  const tablistProps = useTabList({ ...props, ref })\n\n  const styles = useStyles()\n\n  const tablistStyles: SystemStyleObject = {\n    display: \"flex\",\n    ...styles.tablist,\n  }\n\n  return (\n    <chakra.div\n      {...tablistProps}\n      className={cx(\"chakra-tabs__tablist\", props.className)}\n      __css={tablistStyles}\n    />\n  )\n})\n\nif (__DEV__) {\n  TabList.displayName = \"TabList\"\n}\n\nexport interface TabPanelProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * TabPanel\n * Used to render the content for a specific tab.\n */\nexport const TabPanel = forwardRef<TabPanelProps, \"div\">((props, ref) => {\n  const panelProps = useTabPanel({ ...props, ref })\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      outline=\"0\"\n      {...panelProps}\n      className={cx(\"chakra-tabs__tab-panel\", props.className)}\n      __css={styles.tabpanel}\n    />\n  )\n})\n\nif (__DEV__) {\n  TabPanel.displayName = \"TabPanel\"\n}\n\nexport interface TabPanelsProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * TabPanel\n *\n * Used to manage the rendering of multiple tab panels. It uses\n * `cloneElement` to hide/show tab panels.\n *\n * It renders a `div` by default.\n */\nexport const TabPanels = forwardRef<TabPanelsProps, \"div\">((props, ref) => {\n  const panelsProps = useTabPanels(props)\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      {...panelsProps}\n      width=\"100%\"\n      ref={ref}\n      className={cx(\"chakra-tabs__tab-panels\", props.className)}\n      __css={styles.tabpanels}\n    />\n  )\n})\n\nif (__DEV__) {\n  TabPanels.displayName = \"TabPanels\"\n}\n\nexport interface TabIndicatorProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * TabIndicator\n *\n * Used to render an active tab indicator that animates between\n * selected tabs.\n */\nexport const TabIndicator = forwardRef<TabIndicatorProps, \"div\">(\n  (props, ref) => {\n    const indicatorStyle = useTabIndicator()\n    const style = {\n      ...props.style,\n      ...indicatorStyle,\n    }\n\n    const styles = useStyles()\n\n    return (\n      <chakra.div\n        ref={ref}\n        {...props}\n        className={cx(\"chakra-tabs__tab-indicator\", props.className)}\n        style={style}\n        __css={styles.indicator}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  TabIndicator.displayName = \"TabIndicator\"\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}