{"ast":null,"code":"'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar cookies = require('./../helpers/cookies');\nvar buildURL = require('./../helpers/buildURL');\nvar buildFullPath = require('../core/buildFullPath');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar createError = require('../core/createError');\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    // Listen for ready state\n    request.onreadystatechange = function handleLoad() {\n      if (!request || request.readyState !== 4) {\n        return;\n      }\n\n      // The request errored out and we didn't get a response, this will be\n      // handled by onerror instead\n      // With one exception: request that using file: protocol, most browsers\n      // will return status as 0 even though it's a successful request\n      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n        return;\n      }\n\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n      settle(resolve, reject, response);\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n        if (config.responseType !== 'json') {\n          throw e;\n        }\n      }\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n        request.abort();\n        reject(cancel);\n        // Clean up request\n        request = null;\n      });\n    }\n    if (!requestData) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};","map":{"version":3,"names":["utils","require","settle","cookies","buildURL","buildFullPath","parseHeaders","isURLSameOrigin","createError","module","exports","xhrAdapter","config","Promise","dispatchXhrRequest","resolve","reject","requestData","data","requestHeaders","headers","isFormData","request","XMLHttpRequest","auth","username","password","unescape","encodeURIComponent","Authorization","btoa","fullPath","baseURL","url","open","method","toUpperCase","params","paramsSerializer","timeout","onreadystatechange","handleLoad","readyState","status","responseURL","indexOf","responseHeaders","getAllResponseHeaders","responseData","responseType","responseText","response","statusText","onabort","handleAbort","onerror","handleError","ontimeout","handleTimeout","timeoutErrorMessage","isStandardBrowserEnv","xsrfValue","withCredentials","xsrfCookieName","read","undefined","xsrfHeaderName","forEach","setRequestHeader","val","key","toLowerCase","isUndefined","e","onDownloadProgress","addEventListener","onUploadProgress","upload","cancelToken","promise","then","onCanceled","cancel","abort","send"],"sources":["E:/Hasan sir project/frontend/node_modules/axios/lib/adapters/xhr.js"],"sourcesContent":["'use strict';\r\n\r\nvar utils = require('./../utils');\r\nvar settle = require('./../core/settle');\r\nvar cookies = require('./../helpers/cookies');\r\nvar buildURL = require('./../helpers/buildURL');\r\nvar buildFullPath = require('../core/buildFullPath');\r\nvar parseHeaders = require('./../helpers/parseHeaders');\r\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\r\nvar createError = require('../core/createError');\r\n\r\nmodule.exports = function xhrAdapter(config) {\r\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\r\n    var requestData = config.data;\r\n    var requestHeaders = config.headers;\r\n\r\n    if (utils.isFormData(requestData)) {\r\n      delete requestHeaders['Content-Type']; // Let the browser set it\r\n    }\r\n\r\n    var request = new XMLHttpRequest();\r\n\r\n    // HTTP basic authentication\r\n    if (config.auth) {\r\n      var username = config.auth.username || '';\r\n      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\r\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\r\n    }\r\n\r\n    var fullPath = buildFullPath(config.baseURL, config.url);\r\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\r\n\r\n    // Set the request timeout in MS\r\n    request.timeout = config.timeout;\r\n\r\n    // Listen for ready state\r\n    request.onreadystatechange = function handleLoad() {\r\n      if (!request || request.readyState !== 4) {\r\n        return;\r\n      }\r\n\r\n      // The request errored out and we didn't get a response, this will be\r\n      // handled by onerror instead\r\n      // With one exception: request that using file: protocol, most browsers\r\n      // will return status as 0 even though it's a successful request\r\n      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\r\n        return;\r\n      }\r\n\r\n      // Prepare the response\r\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\r\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\r\n      var response = {\r\n        data: responseData,\r\n        status: request.status,\r\n        statusText: request.statusText,\r\n        headers: responseHeaders,\r\n        config: config,\r\n        request: request\r\n      };\r\n\r\n      settle(resolve, reject, response);\r\n\r\n      // Clean up request\r\n      request = null;\r\n    };\r\n\r\n    // Handle browser request cancellation (as opposed to a manual cancellation)\r\n    request.onabort = function handleAbort() {\r\n      if (!request) {\r\n        return;\r\n      }\r\n\r\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\r\n\r\n      // Clean up request\r\n      request = null;\r\n    };\r\n\r\n    // Handle low level network errors\r\n    request.onerror = function handleError() {\r\n      // Real errors are hidden from us by the browser\r\n      // onerror should only fire if it's a network error\r\n      reject(createError('Network Error', config, null, request));\r\n\r\n      // Clean up request\r\n      request = null;\r\n    };\r\n\r\n    // Handle timeout\r\n    request.ontimeout = function handleTimeout() {\r\n      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';\r\n      if (config.timeoutErrorMessage) {\r\n        timeoutErrorMessage = config.timeoutErrorMessage;\r\n      }\r\n      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',\r\n        request));\r\n\r\n      // Clean up request\r\n      request = null;\r\n    };\r\n\r\n    // Add xsrf header\r\n    // This is only done if running in a standard browser environment.\r\n    // Specifically not if we're in a web worker, or react-native.\r\n    if (utils.isStandardBrowserEnv()) {\r\n      // Add xsrf header\r\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\r\n        cookies.read(config.xsrfCookieName) :\r\n        undefined;\r\n\r\n      if (xsrfValue) {\r\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\r\n      }\r\n    }\r\n\r\n    // Add headers to the request\r\n    if ('setRequestHeader' in request) {\r\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\r\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\r\n          // Remove Content-Type if data is undefined\r\n          delete requestHeaders[key];\r\n        } else {\r\n          // Otherwise add header to the request\r\n          request.setRequestHeader(key, val);\r\n        }\r\n      });\r\n    }\r\n\r\n    // Add withCredentials to request if needed\r\n    if (!utils.isUndefined(config.withCredentials)) {\r\n      request.withCredentials = !!config.withCredentials;\r\n    }\r\n\r\n    // Add responseType to request if needed\r\n    if (config.responseType) {\r\n      try {\r\n        request.responseType = config.responseType;\r\n      } catch (e) {\r\n        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\r\n        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\r\n        if (config.responseType !== 'json') {\r\n          throw e;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Handle progress if needed\r\n    if (typeof config.onDownloadProgress === 'function') {\r\n      request.addEventListener('progress', config.onDownloadProgress);\r\n    }\r\n\r\n    // Not all browsers support upload events\r\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\r\n      request.upload.addEventListener('progress', config.onUploadProgress);\r\n    }\r\n\r\n    if (config.cancelToken) {\r\n      // Handle cancellation\r\n      config.cancelToken.promise.then(function onCanceled(cancel) {\r\n        if (!request) {\r\n          return;\r\n        }\r\n\r\n        request.abort();\r\n        reject(cancel);\r\n        // Clean up request\r\n        request = null;\r\n      });\r\n    }\r\n\r\n    if (!requestData) {\r\n      requestData = null;\r\n    }\r\n\r\n    // Send the request\r\n    request.send(requestData);\r\n  });\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}