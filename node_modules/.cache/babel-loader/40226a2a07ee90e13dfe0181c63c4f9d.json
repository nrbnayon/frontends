{"ast":null,"code":"/**\r\n * Thank you @markdalgleish for this piece of art!\r\n */\nimport { isObject } from \"@chakra-ui/utils\";\nfunction resolveReference(operand) {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference;\n  }\n  return String(operand);\n}\nvar toExpression = function toExpression(operator) {\n  for (var _len = arguments.length, operands = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    operands[_key - 1] = arguments[_key];\n  }\n  return operands.map(resolveReference).join(\" \" + operator + \" \").replace(/calc/g, \"\");\n};\nvar _add = function add() {\n  for (var _len2 = arguments.length, operands = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    operands[_key2] = arguments[_key2];\n  }\n  return \"calc(\" + toExpression(\"+\", ...operands) + \")\";\n};\nvar _subtract = function subtract() {\n  for (var _len3 = arguments.length, operands = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    operands[_key3] = arguments[_key3];\n  }\n  return \"calc(\" + toExpression(\"-\", ...operands) + \")\";\n};\nvar _multiply = function multiply() {\n  for (var _len4 = arguments.length, operands = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    operands[_key4] = arguments[_key4];\n  }\n  return \"calc(\" + toExpression(\"*\", ...operands) + \")\";\n};\nvar _divide = function divide() {\n  for (var _len5 = arguments.length, operands = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    operands[_key5] = arguments[_key5];\n  }\n  return \"calc(\" + toExpression(\"/\", ...operands) + \")\";\n};\nvar _negate = x => {\n  var value = resolveReference(x);\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : \"-\" + value;\n  }\n  return _multiply(value, -1);\n};\nexport var calc = Object.assign(x => ({\n  add: function add() {\n    for (var _len6 = arguments.length, operands = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      operands[_key6] = arguments[_key6];\n    }\n    return calc(_add(x, ...operands));\n  },\n  subtract: function subtract() {\n    for (var _len7 = arguments.length, operands = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      operands[_key7] = arguments[_key7];\n    }\n    return calc(_subtract(x, ...operands));\n  },\n  multiply: function multiply() {\n    for (var _len8 = arguments.length, operands = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      operands[_key8] = arguments[_key8];\n    }\n    return calc(_multiply(x, ...operands));\n  },\n  divide: function divide() {\n    for (var _len9 = arguments.length, operands = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      operands[_key9] = arguments[_key9];\n    }\n    return calc(_divide(x, ...operands));\n  },\n  negate: () => calc(_negate(x)),\n  toString: () => x.toString()\n}), {\n  add: _add,\n  subtract: _subtract,\n  multiply: _multiply,\n  divide: _divide,\n  negate: _negate\n});","map":{"version":3,"names":["isObject","resolveReference","operand","reference","String","toExpression","operator","_len","arguments","length","operands","Array","_key","map","join","replace","_add","add","_len2","_key2","_subtract","subtract","_len3","_key3","_multiply","multiply","_len4","_key4","_divide","divide","_len5","_key5","_negate","x","value","Number","isNaN","parseFloat","startsWith","slice","calc","Object","assign","_len6","_key6","_len7","_key7","_len8","_key8","_len9","_key9","negate","toString"],"sources":["../../../src/create-theme-vars/calc.ts"],"sourcesContent":["/**\n * Thank you @markdalgleish for this piece of art!\n */\nimport { isObject } from \"@chakra-ui/utils\"\n\nexport type Operand = string | number | { reference: string }\ntype Operator = \"+\" | \"-\" | \"*\" | \"/\"\n\nfunction resolveReference(operand: Operand): string {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference\n  }\n  return String(operand)\n}\n\nconst toExpression = (operator: Operator, ...operands: Array<Operand>) =>\n  operands.map(resolveReference).join(` ${operator} `).replace(/calc/g, \"\")\n\nconst add = (...operands: Array<Operand>) =>\n  `calc(${toExpression(\"+\", ...operands)})`\n\nconst subtract = (...operands: Array<Operand>) =>\n  `calc(${toExpression(\"-\", ...operands)})`\n\nconst multiply = (...operands: Array<Operand>) =>\n  `calc(${toExpression(\"*\", ...operands)})`\n\nconst divide = (...operands: Array<Operand>) =>\n  `calc(${toExpression(\"/\", ...operands)})`\n\nconst negate = (x: Operand) => {\n  const value = resolveReference(x)\n\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : `-${value}`\n  }\n\n  return multiply(value, -1)\n}\n\ninterface CalcChain {\n  add: (...operands: Array<Operand>) => CalcChain\n  subtract: (...operands: Array<Operand>) => CalcChain\n  multiply: (...operands: Array<Operand>) => CalcChain\n  divide: (...operands: Array<Operand>) => CalcChain\n  negate: () => CalcChain\n  toString: () => string\n}\n\nexport const calc = Object.assign(\n  (x: Operand): CalcChain => ({\n    add: (...operands) => calc(add(x, ...operands)),\n    subtract: (...operands) => calc(subtract(x, ...operands)),\n    multiply: (...operands) => calc(multiply(x, ...operands)),\n    divide: (...operands) => calc(divide(x, ...operands)),\n    negate: () => calc(negate(x)),\n    toString: () => x.toString(),\n  }),\n  {\n    add,\n    subtract,\n    multiply,\n    divide,\n    negate,\n  },\n)\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}