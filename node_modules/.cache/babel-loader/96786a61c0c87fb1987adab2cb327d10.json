{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"E:/Hasan sir project/ChattersTwo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"E:/Hasan sir project/ChattersTwo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"E:/Hasan sir project/ChattersTwo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"E:/Hasan sir project/ChattersTwo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"E:/Hasan sir project/ChattersTwo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"E:/Hasan sir project/ChattersTwo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StrictEventEmitter = void 0;\n\nvar Emitter = require(\"component-emitter\");\n/**\r\n * Strictly typed version of an `EventEmitter`. A `TypedEventEmitter` takes type\r\n * parameters for mappings of event names to event data types, and strictly\r\n * types method calls to the `EventEmitter` according to these event maps.\r\n *\r\n * @typeParam ListenEvents - `EventsMap` of user-defined events that can be\r\n * listened to with `on` or `once`\r\n * @typeParam EmitEvents - `EventsMap` of user-defined events that can be\r\n * emitted with `emit`\r\n * @typeParam ReservedEvents - `EventsMap` of reserved events, that can be\r\n * emitted by socket.io with `emitReserved`, and can be listened to with\r\n * `listen`.\r\n */\n\n\nvar StrictEventEmitter = /*#__PURE__*/function (_Emitter) {\n  _inherits(StrictEventEmitter, _Emitter);\n\n  var _super = _createSuper(StrictEventEmitter);\n\n  function StrictEventEmitter() {\n    _classCallCheck(this, StrictEventEmitter);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(StrictEventEmitter, [{\n    key: \"on\",\n    value:\n    /**\r\n     * Adds the `listener` function as an event listener for `ev`.\r\n     *\r\n     * @param ev Name of the event\r\n     * @param listener Callback function\r\n     */\n    function on(ev, listener) {\n      _get(_getPrototypeOf(StrictEventEmitter.prototype), \"on\", this).call(this, ev, listener);\n\n      return this;\n    }\n    /**\r\n     * Adds a one-time `listener` function as an event listener for `ev`.\r\n     *\r\n     * @param ev Name of the event\r\n     * @param listener Callback function\r\n     */\n\n  }, {\n    key: \"once\",\n    value: function once(ev, listener) {\n      _get(_getPrototypeOf(StrictEventEmitter.prototype), \"once\", this).call(this, ev, listener);\n\n      return this;\n    }\n    /**\r\n     * Emits an event.\r\n     *\r\n     * @param ev Name of the event\r\n     * @param args Values to send to listeners of this event\r\n     */\n\n  }, {\n    key: \"emit\",\n    value: function emit(ev) {\n      var _get2;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      (_get2 = _get(_getPrototypeOf(StrictEventEmitter.prototype), \"emit\", this)).call.apply(_get2, [this, ev].concat(args));\n\n      return this;\n    }\n    /**\r\n     * Emits a reserved event.\r\n     *\r\n     * This method is `protected`, so that only a class extending\r\n     * `StrictEventEmitter` can emit its own reserved events.\r\n     *\r\n     * @param ev Reserved event name\r\n     * @param args Arguments to emit along with the event\r\n     */\n\n  }, {\n    key: \"emitReserved\",\n    value: function emitReserved(ev) {\n      var _get3;\n\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      (_get3 = _get(_getPrototypeOf(StrictEventEmitter.prototype), \"emit\", this)).call.apply(_get3, [this, ev].concat(args));\n\n      return this;\n    }\n    /**\r\n     * Returns the listeners listening to an event.\r\n     *\r\n     * @param event Event name\r\n     * @returns Array of listeners subscribed to `event`\r\n     */\n\n  }, {\n    key: \"listeners\",\n    value: function listeners(event) {\n      return _get(_getPrototypeOf(StrictEventEmitter.prototype), \"listeners\", this).call(this, event);\n    }\n  }]);\n\n  return StrictEventEmitter;\n}(Emitter);\n\nexports.StrictEventEmitter = StrictEventEmitter;","map":{"version":3,"sources":["E:/Hasan sir project/ChattersTwo/frontend/node_modules/socket.io-client/build/typed-events.js"],"names":["Object","defineProperty","exports","value","StrictEventEmitter","Emitter","require","ev","listener","args","event"],"mappings":"AAAA;;;;;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,kBAAR,GAA6B,KAAK,CAAlC;;AACA,IAAMC,OAAO,GAAGC,OAAO,CAAC,mBAAD,CAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACMF,kB;;;;;;;;;;;;;;AACF;AACJ;AACA;AACA;AACA;AACA;AACI,gBAAGG,EAAH,EAAOC,QAAP,EAAiB;AACb,iFAASD,EAAT,EAAaC,QAAb;;AACA,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,cAAKD,EAAL,EAASC,QAAT,EAAmB;AACf,mFAAWD,EAAX,EAAeC,QAAf;;AACA,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,cAAKD,EAAL,EAAkB;AAAA;;AAAA,wCAANE,IAAM;AAANA,QAAAA,IAAM;AAAA;;AACd,2GAAWF,EAAX,SAAkBE,IAAlB;;AACA,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,sBAAaF,EAAb,EAA0B;AAAA;;AAAA,yCAANE,IAAM;AAANA,QAAAA,IAAM;AAAA;;AACtB,2GAAWF,EAAX,SAAkBE,IAAlB;;AACA,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,mBAAUC,KAAV,EAAiB;AACb,+FAAuBA,KAAvB;AACH;;;;EApD4BL,O;;AAsDjCH,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StrictEventEmitter = void 0;\r\nconst Emitter = require(\"component-emitter\");\r\n/**\r\n * Strictly typed version of an `EventEmitter`. A `TypedEventEmitter` takes type\r\n * parameters for mappings of event names to event data types, and strictly\r\n * types method calls to the `EventEmitter` according to these event maps.\r\n *\r\n * @typeParam ListenEvents - `EventsMap` of user-defined events that can be\r\n * listened to with `on` or `once`\r\n * @typeParam EmitEvents - `EventsMap` of user-defined events that can be\r\n * emitted with `emit`\r\n * @typeParam ReservedEvents - `EventsMap` of reserved events, that can be\r\n * emitted by socket.io with `emitReserved`, and can be listened to with\r\n * `listen`.\r\n */\r\nclass StrictEventEmitter extends Emitter {\r\n    /**\r\n     * Adds the `listener` function as an event listener for `ev`.\r\n     *\r\n     * @param ev Name of the event\r\n     * @param listener Callback function\r\n     */\r\n    on(ev, listener) {\r\n        super.on(ev, listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a one-time `listener` function as an event listener for `ev`.\r\n     *\r\n     * @param ev Name of the event\r\n     * @param listener Callback function\r\n     */\r\n    once(ev, listener) {\r\n        super.once(ev, listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Emits an event.\r\n     *\r\n     * @param ev Name of the event\r\n     * @param args Values to send to listeners of this event\r\n     */\r\n    emit(ev, ...args) {\r\n        super.emit(ev, ...args);\r\n        return this;\r\n    }\r\n    /**\r\n     * Emits a reserved event.\r\n     *\r\n     * This method is `protected`, so that only a class extending\r\n     * `StrictEventEmitter` can emit its own reserved events.\r\n     *\r\n     * @param ev Reserved event name\r\n     * @param args Arguments to emit along with the event\r\n     */\r\n    emitReserved(ev, ...args) {\r\n        super.emit(ev, ...args);\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns the listeners listening to an event.\r\n     *\r\n     * @param event Event name\r\n     * @returns Array of listeners subscribed to `event`\r\n     */\r\n    listeners(event) {\r\n        return super.listeners(event);\r\n    }\r\n}\r\nexports.StrictEventEmitter = StrictEventEmitter;\r\n"]},"metadata":{},"sourceType":"script"}