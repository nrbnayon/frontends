{"ast":null,"code":"import { useInterval, useUnmountEffect } from \"@chakra-ui/hooks\";\nimport { useCallback, useRef, useState } from \"react\";\n/**\r\n * When click and hold on a button - the speed of auto changing the value.\r\n */\n\nvar CONTINUOUS_CHANGE_INTERVAL = 50;\n/**\r\n * When click and hold on a button - the delay before auto changing the value.\r\n */\n\nvar CONTINUOUS_CHANGE_DELAY = 300;\n\n/**\r\n * React hook used in the number input to spin its\r\n * value on long press of the spin buttons\r\n *\r\n * @param increment the function to increment\r\n * @param decrement the function to decrement\r\n */\nexport function useSpinner(increment, decrement) {\n  /**\r\n   * To keep incrementing/decrementing on press, we call that `spinning`\r\n   */\n  var [isSpinning, setIsSpinning] = useState(false); // This state keeps track of the action (\"increment\" or \"decrement\")\n\n  var [action, setAction] = useState(null); // To increment the value the first time you mousedown, we call that `runOnce`\n\n  var [runOnce, setRunOnce] = useState(true); // Store the timeout instance id in a ref, so we can clear the timeout later\n\n  var timeoutRef = useRef(null); // Clears the timeout from memory\n\n  var removeTimeout = () => clearTimeout(timeoutRef.current);\n  /**\r\n   * useInterval hook provides a performant way to\r\n   * update the state value at specific interval\r\n   */\n\n  useInterval(() => {\n    if (action === \"increment\") {\n      increment();\n    }\n    if (action === \"decrement\") {\n      decrement();\n    }\n  }, isSpinning ? CONTINUOUS_CHANGE_INTERVAL : null); // Function to activate the spinning and increment the value\n\n  var up = useCallback(() => {\n    // increment the first fime\n    if (runOnce) {\n      increment();\n    } // after a delay, keep incrementing at interval (\"spinning up\")\n\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false);\n      setIsSpinning(true);\n      setAction(\"increment\");\n    }, CONTINUOUS_CHANGE_DELAY);\n  }, [increment, runOnce]); // Function to activate the spinning and increment the value\n\n  var down = useCallback(() => {\n    // decrement the first fime\n    if (runOnce) {\n      decrement();\n    } // after a delay, keep decrementing at interval (\"spinning down\")\n\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false);\n      setIsSpinning(true);\n      setAction(\"decrement\");\n    }, CONTINUOUS_CHANGE_DELAY);\n  }, [decrement, runOnce]); // Function to stop spinng (useful for mouseup, keyup handlers)\n\n  var stop = useCallback(() => {\n    setRunOnce(true);\n    setIsSpinning(false);\n    removeTimeout();\n  }, []);\n  /**\r\n   * If the component unmounts while spinning,\r\n   * let's clear the timeout as well\r\n   */\n\n  useUnmountEffect(removeTimeout);\n  return {\n    up,\n    down,\n    stop\n  };\n}","map":{"version":3,"names":["useInterval","useUnmountEffect","useCallback","useRef","useState","CONTINUOUS_CHANGE_INTERVAL","CONTINUOUS_CHANGE_DELAY","useSpinner","increment","decrement","isSpinning","setIsSpinning","action","setAction","runOnce","setRunOnce","timeoutRef","removeTimeout","clearTimeout","current","up","setTimeout","down","stop"],"sources":["../../src/use-spinner.ts"],"sourcesContent":["import { useInterval, useUnmountEffect } from \"@chakra-ui/hooks\"\nimport { useCallback, useRef, useState } from \"react\"\n\n/**\n * When click and hold on a button - the speed of auto changing the value.\n */\nconst CONTINUOUS_CHANGE_INTERVAL = 50\n\n/**\n * When click and hold on a button - the delay before auto changing the value.\n */\nconst CONTINUOUS_CHANGE_DELAY = 300\n\ntype Action = \"increment\" | \"decrement\"\n\n/**\n * React hook used in the number input to spin its\n * value on long press of the spin buttons\n *\n * @param increment the function to increment\n * @param decrement the function to decrement\n */\nexport function useSpinner(increment: Function, decrement: Function) {\n  /**\n   * To keep incrementing/decrementing on press, we call that `spinning`\n   */\n  const [isSpinning, setIsSpinning] = useState(false)\n\n  // This state keeps track of the action (\"increment\" or \"decrement\")\n  const [action, setAction] = useState<Action | null>(null)\n\n  // To increment the value the first time you mousedown, we call that `runOnce`\n  const [runOnce, setRunOnce] = useState(true)\n\n  // Store the timeout instance id in a ref, so we can clear the timeout later\n  const timeoutRef = useRef<any>(null)\n\n  // Clears the timeout from memory\n  const removeTimeout = () => clearTimeout(timeoutRef.current)\n\n  /**\n   * useInterval hook provides a performant way to\n   * update the state value at specific interval\n   */\n  useInterval(\n    () => {\n      if (action === \"increment\") {\n        increment()\n      }\n      if (action === \"decrement\") {\n        decrement()\n      }\n    },\n    isSpinning ? CONTINUOUS_CHANGE_INTERVAL : null,\n  )\n\n  // Function to activate the spinning and increment the value\n  const up = useCallback(() => {\n    // increment the first fime\n    if (runOnce) {\n      increment()\n    }\n\n    // after a delay, keep incrementing at interval (\"spinning up\")\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false)\n      setIsSpinning(true)\n      setAction(\"increment\")\n    }, CONTINUOUS_CHANGE_DELAY)\n  }, [increment, runOnce])\n\n  // Function to activate the spinning and increment the value\n  const down = useCallback(() => {\n    // decrement the first fime\n    if (runOnce) {\n      decrement()\n    }\n\n    // after a delay, keep decrementing at interval (\"spinning down\")\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false)\n      setIsSpinning(true)\n      setAction(\"decrement\")\n    }, CONTINUOUS_CHANGE_DELAY)\n  }, [decrement, runOnce])\n\n  // Function to stop spinng (useful for mouseup, keyup handlers)\n  const stop = useCallback(() => {\n    setRunOnce(true)\n    setIsSpinning(false)\n    removeTimeout()\n  }, [])\n\n  /**\n   * If the component unmounts while spinning,\n   * let's clear the timeout as well\n   */\n  useUnmountEffect(removeTimeout)\n\n  return { up, down, stop }\n}\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,SAASC,WAAT,EAAsBC,MAAtB,EAA8BC,QAA9B,QAA8C,OAA9C;AAEA;AACA;AACA;;AACA,IAAMC,0BAA0B,GAAG,EAAnC;AAEA;AACA;AACA;;AACA,IAAMC,uBAAuB,GAAG,GAAhC;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAATA,CAAoBC,SAApB,EAAyCC,SAAzC,EAA8D;EACnE;AACF;AACA;EACE,IAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,KAAD,CAA5C,CAJmE,CAMnE;;EACA,IAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAgB,IAAhB,CAApC,CAPmE,CASnE;;EACA,IAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,IAAD,CAAtC,CAVmE,CAYnE;;EACA,IAAMY,UAAU,GAAGb,MAAM,CAAM,IAAN,CAAzB,CAbmE,CAenE;;EACA,IAAMc,aAAa,GAAGA,CAAA,KAAMC,YAAY,CAACF,UAAU,CAACG,OAAZ,CAAxC;EAEA;AACF;AACA;AACA;;EACEnB,WAAW,CACT,MAAM;IACJ,IAAIY,MAAM,KAAK,WAAf,EAA4B;MAC1BJ,SAAS;IACV;IACD,IAAII,MAAM,KAAK,WAAf,EAA4B;MAC1BH,SAAS;IACV;EACF,CARQ,EASTC,UAAU,GAAGL,0BAAH,GAAgC,IATjC,CAAX,CAtBmE,CAkCnE;;EACA,IAAMe,EAAE,GAAGlB,WAAW,CAAC,MAAM;IAC3B;IACA,IAAIY,OAAJ,EAAa;MACXN,SAAS;IACV,CAJ0B,CAM3B;;IACAQ,UAAU,CAACG,OAAX,GAAqBE,UAAU,CAAC,MAAM;MACpCN,UAAU,CAAC,KAAD,CAAV;MACAJ,aAAa,CAAC,IAAD,CAAb;MACAE,SAAS,CAAC,WAAD,CAAT;IACD,CAJ8B,EAI5BP,uBAJ4B,CAA/B;EAKD,CAZqB,EAYnB,CAACE,SAAD,EAAYM,OAAZ,CAZmB,CAAtB,CAnCmE,CAiDnE;;EACA,IAAMQ,IAAI,GAAGpB,WAAW,CAAC,MAAM;IAC7B;IACA,IAAIY,OAAJ,EAAa;MACXL,SAAS;IACV,CAJ4B,CAM7B;;IACAO,UAAU,CAACG,OAAX,GAAqBE,UAAU,CAAC,MAAM;MACpCN,UAAU,CAAC,KAAD,CAAV;MACAJ,aAAa,CAAC,IAAD,CAAb;MACAE,SAAS,CAAC,WAAD,CAAT;IACD,CAJ8B,EAI5BP,uBAJ4B,CAA/B;EAKD,CAZuB,EAYrB,CAACG,SAAD,EAAYK,OAAZ,CAZqB,CAAxB,CAlDmE,CAgEnE;;EACA,IAAMS,IAAI,GAAGrB,WAAW,CAAC,MAAM;IAC7Ba,UAAU,CAAC,IAAD,CAAV;IACAJ,aAAa,CAAC,KAAD,CAAb;IACAM,aAAa;EACd,CAJuB,EAIrB,EAJqB,CAAxB;EAMA;AACF;AACA;AACA;;EACEhB,gBAAgB,CAACgB,aAAD,CAAhB;EAEA,OAAO;IAAEG,EAAF;IAAME,IAAN;IAAYC;EAAZ,CAAP;AACD"},"metadata":{},"sourceType":"module"}