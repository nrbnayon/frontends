{"ast":null,"code":"const {\n  PACKET_TYPES_REVERSE,\n  ERROR_PACKET\n} = require(\"./commons\");\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\nlet base64decoder;\nif (withNativeArrayBuffer) {\n  base64decoder = require(\"base64-arraybuffer\");\n}\nconst decodePacket = (encodedPacket, binaryType) => {\n  if (typeof encodedPacket !== \"string\") {\n    return {\n      type: \"message\",\n      data: mapBinary(encodedPacket, binaryType)\n    };\n  }\n  const type = encodedPacket.charAt(0);\n  if (type === \"b\") {\n    return {\n      type: \"message\",\n      data: decodeBase64Packet(encodedPacket.substring(1), binaryType)\n    };\n  }\n  const packetType = PACKET_TYPES_REVERSE[type];\n  if (!packetType) {\n    return ERROR_PACKET;\n  }\n  return encodedPacket.length > 1 ? {\n    type: PACKET_TYPES_REVERSE[type],\n    data: encodedPacket.substring(1)\n  } : {\n    type: PACKET_TYPES_REVERSE[type]\n  };\n};\nconst decodeBase64Packet = (data, binaryType) => {\n  if (base64decoder) {\n    const decoded = base64decoder.decode(data);\n    return mapBinary(decoded, binaryType);\n  } else {\n    return {\n      base64: true,\n      data\n    }; // fallback for old browsers\n  }\n};\nconst mapBinary = (data, binaryType) => {\n  switch (binaryType) {\n    case \"blob\":\n      return data instanceof ArrayBuffer ? new Blob([data]) : data;\n    case \"arraybuffer\":\n    default:\n      return data;\n    // assuming the data is already an ArrayBuffer\n  }\n};\nmodule.exports = decodePacket;","map":{"version":3,"names":["PACKET_TYPES_REVERSE","ERROR_PACKET","require","withNativeArrayBuffer","ArrayBuffer","base64decoder","decodePacket","encodedPacket","binaryType","type","data","mapBinary","charAt","decodeBase64Packet","substring","packetType","length","decoded","decode","base64","Blob","module","exports"],"sources":["E:/Hasan sir project/frontend/node_modules/engine.io-parser/lib/decodePacket.browser.js"],"sourcesContent":["const { PACKET_TYPES_REVERSE, ERROR_PACKET } = require(\"./commons\");\r\n\r\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\r\n\r\nlet base64decoder;\r\nif (withNativeArrayBuffer) {\r\n  base64decoder = require(\"base64-arraybuffer\");\r\n}\r\n\r\nconst decodePacket = (encodedPacket, binaryType) => {\r\n  if (typeof encodedPacket !== \"string\") {\r\n    return {\r\n      type: \"message\",\r\n      data: mapBinary(encodedPacket, binaryType)\r\n    };\r\n  }\r\n  const type = encodedPacket.charAt(0);\r\n  if (type === \"b\") {\r\n    return {\r\n      type: \"message\",\r\n      data: decodeBase64Packet(encodedPacket.substring(1), binaryType)\r\n    };\r\n  }\r\n  const packetType = PACKET_TYPES_REVERSE[type];\r\n  if (!packetType) {\r\n    return ERROR_PACKET;\r\n  }\r\n  return encodedPacket.length > 1\r\n    ? {\r\n        type: PACKET_TYPES_REVERSE[type],\r\n        data: encodedPacket.substring(1)\r\n      }\r\n    : {\r\n        type: PACKET_TYPES_REVERSE[type]\r\n      };\r\n};\r\n\r\nconst decodeBase64Packet = (data, binaryType) => {\r\n  if (base64decoder) {\r\n    const decoded = base64decoder.decode(data);\r\n    return mapBinary(decoded, binaryType);\r\n  } else {\r\n    return { base64: true, data }; // fallback for old browsers\r\n  }\r\n};\r\n\r\nconst mapBinary = (data, binaryType) => {\r\n  switch (binaryType) {\r\n    case \"blob\":\r\n      return data instanceof ArrayBuffer ? new Blob([data]) : data;\r\n    case \"arraybuffer\":\r\n    default:\r\n      return data; // assuming the data is already an ArrayBuffer\r\n  }\r\n};\r\n\r\nmodule.exports = decodePacket;\r\n"],"mappings":"AAAA,MAAM;EAAEA,oBAAoB;EAAEC;AAAa,CAAC,GAAGC,OAAO,CAAC,WAAW,CAAC;AAEnE,MAAMC,qBAAqB,GAAG,OAAOC,WAAW,KAAK,UAAU;AAE/D,IAAIC,aAAa;AACjB,IAAIF,qBAAqB,EAAE;EACzBE,aAAa,GAAGH,OAAO,CAAC,oBAAoB,CAAC;AAC/C;AAEA,MAAMI,YAAY,GAAGA,CAACC,aAAa,EAAEC,UAAU,KAAK;EAClD,IAAI,OAAOD,aAAa,KAAK,QAAQ,EAAE;IACrC,OAAO;MACLE,IAAI,EAAE,SAAS;MACfC,IAAI,EAAEC,SAAS,CAACJ,aAAa,EAAEC,UAAU;IAC3C,CAAC;EACH;EACA,MAAMC,IAAI,GAAGF,aAAa,CAACK,MAAM,CAAC,CAAC,CAAC;EACpC,IAAIH,IAAI,KAAK,GAAG,EAAE;IAChB,OAAO;MACLA,IAAI,EAAE,SAAS;MACfC,IAAI,EAAEG,kBAAkB,CAACN,aAAa,CAACO,SAAS,CAAC,CAAC,CAAC,EAAEN,UAAU;IACjE,CAAC;EACH;EACA,MAAMO,UAAU,GAAGf,oBAAoB,CAACS,IAAI,CAAC;EAC7C,IAAI,CAACM,UAAU,EAAE;IACf,OAAOd,YAAY;EACrB;EACA,OAAOM,aAAa,CAACS,MAAM,GAAG,CAAC,GAC3B;IACEP,IAAI,EAAET,oBAAoB,CAACS,IAAI,CAAC;IAChCC,IAAI,EAAEH,aAAa,CAACO,SAAS,CAAC,CAAC;EACjC,CAAC,GACD;IACEL,IAAI,EAAET,oBAAoB,CAACS,IAAI;EACjC,CAAC;AACP,CAAC;AAED,MAAMI,kBAAkB,GAAGA,CAACH,IAAI,EAAEF,UAAU,KAAK;EAC/C,IAAIH,aAAa,EAAE;IACjB,MAAMY,OAAO,GAAGZ,aAAa,CAACa,MAAM,CAACR,IAAI,CAAC;IAC1C,OAAOC,SAAS,CAACM,OAAO,EAAET,UAAU,CAAC;EACvC,CAAC,MAAM;IACL,OAAO;MAAEW,MAAM,EAAE,IAAI;MAAET;IAAK,CAAC,CAAC,CAAC;EACjC;AACF,CAAC;AAED,MAAMC,SAAS,GAAGA,CAACD,IAAI,EAAEF,UAAU,KAAK;EACtC,QAAQA,UAAU;IAChB,KAAK,MAAM;MACT,OAAOE,IAAI,YAAYN,WAAW,GAAG,IAAIgB,IAAI,CAAC,CAACV,IAAI,CAAC,CAAC,GAAGA,IAAI;IAC9D,KAAK,aAAa;IAClB;MACE,OAAOA,IAAI;IAAE;EACjB;AACF,CAAC;AAEDW,MAAM,CAACC,OAAO,GAAGhB,YAAY"},"metadata":{},"sourceType":"script"}