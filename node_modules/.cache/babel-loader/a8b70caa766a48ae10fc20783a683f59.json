{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { callAll, cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useCheckboxGroupContext } from \"./checkbox-group\";\nimport { CheckboxIcon } from \"./checkbox-icon\";\nimport { useCheckbox } from \"./use-checkbox\";\nvar CheckboxControl = chakra(\"span\", {\n  baseStyle: {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    verticalAlign: \"top\",\n    userSelect: \"none\",\n    flexShrink: 0\n  }\n});\nvar Label = chakra(\"label\", {\n  baseStyle: {\n    cursor: \"pointer\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    verticalAlign: \"top\",\n    position: \"relative\",\n    _disabled: {\n      cursor: \"not-allowed\"\n    }\n  }\n});\n\n/**\r\n * Checkbox\r\n *\r\n * React component used in forms when a user needs to select\r\n * multiple values from several options.\r\n *\r\n * @see Docs https://chakra-ui.com/docs/form/checkbox\r\n */\nexport var Checkbox = /*#__PURE__*/forwardRef((props, ref) => {\n  var group = useCheckboxGroupContext();\n  var mergedProps = _extends({}, group, props);\n  var styles = useMultiStyleConfig(\"Checkbox\", mergedProps);\n  var ownProps = omitThemingProps(props);\n  var {\n      spacing = \"0.5rem\",\n      className,\n      children,\n      iconColor,\n      iconSize,\n      icon = /*#__PURE__*/React.createElement(CheckboxIcon, null),\n      isChecked: isCheckedProp,\n      isDisabled = group == null ? void 0 : group.isDisabled,\n      onChange: onChangeProp\n    } = ownProps,\n    rest = _objectWithoutPropertiesLoose(ownProps, [\"spacing\", \"className\", \"children\", \"iconColor\", \"iconSize\", \"icon\", \"isChecked\", \"isDisabled\", \"onChange\"]);\n  var isChecked = isCheckedProp;\n  if (group != null && group.value && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value);\n  }\n  var onChange = onChangeProp;\n  if (group != null && group.onChange && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp);\n  }\n  var {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    getRootProps\n  } = useCheckbox(_extends({}, rest, {\n    isDisabled,\n    isChecked,\n    onChange\n  }));\n  var iconStyles = React.useMemo(() => _extends({\n    opacity: state.isChecked || state.isIndeterminate ? 1 : 0,\n    transform: state.isChecked || state.isIndeterminate ? \"scale(1)\" : \"scale(0.95)\",\n    transition: \"transform 200ms\",\n    fontSize: iconSize,\n    color: iconColor\n  }, styles.icon), [iconColor, iconSize, state.isChecked, state.isIndeterminate, styles.icon]);\n  var clonedIcon = /*#__PURE__*/React.cloneElement(icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked\n  });\n  return /*#__PURE__*/React.createElement(Label, _extends({\n    __css: styles.container,\n    className: cx(\"chakra-checkbox\", className)\n  }, getRootProps()), /*#__PURE__*/React.createElement(\"input\", _extends({\n    className: \"chakra-checkbox__input\"\n  }, getInputProps({}, ref))), /*#__PURE__*/React.createElement(CheckboxControl, _extends({\n    __css: styles.control,\n    className: \"chakra-checkbox__control\"\n  }, getCheckboxProps()), clonedIcon), children && /*#__PURE__*/React.createElement(chakra.span, _extends({\n    className: \"chakra-checkbox__label\"\n  }, getLabelProps(), {\n    __css: _extends({\n      marginStart: spacing\n    }, styles.label)\n  }), children));\n});\nif (__DEV__) {\n  Checkbox.displayName = \"Checkbox\";\n}","map":{"version":3,"names":["chakra","forwardRef","omitThemingProps","useMultiStyleConfig","callAll","cx","__DEV__","React","useCheckboxGroupContext","CheckboxIcon","useCheckbox","CheckboxControl","baseStyle","display","alignItems","justifyContent","verticalAlign","userSelect","flexShrink","Label","cursor","position","_disabled","Checkbox","props","ref","group","mergedProps","_extends","styles","ownProps","spacing","className","children","iconColor","iconSize","icon","createElement","isChecked","isCheckedProp","isDisabled","onChange","onChangeProp","rest","_objectWithoutPropertiesLoose","value","includes","state","getInputProps","getCheckboxProps","getLabelProps","getRootProps","iconStyles","useMemo","opacity","isIndeterminate","transform","transition","fontSize","color","clonedIcon","cloneElement","__css","container","control","span","marginStart","label","displayName"],"sources":["../../src/checkbox.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  PropsOf,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { callAll, cx, Omit, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useCheckboxGroupContext } from \"./checkbox-group\"\nimport { CheckboxIcon } from \"./checkbox-icon\"\nimport { useCheckbox, UseCheckboxProps } from \"./use-checkbox\"\n\nconst CheckboxControl = chakra(\"span\", {\n  baseStyle: {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    verticalAlign: \"top\",\n    userSelect: \"none\",\n    flexShrink: 0,\n  },\n})\n\nconst Label = chakra(\"label\", {\n  baseStyle: {\n    cursor: \"pointer\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    verticalAlign: \"top\",\n    position: \"relative\",\n    _disabled: {\n      cursor: \"not-allowed\",\n    },\n  },\n})\n\ntype CheckboxControlProps = Omit<HTMLChakraProps<\"div\">, keyof UseCheckboxProps>\n\ntype BaseInputProps = Pick<\n  PropsOf<\"input\">,\n  \"onBlur\" | \"checked\" | \"defaultChecked\"\n>\n\nexport interface CheckboxProps\n  extends CheckboxControlProps,\n    BaseInputProps,\n    ThemingProps<\"Checkbox\">,\n    UseCheckboxProps {\n  /**\n   * The spacing between the checkbox and its label text\n   * @default 0.5rem\n   * @type SystemProps[\"marginLeft\"]\n   */\n  spacing?: SystemProps[\"marginLeft\"]\n  /**\n   * The color of the checkbox icon when checked or indeterminate\n   */\n  iconColor?: string\n  /**\n   * The size of the checkbox icon when checked or indeterminate\n   */\n  iconSize?: string | number\n  /**\n   * The checked icon to use\n   *\n   * @type React.ReactElement\n   * @default CheckboxIcon\n   */\n  icon?: React.ReactElement\n}\n\n/**\n * Checkbox\n *\n * React component used in forms when a user needs to select\n * multiple values from several options.\n *\n * @see Docs https://chakra-ui.com/docs/form/checkbox\n */\nexport const Checkbox = forwardRef<CheckboxProps, \"input\">((props, ref) => {\n  const group = useCheckboxGroupContext()\n\n  const mergedProps = { ...group, ...props } as CheckboxProps\n  const styles = useMultiStyleConfig(\"Checkbox\", mergedProps)\n\n  const ownProps = omitThemingProps(props)\n\n  const {\n    spacing = \"0.5rem\",\n    className,\n    children,\n    iconColor,\n    iconSize,\n    icon = <CheckboxIcon />,\n    isChecked: isCheckedProp,\n    isDisabled = group?.isDisabled,\n    onChange: onChangeProp,\n    ...rest\n  } = ownProps\n\n  let isChecked = isCheckedProp\n  if (group?.value && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value)\n  }\n\n  let onChange = onChangeProp\n  if (group?.onChange && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp)\n  }\n\n  const {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    getRootProps,\n  } = useCheckbox({\n    ...rest,\n    isDisabled,\n    isChecked,\n    onChange,\n  })\n\n  const iconStyles: SystemStyleObject = React.useMemo(\n    () => ({\n      opacity: state.isChecked || state.isIndeterminate ? 1 : 0,\n      transform:\n        state.isChecked || state.isIndeterminate ? \"scale(1)\" : \"scale(0.95)\",\n      transition: \"transform 200ms\",\n      fontSize: iconSize,\n      color: iconColor,\n      ...styles.icon,\n    }),\n    [iconColor, iconSize, state.isChecked, state.isIndeterminate, styles.icon],\n  )\n\n  const clonedIcon = React.cloneElement(icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked,\n  })\n\n  return (\n    <Label\n      __css={styles.container}\n      className={cx(\"chakra-checkbox\", className)}\n      {...getRootProps()}\n    >\n      <input className=\"chakra-checkbox__input\" {...getInputProps({}, ref)} />\n      <CheckboxControl\n        __css={styles.control}\n        className=\"chakra-checkbox__control\"\n        {...getCheckboxProps()}\n      >\n        {clonedIcon}\n      </CheckboxControl>\n      {children && (\n        <chakra.span\n          className=\"chakra-checkbox__label\"\n          {...getLabelProps()}\n          __css={{\n            marginStart: spacing,\n            ...styles.label,\n          }}\n        >\n          {children}\n        </chakra.span>\n      )}\n    </Label>\n  )\n})\n\nif (__DEV__) {\n  Checkbox.displayName = \"Checkbox\"\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}