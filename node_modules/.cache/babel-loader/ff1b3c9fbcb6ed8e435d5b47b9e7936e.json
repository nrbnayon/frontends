{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { forwardRef } from \"@chakra-ui/system\";\nimport { mapResponsive, isNumber, isNull, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { Grid } from \"./grid\";\n\n/**\r\n * SimpleGrid\r\n *\r\n * React component make that providers a simpler interface, and\r\n * make its easy to create responsive grid layouts.\r\n *\r\n * @see Docs https://chakra-ui.com/docs/layout/simple-grid\r\n */\nexport var SimpleGrid = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n      columns,\n      spacingX,\n      spacingY,\n      spacing,\n      minChildWidth\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"columns\", \"spacingX\", \"spacingY\", \"spacing\", \"minChildWidth\"]);\n  var templateColumns = minChildWidth ? widthToColumns(minChildWidth) : countToColumns(columns);\n  return /*#__PURE__*/React.createElement(Grid, _extends({\n    ref: ref,\n    gap: spacing,\n    columnGap: spacingX,\n    rowGap: spacingY,\n    templateColumns: templateColumns\n  }, rest));\n});\nif (__DEV__) {\n  SimpleGrid.displayName = \"SimpleGrid\";\n}\nfunction toPx(n) {\n  return isNumber(n) ? n + \"px\" : n;\n}\nfunction widthToColumns(width) {\n  return mapResponsive(width, value => isNull(value) ? null : \"repeat(auto-fit, minmax(\" + toPx(value) + \", 1fr))\");\n}\nfunction countToColumns(count) {\n  return mapResponsive(count, value => isNull(value) ? null : \"repeat(\" + value + \", minmax(0, 1fr))\");\n}","map":{"version":3,"names":["forwardRef","mapResponsive","isNumber","isNull","__DEV__","React","Grid","SimpleGrid","props","ref","columns","spacingX","spacingY","spacing","minChildWidth","rest","_objectWithoutPropertiesLoose","templateColumns","widthToColumns","countToColumns","createElement","_extends","gap","columnGap","rowGap","displayName","toPx","n","width","value","count"],"sources":["../../src/simple-grid.tsx"],"sourcesContent":["import { ResponsiveValue, forwardRef } from \"@chakra-ui/system\"\nimport { mapResponsive, isNumber, isNull, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component make that providers a simpler interface, and\n * make its easy to create responsive grid layouts.\n *\n * @see Docs https://chakra-ui.com/docs/layout/simple-grid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">((props, ref) => {\n  const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } = props\n\n  const templateColumns = minChildWidth\n    ? widthToColumns(minChildWidth)\n    : countToColumns(columns)\n\n  return (\n    <Grid\n      ref={ref}\n      gap={spacing}\n      columnGap={spacingX}\n      rowGap={spacingY}\n      templateColumns={templateColumns}\n      {...rest}\n    />\n  )\n})\n\nif (__DEV__) {\n  SimpleGrid.displayName = \"SimpleGrid\"\n}\n\nfunction toPx(n: string | number) {\n  return isNumber(n) ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any) {\n  return mapResponsive(width, (value) =>\n    isNull(value) ? null : `repeat(auto-fit, minmax(${toPx(value)}, 1fr))`,\n  )\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    isNull(value) ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAA0BA,UAA1B,QAA4C,mBAA5C;AACA,SAASC,aAAT,EAAwBC,QAAxB,EAAkCC,MAAlC,EAA0CC,OAA1C,QAAyD,kBAAzD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,IAAT,QAAgC,QAAhC;;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,UAAU,gBAAGP,UAAU,CAAyB,CAACQ,KAAD,EAAQC,GAAR,KAAgB;EAC3E,IAAM;MAAEC,OAAF;MAAWC,QAAX;MAAqBC,QAArB;MAA+BC,OAA/B;MAAwCC;IAAxC,IAAmEN,KAAzE;IAAgEO,IAAhE,GAAAC,6BAAA,CAAyER,KAAzE;EAEA,IAAMS,eAAe,GAAGH,aAAa,GACjCI,cAAc,CAACJ,aAAD,CADmB,GAEjCK,cAAc,CAACT,OAAD,CAFlB;EAIA,oBACEL,KAAA,CAAAe,aAAA,CAACd,IAAD,EAAAe,QAAA;IACEZ,GAAG,EAAEA,GADP;IAEEa,GAAG,EAAET,OAFP;IAGEU,SAAS,EAAEZ,QAHb;IAIEa,MAAM,EAAEZ,QAJV;IAKEK,eAAe,EAAEA;EALnB,GAMMF,IANN,EADF;AAUD,CAjBmC,CAA7B;AAmBP,IAAIX,OAAJ,EAAa;EACXG,UAAU,CAACkB,WAAX,GAAyB,YAAzB;AACD;AAED,SAASC,IAATA,CAAcC,CAAd,EAAkC;EAChC,OAAOzB,QAAQ,CAACyB,CAAD,CAAR,GAAiBA,CAAjB,UAAyBA,CAAhC;AACD;AAED,SAAST,cAATA,CAAwBU,KAAxB,EAAoC;EAClC,OAAO3B,aAAa,CAAC2B,KAAD,EAASC,KAAD,IAC1B1B,MAAM,CAAC0B,KAAD,CAAN,GAAgB,IAAhB,gCAAkDH,IAAI,CAACG,KAAD,CAAtD,YADkB,CAApB;AAGD;AAED,SAASV,cAATA,CAAwBW,KAAxB,EAAoC;EAClC,OAAO7B,aAAa,CAAC6B,KAAD,EAASD,KAAD,IAC1B1B,MAAM,CAAC0B,KAAD,CAAN,GAAgB,IAAhB,eAAiCA,KAAjC,sBADkB,CAApB;AAGD"},"metadata":{},"sourceType":"module"}