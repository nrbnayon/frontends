{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { filterUndefined, memoizedGet as get, mergeWith, runIfFn, omit } from \"@chakra-ui/utils\";\nimport { useMemo, useRef } from \"react\";\nimport isEqual from \"react-fast-compare\";\nimport { useChakra } from \"./hooks\";\nexport function useStyleConfig(themeKey, props, opts) {\n  var _styleConfig$defaultP, _opts2;\n  if (props === void 0) {\n    props = {};\n  }\n  if (opts === void 0) {\n    opts = {};\n  }\n  var {\n      styleConfig: styleConfigProp\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"styleConfig\"]);\n  var {\n    theme,\n    colorMode\n  } = useChakra();\n  var themeStyleConfig = get(theme, \"components.\" + themeKey);\n  var styleConfig = styleConfigProp || themeStyleConfig;\n  var mergedProps = mergeWith({\n    theme,\n    colorMode\n  }, (_styleConfig$defaultP = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _styleConfig$defaultP : {}, filterUndefined(omit(rest, [\"children\"])));\n  /**\r\n   * Store the computed styles in a `ref` to avoid unneeded re-computation\r\n   */\n\n  var stylesRef = useRef({});\n  return useMemo(() => {\n    if (styleConfig) {\n      var _styleConfig$baseStyl, _styleConfig$variants, _styleConfig$variants2, _styleConfig$sizes$me, _styleConfig$sizes, _opts;\n      var baseStyles = runIfFn((_styleConfig$baseStyl = styleConfig.baseStyle) != null ? _styleConfig$baseStyl : {}, mergedProps);\n      var variants = runIfFn((_styleConfig$variants = (_styleConfig$variants2 = styleConfig.variants) == null ? void 0 : _styleConfig$variants2[mergedProps.variant]) != null ? _styleConfig$variants : {}, mergedProps);\n      var sizes = runIfFn((_styleConfig$sizes$me = (_styleConfig$sizes = styleConfig.sizes) == null ? void 0 : _styleConfig$sizes[mergedProps.size]) != null ? _styleConfig$sizes$me : {}, mergedProps);\n      var styles = mergeWith({}, baseStyles, sizes, variants);\n      if ((_opts = opts) != null && _opts.isMultiPart && styleConfig.parts) {\n        styleConfig.parts.forEach(part => {\n          var _styles$part;\n          styles[part] = (_styles$part = styles[part]) != null ? _styles$part : {};\n        });\n      }\n      var isStyleEqual = isEqual(stylesRef.current, styles);\n      if (!isStyleEqual) {\n        stylesRef.current = styles;\n      }\n    }\n    return stylesRef.current;\n  }, [styleConfig, mergedProps, (_opts2 = opts) == null ? void 0 : _opts2.isMultiPart]);\n}\nexport function useMultiStyleConfig(themeKey, props) {\n  return useStyleConfig(themeKey, props, {\n    isMultiPart: true\n  });\n}","map":{"version":3,"names":["filterUndefined","memoizedGet","get","mergeWith","runIfFn","omit","useMemo","useRef","isEqual","useChakra","useStyleConfig","themeKey","props","opts","_styleConfig$defaultP","_opts2","styleConfig","styleConfigProp","rest","_objectWithoutPropertiesLoose","theme","colorMode","themeStyleConfig","mergedProps","defaultProps","stylesRef","_styleConfig$baseStyl","_styleConfig$variants","_styleConfig$variants2","_styleConfig$sizes$me","_styleConfig$sizes","_opts","baseStyles","baseStyle","variants","variant","sizes","size","styles","isMultiPart","parts","forEach","part","_styles$part","isStyleEqual","current","useMultiStyleConfig"],"sources":["../../src/use-style-config.ts"],"sourcesContent":["import { SystemStyleObject } from \"@chakra-ui/styled-system\"\nimport {\n  filterUndefined,\n  memoizedGet as get,\n  mergeWith,\n  runIfFn,\n  omit,\n  Dict,\n} from \"@chakra-ui/utils\"\nimport { useMemo, useRef } from \"react\"\nimport isEqual from \"react-fast-compare\"\nimport { useChakra } from \"./hooks\"\nimport { ThemingProps } from \"./system.types\"\n\nexport function useStyleConfig(\n  themeKey: string,\n  props: ThemingProps & Dict,\n  opts: { isMultiPart: true },\n): Record<string, SystemStyleObject>\n\nexport function useStyleConfig(\n  themeKey: string,\n  props?: ThemingProps & Dict,\n  opts?: { isMultiPart?: boolean },\n): SystemStyleObject\n\nexport function useStyleConfig(themeKey: any, props: any = {}, opts: any = {}) {\n  const { styleConfig: styleConfigProp, ...rest } = props\n\n  const { theme, colorMode } = useChakra()\n  const themeStyleConfig = get(theme, `components.${themeKey}`)\n  const styleConfig = styleConfigProp || themeStyleConfig\n\n  const mergedProps = mergeWith(\n    { theme, colorMode },\n    styleConfig?.defaultProps ?? {},\n    filterUndefined(omit(rest, [\"children\"])),\n  )\n\n  /**\n   * Store the computed styles in a `ref` to avoid unneeded re-computation\n   */\n  type StylesRef = SystemStyleObject | Record<string, SystemStyleObject>\n  const stylesRef = useRef<StylesRef>({})\n\n  return useMemo(() => {\n    if (styleConfig) {\n      const baseStyles = runIfFn(styleConfig.baseStyle ?? {}, mergedProps)\n\n      const variants = runIfFn(\n        styleConfig.variants?.[mergedProps.variant] ?? {},\n        mergedProps,\n      )\n\n      const sizes = runIfFn(\n        styleConfig.sizes?.[mergedProps.size] ?? {},\n        mergedProps,\n      )\n\n      const styles = mergeWith({}, baseStyles, sizes, variants)\n\n      if (opts?.isMultiPart && styleConfig.parts) {\n        styleConfig.parts.forEach((part: string) => {\n          styles[part] = styles[part] ?? {}\n        })\n      }\n\n      const isStyleEqual = isEqual(stylesRef.current, styles)\n\n      if (!isStyleEqual) {\n        stylesRef.current = styles\n      }\n    }\n\n    return stylesRef.current\n  }, [styleConfig, mergedProps, opts?.isMultiPart])\n}\n\nexport function useMultiStyleConfig(themeKey: string, props: any) {\n  return useStyleConfig(themeKey, props, { isMultiPart: true })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}