{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { filterUndefined, mapResponsive, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n\n/**\r\n * React component used to create grid layouts.\r\n *\r\n * It renders a `div` with `display: grid` and\r\n * comes with helpful style shorthand.\r\n *\r\n * @see Docs https://chakra-ui.com/docs/layout/grid\r\n */\nexport var Grid = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n      area,\n      templateAreas,\n      gap,\n      rowGap,\n      columnGap,\n      column,\n      row,\n      autoFlow,\n      autoRows,\n      templateRows,\n      autoColumns,\n      templateColumns\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"area\", \"templateAreas\", \"gap\", \"rowGap\", \"columnGap\", \"column\", \"row\", \"autoFlow\", \"autoRows\", \"templateRows\", \"autoColumns\", \"templateColumns\"]);\n  var styles = {\n    display: \"grid\",\n    gridArea: area,\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns\n  };\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    __css: styles\n  }, rest));\n});\nif (__DEV__) {\n  Grid.displayName = \"Grid\";\n}\nfunction spanFn(span) {\n  return mapResponsive(span, value => value === \"auto\" ? \"auto\" : \"span \" + value + \"/span \" + value);\n}\nexport var GridItem = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n      colSpan,\n      colStart,\n      colEnd,\n      rowEnd,\n      rowSpan,\n      rowStart\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"colSpan\", \"colStart\", \"colEnd\", \"rowEnd\", \"rowSpan\", \"rowStart\"]);\n  var styles = filterUndefined({\n    gridColumn: spanFn(colSpan),\n    gridRow: spanFn(rowSpan),\n    gridColumnStart: colStart,\n    gridColumnEnd: colEnd,\n    gridRowStart: rowStart,\n    gridRowEnd: rowEnd\n  });\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    __css: styles\n  }, rest));\n});","map":{"version":3,"names":["chakra","forwardRef","filterUndefined","mapResponsive","__DEV__","React","Grid","props","ref","area","templateAreas","gap","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","rest","_objectWithoutPropertiesLoose","styles","display","gridArea","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","createElement","div","_extends","__css","displayName","spanFn","span","value","GridItem","colSpan","colStart","colEnd","rowEnd","rowSpan","rowStart","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd"],"sources":["../../src/grid.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  ResponsiveValue,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { filterUndefined, mapResponsive, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { BoxProps } from \"./box\"\n\nexport interface GridProps extends HTMLChakraProps<\"div\">, GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/docs/layout/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">((props, ref) => {\n  const {\n    area,\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridArea: area,\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nif (__DEV__) {\n  Grid.displayName = \"Grid\"\n}\n\nexport interface GridOptions {\n  /**\n   * Short hand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Short hand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Short hand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Short hand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Short hand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Short hand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Short hand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Short hand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Short hand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Short hand prop for `gridArea`\n   * @type SystemProps[\"gridArea\"]\n   */\n  area?: SystemProps[\"gridArea\"]\n  /**\n   * Short hand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Short hand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridItemProps extends BoxProps {\n  /**\n   * The number of columns the grid item should `span`.\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colSpan?: ResponsiveValue<number | \"auto\">\n  /**\n   * The column number the grid item should start.\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colStart?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colEnd?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowStart?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowEnd?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowSpan?: ResponsiveValue<number | \"auto\">\n}\n\nfunction spanFn(span?: ResponsiveValue<number | \"auto\">) {\n  return mapResponsive(span, (value) =>\n    value === \"auto\" ? \"auto\" : `span ${value}/span ${value}`,\n  )\n}\n\nexport const GridItem = forwardRef<GridItemProps, \"div\">((props, ref) => {\n  const {\n    colSpan,\n    colStart,\n    colEnd,\n    rowEnd,\n    rowSpan,\n    rowStart,\n    ...rest\n  } = props\n\n  const styles = filterUndefined({\n    gridColumn: spanFn(colSpan),\n    gridRow: spanFn(rowSpan),\n    gridColumnStart: colStart,\n    gridColumnEnd: colEnd,\n    gridRowStart: rowStart,\n    gridRowEnd: rowEnd,\n  })\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SACEA,MADF,EAEEC,UAFF,QAMO,mBANP;AAOA,SAASC,eAAT,EAA0BC,aAA1B,EAAyCC,OAAzC,QAAwD,kBAAxD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,IAAI,gBAAGL,UAAU,CAAmB,CAACM,KAAD,EAAQC,GAAR,KAAgB;EAC/D,IAAM;MACJC,IADI;MAEJC,aAFI;MAGJC,GAHI;MAIJC,MAJI;MAKJC,SALI;MAMJC,MANI;MAOJC,GAPI;MAQJC,QARI;MASJC,QATI;MAUJC,YAVI;MAWJC,WAXI;MAYJC;IAZI,IAcFb,KAdJ;IAaKc,IAbL,GAAAC,6BAAA,CAcIf,KAdJ;EAgBA,IAAMgB,MAAM,GAAG;IACbC,OAAO,EAAE,MADI;IAEbC,QAAQ,EAAEhB,IAFG;IAGbiB,iBAAiB,EAAEhB,aAHN;IAIbiB,OAAO,EAAEhB,GAJI;IAKbiB,UAAU,EAAEhB,MALC;IAMbiB,aAAa,EAAEhB,SANF;IAObiB,eAAe,EAAEX,WAPJ;IAQbY,UAAU,EAAEjB,MARC;IASbkB,OAAO,EAAEjB,GATI;IAUbkB,YAAY,EAAEjB,QAVD;IAWbkB,YAAY,EAAEjB,QAXD;IAYbkB,gBAAgB,EAAEjB,YAZL;IAabkB,mBAAmB,EAAEhB;EAbR,CAAf;EAgBA,oBAAOf,KAAA,CAAAgC,aAAA,CAACrC,MAAD,CAAQsC,GAAR,EAAAC,QAAA;IAAY/B,GAAG,EAAEA,GAAjB;IAAsBgC,KAAK,EAAEjB;EAA7B,GAAyCF,IAAzC,EAAP;AACD,CAlC6B,CAAvB;AAoCP,IAAIjB,OAAJ,EAAa;EACXE,IAAI,CAACmC,WAAL,GAAmB,MAAnB;AACD;AA8FD,SAASC,MAATA,CAAgBC,IAAhB,EAAyD;EACvD,OAAOxC,aAAa,CAACwC,IAAD,EAAQC,KAAD,IACzBA,KAAK,KAAK,MAAV,GAAmB,MAAnB,aAAoCA,KAApC,cAAkDA,KADhC,CAApB;AAGD;AAED,OAAO,IAAMC,QAAQ,gBAAG5C,UAAU,CAAuB,CAACM,KAAD,EAAQC,GAAR,KAAgB;EACvE,IAAM;MACJsC,OADI;MAEJC,QAFI;MAGJC,MAHI;MAIJC,MAJI;MAKJC,OALI;MAMJC;IANI,IAQF5C,KARJ;IAOKc,IAPL,GAAAC,6BAAA,CAQIf,KARJ;EAUA,IAAMgB,MAAM,GAAGrB,eAAe,CAAC;IAC7B6B,UAAU,EAAEW,MAAM,CAACI,OAAD,CADW;IAE7Bd,OAAO,EAAEU,MAAM,CAACQ,OAAD,CAFc;IAG7BE,eAAe,EAAEL,QAHY;IAI7BM,aAAa,EAAEL,MAJc;IAK7BM,YAAY,EAAEH,QALe;IAM7BI,UAAU,EAAEN;EANiB,CAAD,CAA9B;EASA,oBAAO5C,KAAA,CAAAgC,aAAA,CAACrC,MAAD,CAAQsC,GAAR,EAAAC,QAAA;IAAY/B,GAAG,EAAEA,GAAjB;IAAsBgC,KAAK,EAAEjB;EAA7B,GAAyCF,IAAzC,EAAP;AACD,CArBiC,CAA3B"},"metadata":{},"sourceType":"module"}