{"ast":null,"code":"import { useRef } from \"react\";\n/**\r\n * Creates a constant value over the lifecycle of a component.\r\n *\r\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\r\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\r\n * you can ensure that initialisers don't execute twice or more.\r\n */\n\nexport function useConst(init) {\n  var ref = useRef(null);\n  if (ref.current === null) {\n    ref.current = typeof init === \"function\" ? init() : init;\n  }\n  return ref.current;\n}","map":{"version":3,"names":["useRef","useConst","init","ref","current"],"sources":["../../src/use-const.ts"],"sourcesContent":["import { useRef } from \"react\"\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */\nexport function useConst<T extends any | (() => any)>(init: T) {\n  const ref = useRef<T | null>(null)\n\n  if (ref.current === null) {\n    ref.current = typeof init === \"function\" ? init() : init\n  }\n\n  return ref.current as T\n}\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,OAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAATA,CAA+CC,IAA/C,EAAwD;EAC7D,IAAMC,GAAG,GAAGH,MAAM,CAAW,IAAX,CAAlB;EAEA,IAAIG,GAAG,CAACC,OAAJ,KAAgB,IAApB,EAA0B;IACxBD,GAAG,CAACC,OAAJ,GAAc,OAAOF,IAAP,KAAgB,UAAhB,GAA6BA,IAAI,EAAjC,GAAsCA,IAApD;EACD;EAED,OAAOC,GAAG,CAACC,OAAX;AACD"},"metadata":{},"sourceType":"module"}