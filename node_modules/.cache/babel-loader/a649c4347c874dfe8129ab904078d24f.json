{"ast":null,"code":"const Transport = require(\"../transport\");\nconst parseqs = require(\"parseqs\");\nconst parser = require(\"engine.io-parser\");\nconst yeast = require(\"yeast\");\nconst debug = require(\"debug\")(\"engine.io-client:polling\");\nclass Polling extends Transport {\n  /**\r\n   * Transport name.\r\n   */\n  get name() {\n    return \"polling\";\n  }\n\n  /**\r\n   * Opens the socket (triggers polling). We write a PING message to determine\r\n   * when the transport is open.\r\n   *\r\n   * @api private\r\n   */\n  doOpen() {\n    this.poll();\n  }\n\n  /**\r\n   * Pauses polling.\r\n   *\r\n   * @param {Function} callback upon buffers are flushed and transport is paused\r\n   * @api private\r\n   */\n  pause(onPause) {\n    this.readyState = \"pausing\";\n    const pause = () => {\n      debug(\"paused\");\n      this.readyState = \"paused\";\n      onPause();\n    };\n    if (this.polling || !this.writable) {\n      let total = 0;\n      if (this.polling) {\n        debug(\"we are currently polling - waiting to pause\");\n        total++;\n        this.once(\"pollComplete\", function () {\n          debug(\"pre-pause polling complete\");\n          --total || pause();\n        });\n      }\n      if (!this.writable) {\n        debug(\"we are currently writing - waiting to pause\");\n        total++;\n        this.once(\"drain\", function () {\n          debug(\"pre-pause writing complete\");\n          --total || pause();\n        });\n      }\n    } else {\n      pause();\n    }\n  }\n\n  /**\r\n   * Starts polling cycle.\r\n   *\r\n   * @api public\r\n   */\n  poll() {\n    debug(\"polling\");\n    this.polling = true;\n    this.doPoll();\n    this.emit(\"poll\");\n  }\n\n  /**\r\n   * Overloads onData to detect payloads.\r\n   *\r\n   * @api private\r\n   */\n  onData(data) {\n    debug(\"polling got data %s\", data);\n    const callback = packet => {\n      // if its the first message we consider the transport open\n      if (\"opening\" === this.readyState && packet.type === \"open\") {\n        this.onOpen();\n      }\n\n      // if its a close packet, we close the ongoing requests\n      if (\"close\" === packet.type) {\n        this.onClose();\n        return false;\n      }\n\n      // otherwise bypass onData and handle the message\n      this.onPacket(packet);\n    };\n\n    // decode payload\n    parser.decodePayload(data, this.socket.binaryType).forEach(callback);\n\n    // if an event did not trigger closing\n    if (\"closed\" !== this.readyState) {\n      // if we got data we're not polling\n      this.polling = false;\n      this.emit(\"pollComplete\");\n      if (\"open\" === this.readyState) {\n        this.poll();\n      } else {\n        debug('ignoring poll - transport state \"%s\"', this.readyState);\n      }\n    }\n  }\n\n  /**\r\n   * For polling, send a close packet.\r\n   *\r\n   * @api private\r\n   */\n  doClose() {\n    const close = () => {\n      debug(\"writing close packet\");\n      this.write([{\n        type: \"close\"\n      }]);\n    };\n    if (\"open\" === this.readyState) {\n      debug(\"transport open - closing\");\n      close();\n    } else {\n      // in case we're trying to close while\n      // handshaking is in progress (GH-164)\n      debug(\"transport not open - deferring close\");\n      this.once(\"open\", close);\n    }\n  }\n\n  /**\r\n   * Writes a packets payload.\r\n   *\r\n   * @param {Array} data packets\r\n   * @param {Function} drain callback\r\n   * @api private\r\n   */\n  write(packets) {\n    this.writable = false;\n    parser.encodePayload(packets, data => {\n      this.doWrite(data, () => {\n        this.writable = true;\n        this.emit(\"drain\");\n      });\n    });\n  }\n\n  /**\r\n   * Generates uri for connection.\r\n   *\r\n   * @api private\r\n   */\n  uri() {\n    let query = this.query || {};\n    const schema = this.opts.secure ? \"https\" : \"http\";\n    let port = \"\";\n\n    // cache busting is forced\n    if (false !== this.opts.timestampRequests) {\n      query[this.opts.timestampParam] = yeast();\n    }\n    if (!this.supportsBinary && !query.sid) {\n      query.b64 = 1;\n    }\n    query = parseqs.encode(query);\n\n    // avoid port if default for schema\n    if (this.opts.port && (\"https\" === schema && Number(this.opts.port) !== 443 || \"http\" === schema && Number(this.opts.port) !== 80)) {\n      port = \":\" + this.opts.port;\n    }\n\n    // prepend ? to query\n    if (query.length) {\n      query = \"?\" + query;\n    }\n    const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n    return schema + \"://\" + (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) + port + this.opts.path + query;\n  }\n}\nmodule.exports = Polling;","map":{"version":3,"names":["Transport","require","parseqs","parser","yeast","debug","Polling","name","doOpen","poll","pause","onPause","readyState","polling","writable","total","once","doPoll","emit","onData","data","callback","packet","type","onOpen","onClose","onPacket","decodePayload","socket","binaryType","forEach","doClose","close","write","packets","encodePayload","doWrite","uri","query","schema","opts","secure","port","timestampRequests","timestampParam","supportsBinary","sid","b64","encode","Number","length","ipv6","hostname","indexOf","path","module","exports"],"sources":["E:/Hasan sir project/ChattersTwo/frontend/node_modules/engine.io-client/lib/transports/polling.js"],"sourcesContent":["const Transport = require(\"../transport\");\r\nconst parseqs = require(\"parseqs\");\r\nconst parser = require(\"engine.io-parser\");\r\nconst yeast = require(\"yeast\");\r\n\r\nconst debug = require(\"debug\")(\"engine.io-client:polling\");\r\n\r\nclass Polling extends Transport {\r\n  /**\r\n   * Transport name.\r\n   */\r\n  get name() {\r\n    return \"polling\";\r\n  }\r\n\r\n  /**\r\n   * Opens the socket (triggers polling). We write a PING message to determine\r\n   * when the transport is open.\r\n   *\r\n   * @api private\r\n   */\r\n  doOpen() {\r\n    this.poll();\r\n  }\r\n\r\n  /**\r\n   * Pauses polling.\r\n   *\r\n   * @param {Function} callback upon buffers are flushed and transport is paused\r\n   * @api private\r\n   */\r\n  pause(onPause) {\r\n    this.readyState = \"pausing\";\r\n\r\n    const pause = () => {\r\n      debug(\"paused\");\r\n      this.readyState = \"paused\";\r\n      onPause();\r\n    };\r\n\r\n    if (this.polling || !this.writable) {\r\n      let total = 0;\r\n\r\n      if (this.polling) {\r\n        debug(\"we are currently polling - waiting to pause\");\r\n        total++;\r\n        this.once(\"pollComplete\", function() {\r\n          debug(\"pre-pause polling complete\");\r\n          --total || pause();\r\n        });\r\n      }\r\n\r\n      if (!this.writable) {\r\n        debug(\"we are currently writing - waiting to pause\");\r\n        total++;\r\n        this.once(\"drain\", function() {\r\n          debug(\"pre-pause writing complete\");\r\n          --total || pause();\r\n        });\r\n      }\r\n    } else {\r\n      pause();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts polling cycle.\r\n   *\r\n   * @api public\r\n   */\r\n  poll() {\r\n    debug(\"polling\");\r\n    this.polling = true;\r\n    this.doPoll();\r\n    this.emit(\"poll\");\r\n  }\r\n\r\n  /**\r\n   * Overloads onData to detect payloads.\r\n   *\r\n   * @api private\r\n   */\r\n  onData(data) {\r\n    debug(\"polling got data %s\", data);\r\n    const callback = packet => {\r\n      // if its the first message we consider the transport open\r\n      if (\"opening\" === this.readyState && packet.type === \"open\") {\r\n        this.onOpen();\r\n      }\r\n\r\n      // if its a close packet, we close the ongoing requests\r\n      if (\"close\" === packet.type) {\r\n        this.onClose();\r\n        return false;\r\n      }\r\n\r\n      // otherwise bypass onData and handle the message\r\n      this.onPacket(packet);\r\n    };\r\n\r\n    // decode payload\r\n    parser.decodePayload(data, this.socket.binaryType).forEach(callback);\r\n\r\n    // if an event did not trigger closing\r\n    if (\"closed\" !== this.readyState) {\r\n      // if we got data we're not polling\r\n      this.polling = false;\r\n      this.emit(\"pollComplete\");\r\n\r\n      if (\"open\" === this.readyState) {\r\n        this.poll();\r\n      } else {\r\n        debug('ignoring poll - transport state \"%s\"', this.readyState);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * For polling, send a close packet.\r\n   *\r\n   * @api private\r\n   */\r\n  doClose() {\r\n    const close = () => {\r\n      debug(\"writing close packet\");\r\n      this.write([{ type: \"close\" }]);\r\n    };\r\n\r\n    if (\"open\" === this.readyState) {\r\n      debug(\"transport open - closing\");\r\n      close();\r\n    } else {\r\n      // in case we're trying to close while\r\n      // handshaking is in progress (GH-164)\r\n      debug(\"transport not open - deferring close\");\r\n      this.once(\"open\", close);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Writes a packets payload.\r\n   *\r\n   * @param {Array} data packets\r\n   * @param {Function} drain callback\r\n   * @api private\r\n   */\r\n  write(packets) {\r\n    this.writable = false;\r\n\r\n    parser.encodePayload(packets, data => {\r\n      this.doWrite(data, () => {\r\n        this.writable = true;\r\n        this.emit(\"drain\");\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Generates uri for connection.\r\n   *\r\n   * @api private\r\n   */\r\n  uri() {\r\n    let query = this.query || {};\r\n    const schema = this.opts.secure ? \"https\" : \"http\";\r\n    let port = \"\";\r\n\r\n    // cache busting is forced\r\n    if (false !== this.opts.timestampRequests) {\r\n      query[this.opts.timestampParam] = yeast();\r\n    }\r\n\r\n    if (!this.supportsBinary && !query.sid) {\r\n      query.b64 = 1;\r\n    }\r\n\r\n    query = parseqs.encode(query);\r\n\r\n    // avoid port if default for schema\r\n    if (\r\n      this.opts.port &&\r\n      ((\"https\" === schema && Number(this.opts.port) !== 443) ||\r\n        (\"http\" === schema && Number(this.opts.port) !== 80))\r\n    ) {\r\n      port = \":\" + this.opts.port;\r\n    }\r\n\r\n    // prepend ? to query\r\n    if (query.length) {\r\n      query = \"?\" + query;\r\n    }\r\n\r\n    const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\r\n    return (\r\n      schema +\r\n      \"://\" +\r\n      (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\r\n      port +\r\n      this.opts.path +\r\n      query\r\n    );\r\n  }\r\n}\r\n\r\nmodule.exports = Polling;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}