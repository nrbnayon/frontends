{"ast":null,"code":"import _defineProperty from \"E:/Hasan sir project/ChattersTwo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"E:/Hasan sir project/ChattersTwo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx, dataAttr, mergeWith, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useButtonGroup } from \"./button-group\";\nexport var Button = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _styles$_focus;\n\n  var group = useButtonGroup();\n  var styles = useStyleConfig(\"Button\", _extends({}, group, props));\n\n  var _omitThemingProps = omitThemingProps(props),\n      _omitThemingProps$isD = _omitThemingProps.isDisabled,\n      isDisabled = _omitThemingProps$isD === void 0 ? group == null ? void 0 : group.isDisabled : _omitThemingProps$isD,\n      isLoading = _omitThemingProps.isLoading,\n      isActive = _omitThemingProps.isActive,\n      isFullWidth = _omitThemingProps.isFullWidth,\n      children = _omitThemingProps.children,\n      leftIcon = _omitThemingProps.leftIcon,\n      rightIcon = _omitThemingProps.rightIcon,\n      loadingText = _omitThemingProps.loadingText,\n      _omitThemingProps$ico = _omitThemingProps.iconSpacing,\n      iconSpacing = _omitThemingProps$ico === void 0 ? \"0.5rem\" : _omitThemingProps$ico,\n      type = _omitThemingProps.type,\n      spinner = _omitThemingProps.spinner,\n      _omitThemingProps$spi = _omitThemingProps.spinnerPlacement,\n      spinnerPlacement = _omitThemingProps$spi === void 0 ? \"start\" : _omitThemingProps$spi,\n      className = _omitThemingProps.className,\n      as = _omitThemingProps.as,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"isDisabled\", \"isLoading\", \"isActive\", \"isFullWidth\", \"children\", \"leftIcon\", \"rightIcon\", \"loadingText\", \"iconSpacing\", \"type\", \"spinner\", \"spinnerPlacement\", \"className\", \"as\"]);\n  /**\r\n   * When button is used within ButtonGroup (i.e flushed with sibling buttons),\r\n   * it is important to add a `zIndex` on focus.\r\n   *\r\n   * So let's read the component styles and then add `zIndex` to it.\r\n   */\n\n\n  var _focus = mergeWith({}, (_styles$_focus = styles == null ? void 0 : styles[\"_focus\"]) != null ? _styles$_focus : {}, {\n    zIndex: 1\n  });\n\n  var buttonStyles = _extends({\n    display: \"inline-flex\",\n    appearance: \"none\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    transition: \"all 250ms\",\n    userSelect: \"none\",\n    position: \"relative\",\n    whiteSpace: \"nowrap\",\n    verticalAlign: \"middle\",\n    outline: \"none\",\n    width: isFullWidth ? \"100%\" : \"auto\"\n  }, styles, !!group && {\n    _focus: _focus\n  });\n\n  var _React$useState = React.useState(!as),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isButton = _React$useState2[0],\n      setIsButton = _React$useState2[1];\n\n  var refCallback = React.useCallback(function (node) {\n    if (!node) return;\n    setIsButton(node.tagName === \"BUTTON\");\n  }, []);\n  var defaultType = isButton ? \"button\" : undefined;\n  return /*#__PURE__*/React.createElement(chakra.button, _extends({\n    disabled: isDisabled || isLoading,\n    ref: mergeRefs(ref, refCallback),\n    as: as,\n    type: type != null ? type : defaultType,\n    \"data-active\": dataAttr(isActive),\n    \"data-loading\": dataAttr(isLoading),\n    __css: buttonStyles,\n    className: cx(\"chakra-button\", className)\n  }, rest), leftIcon && !isLoading && /*#__PURE__*/React.createElement(ButtonIcon, {\n    marginEnd: iconSpacing\n  }, leftIcon), isLoading && spinnerPlacement === \"start\" && /*#__PURE__*/React.createElement(ButtonSpinner, {\n    label: loadingText,\n    placement: \"start\"\n  }, spinner), isLoading ? loadingText || /*#__PURE__*/React.createElement(chakra.span, {\n    opacity: 0\n  }, children) : children, isLoading && spinnerPlacement === \"end\" && /*#__PURE__*/React.createElement(ButtonSpinner, {\n    label: loadingText,\n    placement: \"end\"\n  }, spinner), rightIcon && !isLoading && /*#__PURE__*/React.createElement(ButtonIcon, {\n    marginStart: iconSpacing\n  }, rightIcon));\n});\n\nif (__DEV__) {\n  Button.displayName = \"Button\";\n}\n\nvar ButtonIcon = function ButtonIcon(props) {\n  var children = props.children,\n      className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, [\"children\", \"className\"]);\n\n  var _children = /*#__PURE__*/React.isValidElement(children) ? /*#__PURE__*/React.cloneElement(children, {\n    \"aria-hidden\": true,\n    focusable: false\n  }) : children;\n\n  var _className = cx(\"chakra-button__icon\", className);\n\n  return /*#__PURE__*/React.createElement(chakra.span, _extends({\n    display: \"inline-flex\",\n    alignSelf: \"center\",\n    flexShrink: 0\n  }, rest, {\n    className: _className\n  }), _children);\n};\n\nif (__DEV__) {\n  ButtonIcon.displayName = \"ButtonIcon\";\n}\n\nvar ButtonSpinner = function ButtonSpinner(props) {\n  var _extends2;\n\n  var label = props.label,\n      placement = props.placement,\n      _props$children = props.children,\n      children = _props$children === void 0 ? /*#__PURE__*/React.createElement(Spinner, {\n    color: \"currentColor\",\n    width: \"1em\",\n    height: \"1em\"\n  }) : _props$children,\n      className = props.className,\n      __css = props.__css,\n      rest = _objectWithoutPropertiesLoose(props, [\"label\", \"placement\", \"spacing\", \"children\", \"className\", \"__css\"]);\n\n  var _className = cx(\"chakra-button__spinner\", className);\n\n  var marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\";\n\n  var spinnerStyles = _extends((_extends2 = {\n    display: \"flex\",\n    alignItems: \"center\",\n    position: label ? \"relative\" : \"absolute\"\n  }, _defineProperty(_extends2, marginProp, label ? \"0.5rem\" : 0), _defineProperty(_extends2, \"fontSize\", \"1em\"), _defineProperty(_extends2, \"lineHeight\", \"normal\"), _extends2), __css);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: _className\n  }, rest, {\n    __css: spinnerStyles\n  }), children);\n};\n\nif (__DEV__) {\n  ButtonSpinner.displayName = \"ButtonSpinner\";\n}","map":{"version":3,"sources":["../../src/button.tsx"],"names":["Button","forwardRef","group","useButtonGroup","styles","useStyleConfig","isDisabled","iconSpacing","spinnerPlacement","as","omitThemingProps","_focus","mergeWith","zIndex","buttonStyles","display","appearance","alignItems","justifyContent","transition","userSelect","position","whiteSpace","verticalAlign","outline","width","isFullWidth","React","refCallback","node","setIsButton","defaultType","isButton","mergeRefs","type","dataAttr","cx","leftIcon","isLoading","loadingText","rightIcon","ButtonIcon","props","className","_children","focusable","_className","ButtonSpinner","children","__css","marginProp","placement","spinnerStyles","label"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA,QAAA,wBAAA;AACA,SAAA,OAAA,QAAA,oBAAA;AACA,SAAA,MAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,cAAA,QAAA,mBAAA;AAUA,SAAA,EAAA,EAAA,QAAA,EAAA,SAAA,EAAA,OAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,cAAA,QAAA,gBAAA;AA4DA,OAAO,IAAMA,MAAM,GAAA,aAAGC,UAAU,CAAwB,UAAA,KAAA,EAAA,GAAA,EAAgB;AAAA,MAAA,cAAA;;AACtE,MAAMC,KAAK,GAAGC,cAAd,EAAA;AACA,MAAMC,MAAM,GAAGC,cAAc,CAAA,QAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAA7B,KAA6B,CAAA,CAA7B;;AAEA,MAAA,iBAAA,GAgBIK,gBAAgB,CAhBpB,KAgBoB,CAhBpB;AAAA,8BAAA,iBAAA,CACEJ,UADF;AAAA,MACEA,UADF,sCACeJ,KAAH,IAAA,IAAGA,GAAH,KAAA,CAAGA,GAAAA,KAAK,CADd,UAAN;AAAA,MAAM,SAAN,GAAA,iBAAA,CAAM,SAAN;AAAA,MAAM,QAAN,GAAA,iBAAA,CAAM,QAAN;AAAA,MAAM,WAAN,GAAA,iBAAA,CAAM,WAAN;AAAA,MAAM,QAAN,GAAA,iBAAA,CAAM,QAAN;AAAA,MAAM,QAAN,GAAA,iBAAA,CAAM,QAAN;AAAA,MAAM,SAAN,GAAA,iBAAA,CAAM,SAAN;AAAA,MAAM,WAAN,GAAA,iBAAA,CAAM,WAAN;AAAA,8BAAA,iBAAA,CASEK,WATF;AAAA,MASEA,WATF,sCAAM,QAAN;AAAA,MAAM,IAAN,GAAA,iBAAA,CAAM,IAAN;AAAA,MAAM,OAAN,GAAA,iBAAA,CAAM,OAAN;AAAA,8BAAA,iBAAA,CAYEC,gBAZF;AAAA,MAYEA,gBAZF,sCAAM,OAAN;AAAA,MAAM,SAAN,GAAA,iBAAA,CAAM,SAAN;AAAA,MAcEC,EAdF,GAAA,iBAAA,CAcEA,EAdF;AAAA,MAAA,IAAA,GAAA,6BAAA,CAAA,iBAAA,EAAA,CAAA,YAAA,EAAA,WAAA,EAAA,UAAA,EAAA,aAAA,EAAA,UAAA,EAAA,UAAA,EAAA,WAAA,EAAA,aAAA,EAAA,aAAA,EAAA,MAAA,EAAA,SAAA,EAAA,kBAAA,EAAA,WAAA,EAAA,IAAA,CAAA,CAAA;AAkBA;AACF;AACA;AACA;AACA;AACA;;;AACE,MAAME,MAAM,GAAGC,SAAS,CAAA,EAAA,EAAA,CAAA,cAAA,GAAKR,MAAL,IAAA,IAAKA,GAAL,KAAA,CAAKA,GAAAA,MAAM,CAAX,QAAW,CAAX,KAAA,IAAA,GAAA,cAAA,GAAA,EAAA,EAA+B;AAAES,IAAAA,MAAM,EAAE;AAAV,GAA/B,CAAxB;;AAEA,MAAMC,YAA+B,GAAA,QAAA,CAAA;AACnCC,IAAAA,OAAO,EAD4B,aAAA;AAEnCC,IAAAA,UAAU,EAFyB,MAAA;AAGnCC,IAAAA,UAAU,EAHyB,QAAA;AAInCC,IAAAA,cAAc,EAJqB,QAAA;AAKnCC,IAAAA,UAAU,EALyB,WAAA;AAMnCC,IAAAA,UAAU,EANyB,MAAA;AAOnCC,IAAAA,QAAQ,EAP2B,UAAA;AAQnCC,IAAAA,UAAU,EARyB,QAAA;AASnCC,IAAAA,aAAa,EATsB,QAAA;AAUnCC,IAAAA,OAAO,EAV4B,MAAA;AAWnCC,IAAAA,KAAK,EAAEC,WAAW,GAAA,MAAA,GAAY;AAXK,GAAA,EAAA,MAAA,EAa/B,CAAC,CAAD,KAAA,IAAW;AAAEf,IAAAA,MAAAA,EAAAA;AAAF,GAboB,CAArC;;AAgBA,wBAAgCgB,KAAK,CAALA,QAAAA,CAAe,CAA/C,EAAgCA,CAAhC;AAAA;AAAA,MAAM,QAAN;AAAA,MAAM,WAAN;;AACA,MAAMC,WAAW,GAAG,KAAK,CAAL,WAAA,CAAmBC,UAAAA,IAAD,EAA8B;AAClE,QAAI,CAAJ,IAAA,EAAW;AACXC,IAAAA,WAAW,CAACD,IAAI,CAAJA,OAAAA,KAAZC,QAAW,CAAXA;AAFkB,GAAA,EAApB,EAAoB,CAApB;AAIA,MAAMC,WAAW,GAAGC,QAAQ,GAAA,QAAA,GAA5B,SAAA;AAEA,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,MAAA,EAAA,QAAA,CAAA;AACE,IAAA,QAAQ,EAAE1B,UAAU,IADtB,SAAA;AAEE,IAAA,GAAG,EAAE2B,SAAS,CAAA,GAAA,EAFhB,WAEgB,CAFhB;AAGE,IAAA,EAAE,EAHJ,EAAA;AAIE,IAAA,IAAI,EAAEC,IAAF,IAAA,IAAEA,GAAF,IAAEA,GAJR,WAAA;AAKE,mBAAaC,QAAQ,CALvB,QAKuB,CALvB;AAME,oBAAcA,QAAQ,CANxB,SAMwB,CANxB;AAOE,IAAA,KAAK,EAPP,YAAA;AAQE,IAAA,SAAS,EAAEC,EAAE,CAAA,eAAA,EAAA,SAAA;AARf,GAAA,EAAA,IAAA,CAAA,EAWGC,QAAQ,IAAI,CAAZA,SAAAA,IAAAA,aACC,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AAAY,IAAA,SAAS,EAAE9B;AAAvB,GAAA,EAZJ,QAYI,CAZJ,EAcG+B,SAAS,IAAI9B,gBAAgB,KAA7B8B,OAAAA,IAAAA,aACC,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AAAe,IAAA,KAAK,EAApB,WAAA;AAAmC,IAAA,SAAS,EAAC;AAA7C,GAAA,EAfJ,OAeI,CAfJ,EAmBGA,SAAS,GACNC,WAAW,IAAA,aAAI,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,IAAA,EAAA;AAAa,IAAA,OAAO,EAAE;AAAtB,GAAA,EADT,QACS,CADT,GAnBZ,QAAA,EAsBGD,SAAS,IAAI9B,gBAAgB,KAA7B8B,KAAAA,IAAAA,aACC,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AAAe,IAAA,KAAK,EAApB,WAAA;AAAmC,IAAA,SAAS,EAAC;AAA7C,GAAA,EAvBJ,OAuBI,CAvBJ,EA2BGE,SAAS,IAAI,CAAbA,SAAAA,IAAAA,aACC,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AAAY,IAAA,WAAW,EAAEjC;AAAzB,GAAA,EA7BN,SA6BM,CA5BJ,CADF;AArDK,CAAyB,CAAzB;;AAwFP,IAAA,OAAA,EAAa;AACXP,EAAAA,MAAM,CAANA,WAAAA,GAAAA,QAAAA;AACD;;AAED,IAAMyC,UAA6C,GAAIC,SAAjDD,UAAiDC,CAAAA,KAAD,EAAW;AAC/D,MAAM,QAAN,GAAA,KAAA,CAAM,QAAN;AAAA,MAAkBC,SAAlB,GAAA,KAAA,CAAkBA,SAAlB;AAAA,MAAA,IAAA,GAAA,6BAAA,CAAA,KAAA,EAAA,CAAA,UAAA,EAAA,WAAA,CAAA,CAAA;;AAEA,MAAMC,SAAS,GAAG,aAAA,KAAK,CAAL,cAAA,CAAA,QAAA,IAAA,aACd,KAAK,CAAL,YAAA,CAAA,QAAA,EAA6B;AAC3B,mBAD2B,IAAA;AAE3BC,IAAAA,SAAS,EAAE;AAFgB,GAA7B,CADc,GAAlB,QAAA;;AAOA,MAAMC,UAAU,GAAGV,EAAE,CAAA,qBAAA,EAArB,SAAqB,CAArB;;AAEA,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,IAAA,EAAA,QAAA,CAAA;AACE,IAAA,OAAO,EADT,aAAA;AAEE,IAAA,SAAS,EAFX,QAAA;AAGE,IAAA,UAAU,EAAE;AAHd,GAAA,EAAA,IAAA,EAAA;AAKE,IAAA,SAAS,EAAEU;AALb,GAAA,CAAA,EADF,SACE,CADF;AAZF,CAAA;;AAyBA,IAAA,OAAA,EAAa;AACXL,EAAAA,UAAU,CAAVA,WAAAA,GAAAA,YAAAA;AACD;;AAWD,IAAMM,aAA2C,GAAIL,SAA/CK,aAA+CL,CAAAA,KAAD,EAAW;AAAA;;AAC7D,MAAM,KAAN,GAAA,KAAA,CAAM,KAAN;AAAA,MAAM,SAAN,GAAA,KAAA,CAAM,SAAN;AAAA,wBAAA,KAAA,CAIEM,QAJF;AAAA,MAIEA,QAJF,gCAIU,aAAG,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AAAS,IAAA,KAAK,EAAd,cAAA;AAA8B,IAAA,KAAK,EAAnC,KAAA;AAA0C,IAAA,MAAM,EAAC;AAAjD,GAAA,CAJb;AAAA,MAAM,SAAN,GAAA,KAAA,CAAM,SAAN;AAAA,MAMEC,KANF,GAAA,KAAA,CAMEA,KANF;AAAA,MAAA,IAAA,GAAA,6BAAA,CAAA,KAAA,EAAA,CAAA,OAAA,EAAA,WAAA,EAAA,SAAA,EAAA,UAAA,EAAA,WAAA,EAAA,OAAA,CAAA,CAAA;;AAUA,MAAMH,UAAU,GAAGV,EAAE,CAAA,wBAAA,EAArB,SAAqB,CAArB;;AAEA,MAAMc,UAAU,GAAGC,SAAS,KAATA,OAAAA,GAAAA,WAAAA,GAAnB,aAAA;;AAEA,MAAMC,aAAgC,GAAA,QAAA;AACpCrC,IAAAA,OAAO,EAD6B,MAAA;AAEpCE,IAAAA,UAAU,EAF0B,QAAA;AAGpCI,IAAAA,QAAQ,EAAEgC,KAAK,GAAA,UAAA,GAHqB;AAAA,gCAIpC,UAJoC,EAItBA,KAAK,GAAA,QAAA,GAJiB,CAAA,0CAAA,KAAA,4CAMxB,QANwB,eAAtC,KAAsC,CAAtC;;AAUA,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,GAAA,EAAA,QAAA,CAAA;AAAY,IAAA,SAAS,EAAEP;AAAvB,GAAA,EAAA,IAAA,EAAA;AAA6C,IAAA,KAAK,EAAEM;AAApD,GAAA,CAAA,EADF,QACE,CADF;AAzBF,CAAA;;AAgCA,IAAA,OAAA,EAAa;AACXL,EAAAA,aAAa,CAAbA,WAAAA,GAAAA,eAAAA;AACD","sourcesContent":["import { mergeRefs } from \"@chakra-ui/react-utils\"\nimport { Spinner } from \"@chakra-ui/spinner\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr, mergeWith, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useButtonGroup } from \"./button-group\"\n\nexport interface ButtonOptions {\n  /**\n   * If `true`, the button will show a spinner.\n   */\n  isLoading?: boolean\n  /**\n   * If `true`, the button will be styled in its active state.\n   */\n  isActive?: boolean\n  /**\n   * If `true`, the button will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * The label to show in the button when `isLoading` is true\n   * If no text is passed, it only shows the spinner\n   */\n  loadingText?: string\n  /**\n   * If `true`, the button will take up the full width of its container.\n   */\n  isFullWidth?: boolean\n  /**\n   * The html button type to use.\n   */\n  type?: \"button\" | \"reset\" | \"submit\"\n  /**\n   * If added, the button will show an icon before the button's label.\n   * @type React.ReactElement\n   */\n  leftIcon?: React.ReactElement\n  /**\n   * If added, the button will show an icon after the button's label.\n   * @type React.ReactElement\n   */\n  rightIcon?: React.ReactElement\n  /**\n   * The space between the button icon and label.\n   * @type SystemProps[\"marginRight\"]\n   */\n  iconSpacing?: SystemProps[\"marginRight\"]\n  /**\n   * Replace the spinner component when `isLoading` is set to `true`\n   * @type React.ReactElement\n   */\n  spinner?: React.ReactElement\n  /**\n   * It determines the placement of the spinner when isLoading is true\n   * @default \"start\"\n   */\n  spinnerPlacement?: \"start\" | \"end\"\n}\n\nexport interface ButtonProps\n  extends HTMLChakraProps<\"button\">,\n    ButtonOptions,\n    ThemingProps<\"Button\"> {}\n\nexport const Button = forwardRef<ButtonProps, \"button\">((props, ref) => {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    isFullWidth,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const _focus = mergeWith({}, styles?.[\"_focus\"] ?? {}, { zIndex: 1 })\n\n  const buttonStyles: SystemStyleObject = {\n    display: \"inline-flex\",\n    appearance: \"none\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    transition: \"all 250ms\",\n    userSelect: \"none\",\n    position: \"relative\",\n    whiteSpace: \"nowrap\",\n    verticalAlign: \"middle\",\n    outline: \"none\",\n    width: isFullWidth ? \"100%\" : \"auto\",\n    ...styles,\n    ...(!!group && { _focus }),\n  }\n\n  const [isButton, setIsButton] = React.useState(!as)\n  const refCallback = React.useCallback((node: HTMLElement | null) => {\n    if (!node) return\n    setIsButton(node.tagName === \"BUTTON\")\n  }, [])\n  const defaultType = isButton ? \"button\" : undefined\n\n  return (\n    <chakra.button\n      disabled={isDisabled || isLoading}\n      ref={mergeRefs(ref, refCallback)}\n      as={as}\n      type={type ?? defaultType}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n    >\n      {leftIcon && !isLoading && (\n        <ButtonIcon marginEnd={iconSpacing}>{leftIcon}</ButtonIcon>\n      )}\n      {isLoading && spinnerPlacement === \"start\" && (\n        <ButtonSpinner label={loadingText} placement=\"start\">\n          {spinner}\n        </ButtonSpinner>\n      )}\n      {isLoading\n        ? loadingText || <chakra.span opacity={0}>{children}</chakra.span>\n        : children}\n      {isLoading && spinnerPlacement === \"end\" && (\n        <ButtonSpinner label={loadingText} placement=\"end\">\n          {spinner}\n        </ButtonSpinner>\n      )}\n      {rightIcon && !isLoading && (\n        <ButtonIcon marginStart={iconSpacing}>{rightIcon}</ButtonIcon>\n      )}\n    </chakra.button>\n  )\n})\n\nif (__DEV__) {\n  Button.displayName = \"Button\"\n}\n\nconst ButtonIcon: React.FC<HTMLChakraProps<\"span\">> = (props) => {\n  const { children, className, ...rest } = props\n\n  const _children = React.isValidElement(children)\n    ? React.cloneElement(children, {\n        \"aria-hidden\": true,\n        focusable: false,\n      })\n    : children\n\n  const _className = cx(\"chakra-button__icon\", className)\n\n  return (\n    <chakra.span\n      display=\"inline-flex\"\n      alignSelf=\"center\"\n      flexShrink={0}\n      {...rest}\n      className={_className}\n    >\n      {_children}\n    </chakra.span>\n  )\n}\n\nif (__DEV__) {\n  ButtonIcon.displayName = \"ButtonIcon\"\n}\n\ninterface ButtonSpinnerProps extends HTMLChakraProps<\"div\"> {\n  label?: string\n  /**\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  placement?: \"start\" | \"end\"\n}\n\nconst ButtonSpinner: React.FC<ButtonSpinnerProps> = (props) => {\n  const {\n    label,\n    placement,\n    spacing,\n    children = <Spinner color=\"currentColor\" width=\"1em\" height=\"1em\" />,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__spinner\", className)\n\n  const marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\"\n\n  const spinnerStyles: SystemStyleObject = {\n    display: \"flex\",\n    alignItems: \"center\",\n    position: label ? \"relative\" : \"absolute\",\n    [marginProp]: label ? \"0.5rem\" : 0,\n    fontSize: \"1em\",\n    lineHeight: \"normal\",\n    ...__css,\n  }\n\n  return (\n    <chakra.div className={_className} {...rest} __css={spinnerStyles}>\n      {children}\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  ButtonSpinner.displayName = \"ButtonSpinner\"\n}\n"]},"metadata":{},"sourceType":"module"}