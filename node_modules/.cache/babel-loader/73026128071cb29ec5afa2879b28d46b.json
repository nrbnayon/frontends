{"ast":null,"code":"/* global attachEvent */\nconst XMLHttpRequest = require(\"../../contrib/xmlhttprequest-ssl/XMLHttpRequest\");\n\nconst Polling = require(\"./polling\");\n\nconst Emitter = require(\"component-emitter\");\n\nconst {\n  pick\n} = require(\"../util\");\n\nconst globalThis = require(\"../globalThis\");\n\nconst debug = require(\"debug\")(\"engine.io-client:polling-xhr\");\n/**\r\n * Empty function\r\n */\n\n\nfunction empty() {}\n\nconst hasXHR2 = function () {\n  const xhr = new XMLHttpRequest({\n    xdomain: false\n  });\n  return null != xhr.responseType;\n}();\n\nclass XHR extends Polling {\n  /**\r\n   * XHR Polling constructor.\r\n   *\r\n   * @param {Object} opts\r\n   * @api public\r\n   */\n  constructor(opts) {\n    super(opts);\n\n    if (typeof location !== \"undefined\") {\n      const isSSL = \"https:\" === location.protocol;\n      let port = location.port; // some user agents have empty `location.port`\n\n      if (!port) {\n        port = isSSL ? 443 : 80;\n      }\n\n      this.xd = typeof location !== \"undefined\" && opts.hostname !== location.hostname || port !== opts.port;\n      this.xs = opts.secure !== isSSL;\n    }\n    /**\r\n     * XHR supports binary\r\n     */\n\n\n    const forceBase64 = opts && opts.forceBase64;\n    this.supportsBinary = hasXHR2 && !forceBase64;\n  }\n  /**\r\n   * Creates a request.\r\n   *\r\n   * @param {String} method\r\n   * @api private\r\n   */\n\n\n  request(opts = {}) {\n    Object.assign(opts, {\n      xd: this.xd,\n      xs: this.xs\n    }, this.opts);\n    return new Request(this.uri(), opts);\n  }\n  /**\r\n   * Sends data.\r\n   *\r\n   * @param {String} data to send.\r\n   * @param {Function} called upon flush.\r\n   * @api private\r\n   */\n\n\n  doWrite(data, fn) {\n    const req = this.request({\n      method: \"POST\",\n      data: data\n    });\n    req.on(\"success\", fn);\n    req.on(\"error\", err => {\n      this.onError(\"xhr post error\", err);\n    });\n  }\n  /**\r\n   * Starts a poll cycle.\r\n   *\r\n   * @api private\r\n   */\n\n\n  doPoll() {\n    debug(\"xhr poll\");\n    const req = this.request();\n    req.on(\"data\", this.onData.bind(this));\n    req.on(\"error\", err => {\n      this.onError(\"xhr poll error\", err);\n    });\n    this.pollXhr = req;\n  }\n\n}\n\nclass Request extends Emitter {\n  /**\r\n   * Request constructor\r\n   *\r\n   * @param {Object} options\r\n   * @api public\r\n   */\n  constructor(uri, opts) {\n    super();\n    this.opts = opts;\n    this.method = opts.method || \"GET\";\n    this.uri = uri;\n    this.async = false !== opts.async;\n    this.data = undefined !== opts.data ? opts.data : null;\n    this.create();\n  }\n  /**\r\n   * Creates the XHR object and sends the request.\r\n   *\r\n   * @api private\r\n   */\n\n\n  create() {\n    const opts = pick(this.opts, \"agent\", \"enablesXDR\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"autoUnref\");\n    opts.xdomain = !!this.opts.xd;\n    opts.xscheme = !!this.opts.xs;\n    const xhr = this.xhr = new XMLHttpRequest(opts);\n\n    try {\n      debug(\"xhr open %s: %s\", this.method, this.uri);\n      xhr.open(this.method, this.uri, this.async);\n\n      try {\n        if (this.opts.extraHeaders) {\n          xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n\n          for (let i in this.opts.extraHeaders) {\n            if (this.opts.extraHeaders.hasOwnProperty(i)) {\n              xhr.setRequestHeader(i, this.opts.extraHeaders[i]);\n            }\n          }\n        }\n      } catch (e) {}\n\n      if (\"POST\" === this.method) {\n        try {\n          xhr.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\n        } catch (e) {}\n      }\n\n      try {\n        xhr.setRequestHeader(\"Accept\", \"*/*\");\n      } catch (e) {} // ie6 check\n\n\n      if (\"withCredentials\" in xhr) {\n        xhr.withCredentials = this.opts.withCredentials;\n      }\n\n      if (this.opts.requestTimeout) {\n        xhr.timeout = this.opts.requestTimeout;\n      }\n\n      if (this.hasXDR()) {\n        xhr.onload = () => {\n          this.onLoad();\n        };\n\n        xhr.onerror = () => {\n          this.onError(xhr.responseText);\n        };\n      } else {\n        xhr.onreadystatechange = () => {\n          if (4 !== xhr.readyState) return;\n\n          if (200 === xhr.status || 1223 === xhr.status) {\n            this.onLoad();\n          } else {\n            // make sure the `error` event handler that's user-set\n            // does not throw in the same tick and gets caught here\n            setTimeout(() => {\n              this.onError(typeof xhr.status === \"number\" ? xhr.status : 0);\n            }, 0);\n          }\n        };\n      }\n\n      debug(\"xhr data %s\", this.data);\n      xhr.send(this.data);\n    } catch (e) {\n      // Need to defer since .create() is called directly from the constructor\n      // and thus the 'error' event can only be only bound *after* this exception\n      // occurs.  Therefore, also, we cannot throw here at all.\n      setTimeout(() => {\n        this.onError(e);\n      }, 0);\n      return;\n    }\n\n    if (typeof document !== \"undefined\") {\n      this.index = Request.requestsCount++;\n      Request.requests[this.index] = this;\n    }\n  }\n  /**\r\n   * Called upon successful response.\r\n   *\r\n   * @api private\r\n   */\n\n\n  onSuccess() {\n    this.emit(\"success\");\n    this.cleanup();\n  }\n  /**\r\n   * Called if we have data.\r\n   *\r\n   * @api private\r\n   */\n\n\n  onData(data) {\n    this.emit(\"data\", data);\n    this.onSuccess();\n  }\n  /**\r\n   * Called upon error.\r\n   *\r\n   * @api private\r\n   */\n\n\n  onError(err) {\n    this.emit(\"error\", err);\n    this.cleanup(true);\n  }\n  /**\r\n   * Cleans up house.\r\n   *\r\n   * @api private\r\n   */\n\n\n  cleanup(fromError) {\n    if (\"undefined\" === typeof this.xhr || null === this.xhr) {\n      return;\n    } // xmlhttprequest\n\n\n    if (this.hasXDR()) {\n      this.xhr.onload = this.xhr.onerror = empty;\n    } else {\n      this.xhr.onreadystatechange = empty;\n    }\n\n    if (fromError) {\n      try {\n        this.xhr.abort();\n      } catch (e) {}\n    }\n\n    if (typeof document !== \"undefined\") {\n      delete Request.requests[this.index];\n    }\n\n    this.xhr = null;\n  }\n  /**\r\n   * Called upon load.\r\n   *\r\n   * @api private\r\n   */\n\n\n  onLoad() {\n    const data = this.xhr.responseText;\n\n    if (data !== null) {\n      this.onData(data);\n    }\n  }\n  /**\r\n   * Check if it has XDomainRequest.\r\n   *\r\n   * @api private\r\n   */\n\n\n  hasXDR() {\n    return typeof XDomainRequest !== \"undefined\" && !this.xs && this.enablesXDR;\n  }\n  /**\r\n   * Aborts the request.\r\n   *\r\n   * @api public\r\n   */\n\n\n  abort() {\n    this.cleanup();\n  }\n\n}\n/**\r\n * Aborts pending requests when unloading the window. This is needed to prevent\r\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\r\n * emitted.\r\n */\n\n\nRequest.requestsCount = 0;\nRequest.requests = {};\n\nif (typeof document !== \"undefined\") {\n  if (typeof attachEvent === \"function\") {\n    attachEvent(\"onunload\", unloadHandler);\n  } else if (typeof addEventListener === \"function\") {\n    const terminationEvent = \"onpagehide\" in globalThis ? \"pagehide\" : \"unload\";\n    addEventListener(terminationEvent, unloadHandler, false);\n  }\n}\n\nfunction unloadHandler() {\n  for (let i in Request.requests) {\n    if (Request.requests.hasOwnProperty(i)) {\n      Request.requests[i].abort();\n    }\n  }\n}\n\nmodule.exports = XHR;\nmodule.exports.Request = Request;","map":{"version":3,"sources":["E:/Project File/Chatters-a-mern-app/frontend/node_modules/engine.io-client/lib/transports/polling-xhr.js"],"names":["XMLHttpRequest","require","Polling","Emitter","pick","globalThis","debug","empty","hasXHR2","xhr","xdomain","responseType","XHR","constructor","opts","location","isSSL","protocol","port","xd","hostname","xs","secure","forceBase64","supportsBinary","request","Object","assign","Request","uri","doWrite","data","fn","req","method","on","err","onError","doPoll","onData","bind","pollXhr","async","undefined","create","xscheme","open","extraHeaders","setDisableHeaderCheck","i","hasOwnProperty","setRequestHeader","e","withCredentials","requestTimeout","timeout","hasXDR","onload","onLoad","onerror","responseText","onreadystatechange","readyState","status","setTimeout","send","document","index","requestsCount","requests","onSuccess","emit","cleanup","fromError","abort","XDomainRequest","enablesXDR","attachEvent","unloadHandler","addEventListener","terminationEvent","module","exports"],"mappings":"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","sourcesContent":["/* global attachEvent */\r\n\r\nconst XMLHttpRequest = require(\"../../contrib/xmlhttprequest-ssl/XMLHttpRequest\");\r\nconst Polling = require(\"./polling\");\r\nconst Emitter = require(\"component-emitter\");\r\nconst { pick } = require(\"../util\");\r\nconst globalThis = require(\"../globalThis\");\r\n\r\nconst debug = require(\"debug\")(\"engine.io-client:polling-xhr\");\r\n\r\n/**\r\n * Empty function\r\n */\r\n\r\nfunction empty() {}\r\n\r\nconst hasXHR2 = (function() {\r\n  const xhr = new XMLHttpRequest({ xdomain: false });\r\n  return null != xhr.responseType;\r\n})();\r\n\r\nclass XHR extends Polling {\r\n  /**\r\n   * XHR Polling constructor.\r\n   *\r\n   * @param {Object} opts\r\n   * @api public\r\n   */\r\n  constructor(opts) {\r\n    super(opts);\r\n\r\n    if (typeof location !== \"undefined\") {\r\n      const isSSL = \"https:\" === location.protocol;\r\n      let port = location.port;\r\n\r\n      // some user agents have empty `location.port`\r\n      if (!port) {\r\n        port = isSSL ? 443 : 80;\r\n      }\r\n\r\n      this.xd =\r\n        (typeof location !== \"undefined\" &&\r\n          opts.hostname !== location.hostname) ||\r\n        port !== opts.port;\r\n      this.xs = opts.secure !== isSSL;\r\n    }\r\n    /**\r\n     * XHR supports binary\r\n     */\r\n    const forceBase64 = opts && opts.forceBase64;\r\n    this.supportsBinary = hasXHR2 && !forceBase64;\r\n  }\r\n\r\n  /**\r\n   * Creates a request.\r\n   *\r\n   * @param {String} method\r\n   * @api private\r\n   */\r\n  request(opts = {}) {\r\n    Object.assign(opts, { xd: this.xd, xs: this.xs }, this.opts);\r\n    return new Request(this.uri(), opts);\r\n  }\r\n\r\n  /**\r\n   * Sends data.\r\n   *\r\n   * @param {String} data to send.\r\n   * @param {Function} called upon flush.\r\n   * @api private\r\n   */\r\n  doWrite(data, fn) {\r\n    const req = this.request({\r\n      method: \"POST\",\r\n      data: data\r\n    });\r\n    req.on(\"success\", fn);\r\n    req.on(\"error\", err => {\r\n      this.onError(\"xhr post error\", err);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Starts a poll cycle.\r\n   *\r\n   * @api private\r\n   */\r\n  doPoll() {\r\n    debug(\"xhr poll\");\r\n    const req = this.request();\r\n    req.on(\"data\", this.onData.bind(this));\r\n    req.on(\"error\", err => {\r\n      this.onError(\"xhr poll error\", err);\r\n    });\r\n    this.pollXhr = req;\r\n  }\r\n}\r\n\r\nclass Request extends Emitter {\r\n  /**\r\n   * Request constructor\r\n   *\r\n   * @param {Object} options\r\n   * @api public\r\n   */\r\n  constructor(uri, opts) {\r\n    super();\r\n    this.opts = opts;\r\n\r\n    this.method = opts.method || \"GET\";\r\n    this.uri = uri;\r\n    this.async = false !== opts.async;\r\n    this.data = undefined !== opts.data ? opts.data : null;\r\n\r\n    this.create();\r\n  }\r\n\r\n  /**\r\n   * Creates the XHR object and sends the request.\r\n   *\r\n   * @api private\r\n   */\r\n  create() {\r\n    const opts = pick(\r\n      this.opts,\r\n      \"agent\",\r\n      \"enablesXDR\",\r\n      \"pfx\",\r\n      \"key\",\r\n      \"passphrase\",\r\n      \"cert\",\r\n      \"ca\",\r\n      \"ciphers\",\r\n      \"rejectUnauthorized\",\r\n      \"autoUnref\"\r\n    );\r\n    opts.xdomain = !!this.opts.xd;\r\n    opts.xscheme = !!this.opts.xs;\r\n\r\n    const xhr = (this.xhr = new XMLHttpRequest(opts));\r\n\r\n    try {\r\n      debug(\"xhr open %s: %s\", this.method, this.uri);\r\n      xhr.open(this.method, this.uri, this.async);\r\n      try {\r\n        if (this.opts.extraHeaders) {\r\n          xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\r\n          for (let i in this.opts.extraHeaders) {\r\n            if (this.opts.extraHeaders.hasOwnProperty(i)) {\r\n              xhr.setRequestHeader(i, this.opts.extraHeaders[i]);\r\n            }\r\n          }\r\n        }\r\n      } catch (e) {}\r\n\r\n      if (\"POST\" === this.method) {\r\n        try {\r\n          xhr.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\r\n        } catch (e) {}\r\n      }\r\n\r\n      try {\r\n        xhr.setRequestHeader(\"Accept\", \"*/*\");\r\n      } catch (e) {}\r\n\r\n      // ie6 check\r\n      if (\"withCredentials\" in xhr) {\r\n        xhr.withCredentials = this.opts.withCredentials;\r\n      }\r\n\r\n      if (this.opts.requestTimeout) {\r\n        xhr.timeout = this.opts.requestTimeout;\r\n      }\r\n\r\n      if (this.hasXDR()) {\r\n        xhr.onload = () => {\r\n          this.onLoad();\r\n        };\r\n        xhr.onerror = () => {\r\n          this.onError(xhr.responseText);\r\n        };\r\n      } else {\r\n        xhr.onreadystatechange = () => {\r\n          if (4 !== xhr.readyState) return;\r\n          if (200 === xhr.status || 1223 === xhr.status) {\r\n            this.onLoad();\r\n          } else {\r\n            // make sure the `error` event handler that's user-set\r\n            // does not throw in the same tick and gets caught here\r\n            setTimeout(() => {\r\n              this.onError(typeof xhr.status === \"number\" ? xhr.status : 0);\r\n            }, 0);\r\n          }\r\n        };\r\n      }\r\n\r\n      debug(\"xhr data %s\", this.data);\r\n      xhr.send(this.data);\r\n    } catch (e) {\r\n      // Need to defer since .create() is called directly from the constructor\r\n      // and thus the 'error' event can only be only bound *after* this exception\r\n      // occurs.  Therefore, also, we cannot throw here at all.\r\n      setTimeout(() => {\r\n        this.onError(e);\r\n      }, 0);\r\n      return;\r\n    }\r\n\r\n    if (typeof document !== \"undefined\") {\r\n      this.index = Request.requestsCount++;\r\n      Request.requests[this.index] = this;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called upon successful response.\r\n   *\r\n   * @api private\r\n   */\r\n  onSuccess() {\r\n    this.emit(\"success\");\r\n    this.cleanup();\r\n  }\r\n\r\n  /**\r\n   * Called if we have data.\r\n   *\r\n   * @api private\r\n   */\r\n  onData(data) {\r\n    this.emit(\"data\", data);\r\n    this.onSuccess();\r\n  }\r\n\r\n  /**\r\n   * Called upon error.\r\n   *\r\n   * @api private\r\n   */\r\n  onError(err) {\r\n    this.emit(\"error\", err);\r\n    this.cleanup(true);\r\n  }\r\n\r\n  /**\r\n   * Cleans up house.\r\n   *\r\n   * @api private\r\n   */\r\n  cleanup(fromError) {\r\n    if (\"undefined\" === typeof this.xhr || null === this.xhr) {\r\n      return;\r\n    }\r\n    // xmlhttprequest\r\n    if (this.hasXDR()) {\r\n      this.xhr.onload = this.xhr.onerror = empty;\r\n    } else {\r\n      this.xhr.onreadystatechange = empty;\r\n    }\r\n\r\n    if (fromError) {\r\n      try {\r\n        this.xhr.abort();\r\n      } catch (e) {}\r\n    }\r\n\r\n    if (typeof document !== \"undefined\") {\r\n      delete Request.requests[this.index];\r\n    }\r\n\r\n    this.xhr = null;\r\n  }\r\n\r\n  /**\r\n   * Called upon load.\r\n   *\r\n   * @api private\r\n   */\r\n  onLoad() {\r\n    const data = this.xhr.responseText;\r\n    if (data !== null) {\r\n      this.onData(data);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if it has XDomainRequest.\r\n   *\r\n   * @api private\r\n   */\r\n  hasXDR() {\r\n    return typeof XDomainRequest !== \"undefined\" && !this.xs && this.enablesXDR;\r\n  }\r\n\r\n  /**\r\n   * Aborts the request.\r\n   *\r\n   * @api public\r\n   */\r\n  abort() {\r\n    this.cleanup();\r\n  }\r\n}\r\n\r\n/**\r\n * Aborts pending requests when unloading the window. This is needed to prevent\r\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\r\n * emitted.\r\n */\r\n\r\nRequest.requestsCount = 0;\r\nRequest.requests = {};\r\n\r\nif (typeof document !== \"undefined\") {\r\n  if (typeof attachEvent === \"function\") {\r\n    attachEvent(\"onunload\", unloadHandler);\r\n  } else if (typeof addEventListener === \"function\") {\r\n    const terminationEvent = \"onpagehide\" in globalThis ? \"pagehide\" : \"unload\";\r\n    addEventListener(terminationEvent, unloadHandler, false);\r\n  }\r\n}\r\n\r\nfunction unloadHandler() {\r\n  for (let i in Request.requests) {\r\n    if (Request.requests.hasOwnProperty(i)) {\r\n      Request.requests[i].abort();\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = XHR;\r\nmodule.exports.Request = Request;\r\n"]},"metadata":{},"sourceType":"script"}