{"ast":null,"code":"import { runIfFn } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useCallbackRef } from \"./use-callback-ref\";\n\n/**\r\n * React hook to manage browser event listeners\r\n *\r\n * @param event the event name\r\n * @param handler the event handler function to execute\r\n * @param doc the dom environment to execute against (defaults to `document`)\r\n * @param options the event listener options\r\n *\r\n * @internal\r\n */\nexport function useEventListener(event, handler, env, options) {\n  var listener = useCallbackRef(handler);\n  React.useEffect(() => {\n    var _runIfFn;\n    var node = (_runIfFn = runIfFn(env)) != null ? _runIfFn : document;\n    node.addEventListener(event, listener, options);\n    return () => {\n      node.removeEventListener(event, listener, options);\n    };\n  }, [event, env, options, listener]);\n  return () => {\n    var _runIfFn2;\n    var node = (_runIfFn2 = runIfFn(env)) != null ? _runIfFn2 : document;\n    node.removeEventListener(event, listener, options);\n  };\n}","map":{"version":3,"names":["runIfFn","React","useCallbackRef","useEventListener","event","handler","env","options","listener","useEffect","_runIfFn","node","document","addEventListener","removeEventListener","_runIfFn2"],"sources":["../../src/use-event-listener.ts"],"sourcesContent":["import { runIfFn } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useCallbackRef } from \"./use-callback-ref\"\n\ntype DocumentOrElement = Document | HTMLElement | null\n\nexport type EventListenerEnv = (() => DocumentOrElement) | DocumentOrElement\n\n/**\n * React hook to manage browser event listeners\n *\n * @param event the event name\n * @param handler the event handler function to execute\n * @param doc the dom environment to execute against (defaults to `document`)\n * @param options the event listener options\n *\n * @internal\n */\nexport function useEventListener<K extends keyof DocumentEventMap>(\n  event: K | (string & {}),\n  handler: (event: DocumentEventMap[K]) => void,\n  env?: EventListenerEnv,\n  options?: boolean | AddEventListenerOptions,\n) {\n  const listener = useCallbackRef(handler) as EventListener\n\n  React.useEffect(() => {\n    const node = runIfFn(env) ?? document\n\n    node.addEventListener(event, listener, options)\n    return () => {\n      node.removeEventListener(event, listener, options)\n    }\n  }, [event, env, options, listener])\n\n  return () => {\n    const node = runIfFn(env) ?? document\n    node.removeEventListener(event, listener, options)\n  }\n}\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,kBAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,QAA+B,oBAA/B;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAATA,CACLC,KADK,EAELC,OAFK,EAGLC,GAHK,EAILC,OAJK,EAKL;EACA,IAAMC,QAAQ,GAAGN,cAAc,CAACG,OAAD,CAA/B;EAEAJ,KAAK,CAACQ,SAAN,CAAgB,MAAM;IAAA,IAAAC,QAAA;IACpB,IAAMC,IAAI,IAAAD,QAAA,GAAGV,OAAO,CAACM,GAAD,CAAV,YAAAI,QAAA,GAAmBE,QAA7B;IAEAD,IAAI,CAACE,gBAAL,CAAsBT,KAAtB,EAA6BI,QAA7B,EAAuCD,OAAvC;IACA,OAAO,MAAM;MACXI,IAAI,CAACG,mBAAL,CAAyBV,KAAzB,EAAgCI,QAAhC,EAA0CD,OAA1C;IACD,CAFD;EAGD,CAPD,EAOG,CAACH,KAAD,EAAQE,GAAR,EAAaC,OAAb,EAAsBC,QAAtB,CAPH;EASA,OAAO,MAAM;IAAA,IAAAO,SAAA;IACX,IAAMJ,IAAI,IAAAI,SAAA,GAAGf,OAAO,CAACM,GAAD,CAAV,YAAAS,SAAA,GAAmBH,QAA7B;IACAD,IAAI,CAACG,mBAAL,CAAyBV,KAAzB,EAAgCI,QAAhC,EAA0CD,OAA1C;EACD,CAHD;AAID"},"metadata":{},"sourceType":"module"}