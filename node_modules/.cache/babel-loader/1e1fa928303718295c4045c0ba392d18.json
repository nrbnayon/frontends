{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { useColorMode } from \"@chakra-ui/color-mode\";\nimport { filterUndefined, memoizedGet as get, mergeWith, runIfFn } from \"@chakra-ui/utils\";\nimport { useMemo, useRef } from \"react\";\nimport isEqual from \"react-fast-compare\";\nimport { useTheme } from \"./providers\";\nimport { omitThemingProps } from \"./system.utils\";\nexport function useChakra() {\n  var colorModeResult = useColorMode();\n  var theme = useTheme();\n  return _extends({}, colorModeResult, {\n    theme\n  });\n}\nexport function useToken(scale, token, fallback) {\n  var theme = useTheme();\n  if (Array.isArray(token)) {\n    var fallbackArr = [];\n    if (fallback) {\n      fallbackArr = Array.isArray(fallback) ? fallback : [fallback];\n    }\n    return token.map((token, index) => {\n      var _fallbackArr$index;\n      var path = scale + \".\" + token;\n      return get(theme, path, (_fallbackArr$index = fallbackArr[index]) != null ? _fallbackArr$index : token);\n    });\n  }\n  var path = scale + \".\" + token;\n  return get(theme, path, fallback != null ? fallback : token);\n}\nexport function useProps(themeKey, props) {\n  var _theme$components, _styleConfig$defaultP;\n  var {\n    theme,\n    colorMode\n  } = useChakra();\n  var styleConfig = props.styleConfig || ((_theme$components = theme.components) == null ? void 0 : _theme$components[themeKey]);\n  var defaultProps = (_styleConfig$defaultP = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _styleConfig$defaultP : {};\n  var propsWithDefault = _extends({}, defaultProps, filterUndefined(props));\n  var stylesRef = useRef({});\n  var mergedProps = mergeWith({}, propsWithDefault, {\n    theme,\n    colorMode\n  });\n  var memoizedStyles = useMemo(() => {\n    if (styleConfig) {\n      var _styleConfig$baseStyl, _styleConfig$variants, _styleConfig$variants2, _styleConfig$sizes, _styleConfig$sizes2;\n      var baseStyles = runIfFn((_styleConfig$baseStyl = styleConfig.baseStyle) != null ? _styleConfig$baseStyl : {}, mergedProps);\n      var variants = runIfFn((_styleConfig$variants = (_styleConfig$variants2 = styleConfig.variants) == null ? void 0 : _styleConfig$variants2[mergedProps.variant]) != null ? _styleConfig$variants : {}, mergedProps);\n      var sizes = runIfFn((_styleConfig$sizes = (_styleConfig$sizes2 = styleConfig.sizes) == null ? void 0 : _styleConfig$sizes2[mergedProps.size]) != null ? _styleConfig$sizes : {}, mergedProps);\n      var styles = mergeWith(baseStyles, sizes, variants);\n      if (styleConfig.parts) {\n        styleConfig.parts.forEach(part => {\n          var _styles$part;\n          styles[part] = (_styles$part = styles[part]) != null ? _styles$part : {};\n        });\n      }\n      var isStyleEqual = isEqual(stylesRef.current, styles);\n      if (!isStyleEqual) {\n        stylesRef.current = styles;\n      }\n    }\n    return stylesRef.current;\n  }, [styleConfig, mergedProps]);\n  return {\n    styles: memoizedStyles,\n    props: omitThemingProps(propsWithDefault)\n  };\n}","map":{"version":3,"names":["useColorMode","filterUndefined","memoizedGet","get","mergeWith","runIfFn","useMemo","useRef","isEqual","useTheme","omitThemingProps","useChakra","colorModeResult","theme","_extends","useToken","scale","token","fallback","Array","isArray","fallbackArr","map","index","_fallbackArr$index","path","useProps","themeKey","props","_theme$components","_styleConfig$defaultP","colorMode","styleConfig","components","defaultProps","propsWithDefault","stylesRef","mergedProps","memoizedStyles","_styleConfig$baseStyl","_styleConfig$variants","_styleConfig$variants2","_styleConfig$sizes","_styleConfig$sizes2","baseStyles","baseStyle","variants","variant","sizes","size","styles","parts","forEach","part","_styles$part","isStyleEqual","current"],"sources":["../../src/hooks.ts"],"sourcesContent":["import { useColorMode } from \"@chakra-ui/color-mode\"\nimport { SystemStyleObject } from \"@chakra-ui/styled-system\"\nimport {\n  Dict,\n  filterUndefined,\n  memoizedGet as get,\n  mergeWith,\n  runIfFn,\n  StringOrNumber,\n} from \"@chakra-ui/utils\"\nimport { useMemo, useRef } from \"react\"\nimport isEqual from \"react-fast-compare\"\nimport { useTheme } from \"./providers\"\nimport { ThemingProps } from \"./system.types\"\nimport { omitThemingProps } from \"./system.utils\"\n\nexport function useChakra<T extends Dict = Dict>() {\n  const colorModeResult = useColorMode()\n  const theme = useTheme() as T\n  return { ...colorModeResult, theme }\n}\n\nexport function useToken<T extends StringOrNumber>(\n  scale: string,\n  token: T | T[],\n  fallback?: T | T[],\n) {\n  const theme = useTheme()\n\n  if (Array.isArray(token)) {\n    let fallbackArr: T[] = []\n    if (fallback) {\n      fallbackArr = Array.isArray(fallback) ? fallback : [fallback]\n    }\n\n    return token.map((token, index) => {\n      const path = `${scale}.${token}`\n      return get(theme, path, fallbackArr[index] ?? token)\n    })\n  }\n\n  const path = `${scale}.${token}`\n  return get(theme, path, fallback ?? token)\n}\n\nexport function useProps<P extends ThemingProps>(\n  themeKey: string,\n  props: P,\n  isMulti: true,\n): {\n  styles: Record<string, SystemStyleObject>\n  props: Omit<P, keyof ThemingProps>\n}\n\nexport function useProps<P extends ThemingProps>(\n  themeKey: string,\n  props?: P,\n  isMulti?: boolean,\n): {\n  styles: SystemStyleObject\n  props: Omit<P, keyof ThemingProps>\n}\n\nexport function useProps(themeKey: string, props: Dict) {\n  const { theme, colorMode } = useChakra()\n\n  const styleConfig = (props.styleConfig || theme.components?.[themeKey]) as\n    | Dict\n    | undefined\n\n  const defaultProps = styleConfig?.defaultProps ?? {}\n  const propsWithDefault = { ...defaultProps, ...filterUndefined(props) }\n\n  const stylesRef = useRef<Dict>({})\n\n  const mergedProps = mergeWith({}, propsWithDefault, { theme, colorMode })\n\n  const memoizedStyles = useMemo(() => {\n    if (styleConfig) {\n      const baseStyles = runIfFn(styleConfig.baseStyle ?? {}, mergedProps)\n\n      const variants = runIfFn(\n        styleConfig.variants?.[mergedProps.variant as string] ?? {},\n        mergedProps,\n      )\n\n      const sizes = runIfFn(\n        styleConfig.sizes?.[mergedProps.size as string] ?? {},\n        mergedProps,\n      )\n\n      const styles = mergeWith(baseStyles, sizes, variants)\n\n      if (styleConfig.parts) {\n        styleConfig.parts.forEach((part: string) => {\n          styles[part] = styles[part] ?? {}\n        })\n      }\n\n      const isStyleEqual = isEqual(stylesRef.current, styles)\n\n      if (!isStyleEqual) {\n        stylesRef.current = styles\n      }\n    }\n\n    return stylesRef.current\n  }, [styleConfig, mergedProps])\n\n  return {\n    styles: memoizedStyles,\n    props: omitThemingProps(propsWithDefault),\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}