{"ast":null,"code":"import { useTheme } from \"@chakra-ui/system\";\nimport { memoizedGet as get, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useMediaQuery } from \"./use-media-query\";\n\n/**\r\n * Visibility\r\n *\r\n * React component to control the visibility of its\r\n * children based on the current breakpoint\r\n */\nvar Visibility = props => {\n  var {\n    breakpoint,\n    hide,\n    children\n  } = props;\n  var [show] = useMediaQuery(breakpoint);\n  var isVisible = hide ? !show : show;\n  var rendered = isVisible ? children : null;\n  return rendered;\n};\nexport var Hide = props => {\n  var {\n    children\n  } = props;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query,\n    hide: true\n  }, children);\n};\nif (__DEV__) {\n  Hide.displayName = \"Hide\";\n}\nexport var Show = props => {\n  var {\n    children\n  } = props;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query\n  }, children);\n};\nif (__DEV__) {\n  Show.displayName = \"Show\";\n}\nvar getBreakpoint = (theme, value) => get(theme, \"breakpoints.\" + value, value);\nexport function useQuery(props) {\n  var {\n    breakpoint = \"\",\n    below,\n    above\n  } = props;\n  var theme = useTheme();\n  var bpBelow = getBreakpoint(theme, below);\n  var bpAbove = getBreakpoint(theme, above);\n  var query = breakpoint;\n  if (bpBelow) {\n    query = \"(max-width: \" + bpBelow + \")\";\n  } else if (bpAbove) {\n    query = \"(min-width: \" + bpAbove + \")\";\n  }\n  return query;\n}","map":{"version":3,"names":["useTheme","memoizedGet","get","__DEV__","React","useMediaQuery","Visibility","props","breakpoint","hide","children","show","isVisible","rendered","Hide","query","useQuery","createElement","displayName","Show","getBreakpoint","theme","value","below","above","bpBelow","bpAbove"],"sources":["../../src/media-query.tsx"],"sourcesContent":["import { useTheme } from \"@chakra-ui/system\"\nimport { Dict, memoizedGet as get, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useMediaQuery } from \"./use-media-query\"\n\ninterface VisibilityProps {\n  breakpoint: string\n  hide?: boolean\n  children: React.ReactNode\n}\n\n/**\n * Visibility\n *\n * React component to control the visibility of its\n * children based on the current breakpoint\n */\nconst Visibility: React.FC<VisibilityProps> = (props) => {\n  const { breakpoint, hide, children } = props\n  const [show] = useMediaQuery(breakpoint)\n  const isVisible = hide ? !show : show\n\n  const rendered = isVisible ? children : null\n  return rendered as React.ReactElement\n}\n\nexport type HideProps = ShowProps\n\nexport const Hide: React.FC<HideProps> = (props) => {\n  const { children } = props\n  const query = useQuery(props)\n  return (\n    <Visibility breakpoint={query} hide>\n      {children}\n    </Visibility>\n  )\n}\n\nif (__DEV__) {\n  Hide.displayName = \"Hide\"\n}\n\nexport interface ShowProps {\n  breakpoint?: string\n  below?: string\n  above?: string\n  children?: React.ReactNode\n}\n\nexport const Show: React.FC<ShowProps> = (props) => {\n  const { children } = props\n  const query = useQuery(props)\n  return <Visibility breakpoint={query}>{children}</Visibility>\n}\n\nif (__DEV__) {\n  Show.displayName = \"Show\"\n}\n\nconst getBreakpoint = (theme: Dict, value: any) =>\n  get(theme, `breakpoints.${value}`, value)\n\nexport interface UseQueryProps {\n  breakpoint?: string\n  below?: string\n  above?: string\n}\n\nexport function useQuery(props: UseQueryProps) {\n  const { breakpoint = \"\", below, above } = props\n\n  const theme = useTheme()\n  const bpBelow = getBreakpoint(theme, below)\n  const bpAbove = getBreakpoint(theme, above)\n\n  let query = breakpoint\n\n  if (bpBelow) {\n    query = `(max-width: ${bpBelow})`\n  } else if (bpAbove) {\n    query = `(min-width: ${bpAbove})`\n  }\n\n  return query\n}\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,mBAAzB;AACA,SAAeC,WAAW,IAAIC,GAA9B,EAAmCC,OAAnC,QAAkD,kBAAlD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,mBAA9B;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMC,UAAqC,GAAIC,KAAD,IAAW;EACvD,IAAM;IAAEC,UAAF;IAAcC,IAAd;IAAoBC;EAApB,IAAiCH,KAAvC;EACA,IAAM,CAACI,IAAD,IAASN,aAAa,CAACG,UAAD,CAA5B;EACA,IAAMI,SAAS,GAAGH,IAAI,GAAG,CAACE,IAAJ,GAAWA,IAAjC;EAEA,IAAME,QAAQ,GAAGD,SAAS,GAAGF,QAAH,GAAc,IAAxC;EACA,OAAOG,QAAP;AACD,CAPD;AAWA,OAAO,IAAMC,IAAyB,GAAIP,KAAD,IAAW;EAClD,IAAM;IAAEG;EAAF,IAAeH,KAArB;EACA,IAAMQ,KAAK,GAAGC,QAAQ,CAACT,KAAD,CAAtB;EACA,oBACEH,KAAA,CAAAa,aAAA,CAACX,UAAD;IAAYE,UAAU,EAAEO,KAAxB;IAA+BN,IAAI;EAAnC,GACGC,QADH,CADF;AAKD,CARM;AAUP,IAAIP,OAAJ,EAAa;EACXW,IAAI,CAACI,WAAL,GAAmB,MAAnB;AACD;AASD,OAAO,IAAMC,IAAyB,GAAIZ,KAAD,IAAW;EAClD,IAAM;IAAEG;EAAF,IAAeH,KAArB;EACA,IAAMQ,KAAK,GAAGC,QAAQ,CAACT,KAAD,CAAtB;EACA,oBAAOH,KAAA,CAAAa,aAAA,CAACX,UAAD;IAAYE,UAAU,EAAEO;EAAxB,GAAgCL,QAAhC,CAAP;AACD,CAJM;AAMP,IAAIP,OAAJ,EAAa;EACXgB,IAAI,CAACD,WAAL,GAAmB,MAAnB;AACD;AAED,IAAME,aAAa,GAAGA,CAACC,KAAD,EAAcC,KAAd,KACpBpB,GAAG,CAACmB,KAAD,mBAAuBC,KAAvB,EAAgCA,KAAhC,CADL;AASA,OAAO,SAASN,QAATA,CAAkBT,KAAlB,EAAwC;EAC7C,IAAM;IAAEC,UAAU,GAAG,EAAf;IAAmBe,KAAnB;IAA0BC;EAA1B,IAAoCjB,KAA1C;EAEA,IAAMc,KAAK,GAAGrB,QAAQ,EAAtB;EACA,IAAMyB,OAAO,GAAGL,aAAa,CAACC,KAAD,EAAQE,KAAR,CAA7B;EACA,IAAMG,OAAO,GAAGN,aAAa,CAACC,KAAD,EAAQG,KAAR,CAA7B;EAEA,IAAIT,KAAK,GAAGP,UAAZ;EAEA,IAAIiB,OAAJ,EAAa;IACXV,KAAK,oBAAkBU,OAAlB,MAAL;EACD,CAFD,MAEO,IAAIC,OAAJ,EAAa;IAClBX,KAAK,oBAAkBW,OAAlB,MAAL;EACD;EAED,OAAOX,KAAP;AACD"},"metadata":{},"sourceType":"module"}