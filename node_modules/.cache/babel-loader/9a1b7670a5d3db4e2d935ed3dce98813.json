{"ast":null,"code":"const transports = require(\"./transports/index\");\n\nconst Emitter = require(\"component-emitter\");\n\nconst debug = require(\"debug\")(\"engine.io-client:socket\");\n\nconst parser = require(\"engine.io-parser\");\n\nconst parseuri = require(\"parseuri\");\n\nconst parseqs = require(\"parseqs\");\n\nclass Socket extends Emitter {\n  /**\r\n   * Socket constructor.\r\n   *\r\n   * @param {String|Object} uri or options\r\n   * @param {Object} options\r\n   * @api public\r\n   */\n  constructor(uri, opts = {}) {\n    super();\n\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = null;\n    }\n\n    if (uri) {\n      uri = parseuri(uri);\n      opts.hostname = uri.host;\n      opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n      opts.port = uri.port;\n      if (uri.query) opts.query = uri.query;\n    } else if (opts.host) {\n      opts.hostname = parseuri(opts.host).host;\n    }\n\n    this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n\n    if (opts.hostname && !opts.port) {\n      // if no port is specified manually, use the protocol default\n      opts.port = this.secure ? \"443\" : \"80\";\n    }\n\n    this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n    this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : this.secure ? 443 : 80);\n    this.transports = opts.transports || [\"polling\", \"websocket\"];\n    this.readyState = \"\";\n    this.writeBuffer = [];\n    this.prevBufferLen = 0;\n    this.opts = Object.assign({\n      path: \"/engine.io\",\n      agent: false,\n      withCredentials: false,\n      upgrade: true,\n      jsonp: true,\n      timestampParam: \"t\",\n      rememberUpgrade: false,\n      rejectUnauthorized: true,\n      perMessageDeflate: {\n        threshold: 1024\n      },\n      transportOptions: {},\n      closeOnBeforeunload: true\n    }, opts);\n    this.opts.path = this.opts.path.replace(/\\/$/, \"\") + \"/\";\n\n    if (typeof this.opts.query === \"string\") {\n      this.opts.query = parseqs.decode(this.opts.query);\n    } // set on handshake\n\n\n    this.id = null;\n    this.upgrades = null;\n    this.pingInterval = null;\n    this.pingTimeout = null; // set on heartbeat\n\n    this.pingTimeoutTimer = null;\n\n    if (typeof addEventListener === \"function\") {\n      if (this.opts.closeOnBeforeunload) {\n        // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n        // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n        // closed/reloaded)\n        addEventListener(\"beforeunload\", () => {\n          if (this.transport) {\n            // silently close the transport\n            this.transport.removeAllListeners();\n            this.transport.close();\n          }\n        }, false);\n      }\n\n      if (this.hostname !== \"localhost\") {\n        this.offlineEventListener = () => {\n          this.onClose(\"transport close\");\n        };\n\n        addEventListener(\"offline\", this.offlineEventListener, false);\n      }\n    }\n\n    this.open();\n  }\n  /**\r\n   * Creates transport of the given type.\r\n   *\r\n   * @param {String} transport name\r\n   * @return {Transport}\r\n   * @api private\r\n   */\n\n\n  createTransport(name) {\n    debug('creating transport \"%s\"', name);\n    const query = clone(this.opts.query); // append engine.io protocol identifier\n\n    query.EIO = parser.protocol; // transport name\n\n    query.transport = name; // session id if we already have one\n\n    if (this.id) query.sid = this.id;\n    const opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {\n      query,\n      socket: this,\n      hostname: this.hostname,\n      secure: this.secure,\n      port: this.port\n    });\n    debug(\"options: %j\", opts);\n    return new transports[name](opts);\n  }\n  /**\r\n   * Initializes transport to use and starts probe.\r\n   *\r\n   * @api private\r\n   */\n\n\n  open() {\n    let transport;\n\n    if (this.opts.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1) {\n      transport = \"websocket\";\n    } else if (0 === this.transports.length) {\n      // Emit error on next tick so it can be listened to\n      setTimeout(() => {\n        this.emit(\"error\", \"No transports available\");\n      }, 0);\n      return;\n    } else {\n      transport = this.transports[0];\n    }\n\n    this.readyState = \"opening\"; // Retry with the next transport if the transport is disabled (jsonp: false)\n\n    try {\n      transport = this.createTransport(transport);\n    } catch (e) {\n      debug(\"error while creating transport: %s\", e);\n      this.transports.shift();\n      this.open();\n      return;\n    }\n\n    transport.open();\n    this.setTransport(transport);\n  }\n  /**\r\n   * Sets the current transport. Disables the existing one (if any).\r\n   *\r\n   * @api private\r\n   */\n\n\n  setTransport(transport) {\n    debug(\"setting transport %s\", transport.name);\n\n    if (this.transport) {\n      debug(\"clearing existing transport %s\", this.transport.name);\n      this.transport.removeAllListeners();\n    } // set up transport\n\n\n    this.transport = transport; // set up transport listeners\n\n    transport.on(\"drain\", this.onDrain.bind(this)).on(\"packet\", this.onPacket.bind(this)).on(\"error\", this.onError.bind(this)).on(\"close\", () => {\n      this.onClose(\"transport close\");\n    });\n  }\n  /**\r\n   * Probes a transport.\r\n   *\r\n   * @param {String} transport name\r\n   * @api private\r\n   */\n\n\n  probe(name) {\n    debug('probing transport \"%s\"', name);\n    let transport = this.createTransport(name, {\n      probe: 1\n    });\n    let failed = false;\n    Socket.priorWebsocketSuccess = false;\n\n    const onTransportOpen = () => {\n      if (failed) return;\n      debug('probe transport \"%s\" opened', name);\n      transport.send([{\n        type: \"ping\",\n        data: \"probe\"\n      }]);\n      transport.once(\"packet\", msg => {\n        if (failed) return;\n\n        if (\"pong\" === msg.type && \"probe\" === msg.data) {\n          debug('probe transport \"%s\" pong', name);\n          this.upgrading = true;\n          this.emit(\"upgrading\", transport);\n          if (!transport) return;\n          Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n          debug('pausing current transport \"%s\"', this.transport.name);\n          this.transport.pause(() => {\n            if (failed) return;\n            if (\"closed\" === this.readyState) return;\n            debug(\"changing transport and sending upgrade packet\");\n            cleanup();\n            this.setTransport(transport);\n            transport.send([{\n              type: \"upgrade\"\n            }]);\n            this.emit(\"upgrade\", transport);\n            transport = null;\n            this.upgrading = false;\n            this.flush();\n          });\n        } else {\n          debug('probe transport \"%s\" failed', name);\n          const err = new Error(\"probe error\");\n          err.transport = transport.name;\n          this.emit(\"upgradeError\", err);\n        }\n      });\n    };\n\n    function freezeTransport() {\n      if (failed) return; // Any callback called by transport should be ignored since now\n\n      failed = true;\n      cleanup();\n      transport.close();\n      transport = null;\n    } // Handle any error that happens while probing\n\n\n    const onerror = err => {\n      const error = new Error(\"probe error: \" + err);\n      error.transport = transport.name;\n      freezeTransport();\n      debug('probe transport \"%s\" failed because of error: %s', name, err);\n      this.emit(\"upgradeError\", error);\n    };\n\n    function onTransportClose() {\n      onerror(\"transport closed\");\n    } // When the socket is closed while we're probing\n\n\n    function onclose() {\n      onerror(\"socket closed\");\n    } // When the socket is upgraded while we're probing\n\n\n    function onupgrade(to) {\n      if (transport && to.name !== transport.name) {\n        debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n        freezeTransport();\n      }\n    } // Remove all listeners on the transport and on self\n\n\n    const cleanup = () => {\n      transport.removeListener(\"open\", onTransportOpen);\n      transport.removeListener(\"error\", onerror);\n      transport.removeListener(\"close\", onTransportClose);\n      this.removeListener(\"close\", onclose);\n      this.removeListener(\"upgrading\", onupgrade);\n    };\n\n    transport.once(\"open\", onTransportOpen);\n    transport.once(\"error\", onerror);\n    transport.once(\"close\", onTransportClose);\n    this.once(\"close\", onclose);\n    this.once(\"upgrading\", onupgrade);\n    transport.open();\n  }\n  /**\r\n   * Called when connection is deemed open.\r\n   *\r\n   * @api public\r\n   */\n\n\n  onOpen() {\n    debug(\"socket open\");\n    this.readyState = \"open\";\n    Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n    this.emit(\"open\");\n    this.flush(); // we check for `readyState` in case an `open`\n    // listener already closed the socket\n\n    if (\"open\" === this.readyState && this.opts.upgrade && this.transport.pause) {\n      debug(\"starting upgrade probes\");\n      let i = 0;\n      const l = this.upgrades.length;\n\n      for (; i < l; i++) {\n        this.probe(this.upgrades[i]);\n      }\n    }\n  }\n  /**\r\n   * Handles a packet.\r\n   *\r\n   * @api private\r\n   */\n\n\n  onPacket(packet) {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n      debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n      this.emit(\"packet\", packet); // Socket is live - any packet counts\n\n      this.emit(\"heartbeat\");\n\n      switch (packet.type) {\n        case \"open\":\n          this.onHandshake(JSON.parse(packet.data));\n          break;\n\n        case \"ping\":\n          this.resetPingTimeout();\n          this.sendPacket(\"pong\");\n          this.emit(\"pong\");\n          break;\n\n        case \"error\":\n          const err = new Error(\"server error\");\n          err.code = packet.data;\n          this.onError(err);\n          break;\n\n        case \"message\":\n          this.emit(\"data\", packet.data);\n          this.emit(\"message\", packet.data);\n          break;\n      }\n    } else {\n      debug('packet received with socket readyState \"%s\"', this.readyState);\n    }\n  }\n  /**\r\n   * Called upon handshake completion.\r\n   *\r\n   * @param {Object} handshake obj\r\n   * @api private\r\n   */\n\n\n  onHandshake(data) {\n    this.emit(\"handshake\", data);\n    this.id = data.sid;\n    this.transport.query.sid = data.sid;\n    this.upgrades = this.filterUpgrades(data.upgrades);\n    this.pingInterval = data.pingInterval;\n    this.pingTimeout = data.pingTimeout;\n    this.onOpen(); // In case open handler closes socket\n\n    if (\"closed\" === this.readyState) return;\n    this.resetPingTimeout();\n  }\n  /**\r\n   * Sets and resets ping timeout timer based on server pings.\r\n   *\r\n   * @api private\r\n   */\n\n\n  resetPingTimeout() {\n    clearTimeout(this.pingTimeoutTimer);\n    this.pingTimeoutTimer = setTimeout(() => {\n      this.onClose(\"ping timeout\");\n    }, this.pingInterval + this.pingTimeout);\n\n    if (this.opts.autoUnref) {\n      this.pingTimeoutTimer.unref();\n    }\n  }\n  /**\r\n   * Called on `drain` event\r\n   *\r\n   * @api private\r\n   */\n\n\n  onDrain() {\n    this.writeBuffer.splice(0, this.prevBufferLen); // setting prevBufferLen = 0 is very important\n    // for example, when upgrading, upgrade packet is sent over,\n    // and a nonzero prevBufferLen could cause problems on `drain`\n\n    this.prevBufferLen = 0;\n\n    if (0 === this.writeBuffer.length) {\n      this.emit(\"drain\");\n    } else {\n      this.flush();\n    }\n  }\n  /**\r\n   * Flush write buffers.\r\n   *\r\n   * @api private\r\n   */\n\n\n  flush() {\n    if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n      debug(\"flushing %d packets in socket\", this.writeBuffer.length);\n      this.transport.send(this.writeBuffer); // keep track of current length of writeBuffer\n      // splice writeBuffer and callbackBuffer on `drain`\n\n      this.prevBufferLen = this.writeBuffer.length;\n      this.emit(\"flush\");\n    }\n  }\n  /**\r\n   * Sends a message.\r\n   *\r\n   * @param {String} message.\r\n   * @param {Function} callback function.\r\n   * @param {Object} options.\r\n   * @return {Socket} for chaining.\r\n   * @api public\r\n   */\n\n\n  write(msg, options, fn) {\n    this.sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n\n  send(msg, options, fn) {\n    this.sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n  /**\r\n   * Sends a packet.\r\n   *\r\n   * @param {String} packet type.\r\n   * @param {String} data.\r\n   * @param {Object} options.\r\n   * @param {Function} callback function.\r\n   * @api private\r\n   */\n\n\n  sendPacket(type, data, options, fn) {\n    if (\"function\" === typeof data) {\n      fn = data;\n      data = undefined;\n    }\n\n    if (\"function\" === typeof options) {\n      fn = options;\n      options = null;\n    }\n\n    if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n      return;\n    }\n\n    options = options || {};\n    options.compress = false !== options.compress;\n    const packet = {\n      type: type,\n      data: data,\n      options: options\n    };\n    this.emit(\"packetCreate\", packet);\n    this.writeBuffer.push(packet);\n    if (fn) this.once(\"flush\", fn);\n    this.flush();\n  }\n  /**\r\n   * Closes the connection.\r\n   *\r\n   * @api private\r\n   */\n\n\n  close() {\n    const close = () => {\n      this.onClose(\"forced close\");\n      debug(\"socket closing - telling transport to close\");\n      this.transport.close();\n    };\n\n    const cleanupAndClose = () => {\n      this.removeListener(\"upgrade\", cleanupAndClose);\n      this.removeListener(\"upgradeError\", cleanupAndClose);\n      close();\n    };\n\n    const waitForUpgrade = () => {\n      // wait for upgrade to finish since we can't send packets while pausing a transport\n      this.once(\"upgrade\", cleanupAndClose);\n      this.once(\"upgradeError\", cleanupAndClose);\n    };\n\n    if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n      this.readyState = \"closing\";\n\n      if (this.writeBuffer.length) {\n        this.once(\"drain\", () => {\n          if (this.upgrading) {\n            waitForUpgrade();\n          } else {\n            close();\n          }\n        });\n      } else if (this.upgrading) {\n        waitForUpgrade();\n      } else {\n        close();\n      }\n    }\n\n    return this;\n  }\n  /**\r\n   * Called upon transport error\r\n   *\r\n   * @api private\r\n   */\n\n\n  onError(err) {\n    debug(\"socket error %j\", err);\n    Socket.priorWebsocketSuccess = false;\n    this.emit(\"error\", err);\n    this.onClose(\"transport error\", err);\n  }\n  /**\r\n   * Called upon transport close.\r\n   *\r\n   * @api private\r\n   */\n\n\n  onClose(reason, desc) {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n      debug('socket close with reason: \"%s\"', reason); // clear timers\n\n      clearTimeout(this.pingIntervalTimer);\n      clearTimeout(this.pingTimeoutTimer); // stop event from firing again for transport\n\n      this.transport.removeAllListeners(\"close\"); // ensure transport won't stay open\n\n      this.transport.close(); // ignore further transport communication\n\n      this.transport.removeAllListeners();\n\n      if (typeof removeEventListener === \"function\") {\n        removeEventListener(\"offline\", this.offlineEventListener, false);\n      } // set ready state\n\n\n      this.readyState = \"closed\"; // clear session id\n\n      this.id = null; // emit close event\n\n      this.emit(\"close\", reason, desc); // clean buffers after, so users can still\n      // grab the buffers on `close` event\n\n      this.writeBuffer = [];\n      this.prevBufferLen = 0;\n    }\n  }\n  /**\r\n   * Filters upgrades, returning only those matching client transports.\r\n   *\r\n   * @param {Array} server upgrades\r\n   * @api private\r\n   *\r\n   */\n\n\n  filterUpgrades(upgrades) {\n    const filteredUpgrades = [];\n    let i = 0;\n    const j = upgrades.length;\n\n    for (; i < j; i++) {\n      if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n    }\n\n    return filteredUpgrades;\n  }\n\n}\n\nSocket.priorWebsocketSuccess = false;\n/**\r\n * Protocol version.\r\n *\r\n * @api public\r\n */\n\nSocket.protocol = parser.protocol; // this is an int\n\nfunction clone(obj) {\n  const o = {};\n\n  for (let i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = obj[i];\n    }\n  }\n\n  return o;\n}\n\nmodule.exports = Socket;","map":{"version":3,"sources":["E:/Project File/Chatters-a-mern-app/frontend/node_modules/engine.io-client/lib/socket.js"],"names":["transports","require","Emitter","debug","parser","parseuri","parseqs","Socket","constructor","uri","opts","hostname","host","secure","protocol","port","query","location","readyState","writeBuffer","prevBufferLen","Object","assign","path","agent","withCredentials","upgrade","jsonp","timestampParam","rememberUpgrade","rejectUnauthorized","perMessageDeflate","threshold","transportOptions","closeOnBeforeunload","replace","decode","id","upgrades","pingInterval","pingTimeout","pingTimeoutTimer","addEventListener","transport","removeAllListeners","close","offlineEventListener","onClose","open","createTransport","name","clone","EIO","sid","socket","priorWebsocketSuccess","indexOf","length","setTimeout","emit","e","shift","setTransport","on","onDrain","bind","onPacket","onError","probe","failed","onTransportOpen","send","type","data","once","msg","upgrading","pause","cleanup","flush","err","Error","freezeTransport","onerror","error","onTransportClose","onclose","onupgrade","to","removeListener","onOpen","i","l","packet","onHandshake","JSON","parse","resetPingTimeout","sendPacket","code","filterUpgrades","clearTimeout","autoUnref","unref","splice","writable","write","options","fn","undefined","compress","push","cleanupAndClose","waitForUpgrade","reason","desc","pingIntervalTimer","removeEventListener","filteredUpgrades","j","obj","o","hasOwnProperty","module","exports"],"mappings":"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","sourcesContent":["const transports = require(\"./transports/index\");\r\nconst Emitter = require(\"component-emitter\");\r\nconst debug = require(\"debug\")(\"engine.io-client:socket\");\r\nconst parser = require(\"engine.io-parser\");\r\nconst parseuri = require(\"parseuri\");\r\nconst parseqs = require(\"parseqs\");\r\n\r\nclass Socket extends Emitter {\r\n  /**\r\n   * Socket constructor.\r\n   *\r\n   * @param {String|Object} uri or options\r\n   * @param {Object} options\r\n   * @api public\r\n   */\r\n  constructor(uri, opts = {}) {\r\n    super();\r\n\r\n    if (uri && \"object\" === typeof uri) {\r\n      opts = uri;\r\n      uri = null;\r\n    }\r\n\r\n    if (uri) {\r\n      uri = parseuri(uri);\r\n      opts.hostname = uri.host;\r\n      opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\r\n      opts.port = uri.port;\r\n      if (uri.query) opts.query = uri.query;\r\n    } else if (opts.host) {\r\n      opts.hostname = parseuri(opts.host).host;\r\n    }\r\n\r\n    this.secure =\r\n      null != opts.secure\r\n        ? opts.secure\r\n        : typeof location !== \"undefined\" && \"https:\" === location.protocol;\r\n\r\n    if (opts.hostname && !opts.port) {\r\n      // if no port is specified manually, use the protocol default\r\n      opts.port = this.secure ? \"443\" : \"80\";\r\n    }\r\n\r\n    this.hostname =\r\n      opts.hostname ||\r\n      (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\r\n    this.port =\r\n      opts.port ||\r\n      (typeof location !== \"undefined\" && location.port\r\n        ? location.port\r\n        : this.secure\r\n        ? 443\r\n        : 80);\r\n\r\n    this.transports = opts.transports || [\"polling\", \"websocket\"];\r\n    this.readyState = \"\";\r\n    this.writeBuffer = [];\r\n    this.prevBufferLen = 0;\r\n\r\n    this.opts = Object.assign(\r\n      {\r\n        path: \"/engine.io\",\r\n        agent: false,\r\n        withCredentials: false,\r\n        upgrade: true,\r\n        jsonp: true,\r\n        timestampParam: \"t\",\r\n        rememberUpgrade: false,\r\n        rejectUnauthorized: true,\r\n        perMessageDeflate: {\r\n          threshold: 1024\r\n        },\r\n        transportOptions: {},\r\n        closeOnBeforeunload: true\r\n      },\r\n      opts\r\n    );\r\n\r\n    this.opts.path = this.opts.path.replace(/\\/$/, \"\") + \"/\";\r\n\r\n    if (typeof this.opts.query === \"string\") {\r\n      this.opts.query = parseqs.decode(this.opts.query);\r\n    }\r\n\r\n    // set on handshake\r\n    this.id = null;\r\n    this.upgrades = null;\r\n    this.pingInterval = null;\r\n    this.pingTimeout = null;\r\n\r\n    // set on heartbeat\r\n    this.pingTimeoutTimer = null;\r\n\r\n    if (typeof addEventListener === \"function\") {\r\n      if (this.opts.closeOnBeforeunload) {\r\n        // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\r\n        // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\r\n        // closed/reloaded)\r\n        addEventListener(\r\n          \"beforeunload\",\r\n          () => {\r\n            if (this.transport) {\r\n              // silently close the transport\r\n              this.transport.removeAllListeners();\r\n              this.transport.close();\r\n            }\r\n          },\r\n          false\r\n        );\r\n      }\r\n      if (this.hostname !== \"localhost\") {\r\n        this.offlineEventListener = () => {\r\n          this.onClose(\"transport close\");\r\n        };\r\n        addEventListener(\"offline\", this.offlineEventListener, false);\r\n      }\r\n    }\r\n\r\n    this.open();\r\n  }\r\n\r\n  /**\r\n   * Creates transport of the given type.\r\n   *\r\n   * @param {String} transport name\r\n   * @return {Transport}\r\n   * @api private\r\n   */\r\n  createTransport(name) {\r\n    debug('creating transport \"%s\"', name);\r\n    const query = clone(this.opts.query);\r\n\r\n    // append engine.io protocol identifier\r\n    query.EIO = parser.protocol;\r\n\r\n    // transport name\r\n    query.transport = name;\r\n\r\n    // session id if we already have one\r\n    if (this.id) query.sid = this.id;\r\n\r\n    const opts = Object.assign(\r\n      {},\r\n      this.opts.transportOptions[name],\r\n      this.opts,\r\n      {\r\n        query,\r\n        socket: this,\r\n        hostname: this.hostname,\r\n        secure: this.secure,\r\n        port: this.port\r\n      }\r\n    );\r\n\r\n    debug(\"options: %j\", opts);\r\n\r\n    return new transports[name](opts);\r\n  }\r\n\r\n  /**\r\n   * Initializes transport to use and starts probe.\r\n   *\r\n   * @api private\r\n   */\r\n  open() {\r\n    let transport;\r\n    if (\r\n      this.opts.rememberUpgrade &&\r\n      Socket.priorWebsocketSuccess &&\r\n      this.transports.indexOf(\"websocket\") !== -1\r\n    ) {\r\n      transport = \"websocket\";\r\n    } else if (0 === this.transports.length) {\r\n      // Emit error on next tick so it can be listened to\r\n      setTimeout(() => {\r\n        this.emit(\"error\", \"No transports available\");\r\n      }, 0);\r\n      return;\r\n    } else {\r\n      transport = this.transports[0];\r\n    }\r\n    this.readyState = \"opening\";\r\n\r\n    // Retry with the next transport if the transport is disabled (jsonp: false)\r\n    try {\r\n      transport = this.createTransport(transport);\r\n    } catch (e) {\r\n      debug(\"error while creating transport: %s\", e);\r\n      this.transports.shift();\r\n      this.open();\r\n      return;\r\n    }\r\n\r\n    transport.open();\r\n    this.setTransport(transport);\r\n  }\r\n\r\n  /**\r\n   * Sets the current transport. Disables the existing one (if any).\r\n   *\r\n   * @api private\r\n   */\r\n  setTransport(transport) {\r\n    debug(\"setting transport %s\", transport.name);\r\n\r\n    if (this.transport) {\r\n      debug(\"clearing existing transport %s\", this.transport.name);\r\n      this.transport.removeAllListeners();\r\n    }\r\n\r\n    // set up transport\r\n    this.transport = transport;\r\n\r\n    // set up transport listeners\r\n    transport\r\n      .on(\"drain\", this.onDrain.bind(this))\r\n      .on(\"packet\", this.onPacket.bind(this))\r\n      .on(\"error\", this.onError.bind(this))\r\n      .on(\"close\", () => {\r\n        this.onClose(\"transport close\");\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Probes a transport.\r\n   *\r\n   * @param {String} transport name\r\n   * @api private\r\n   */\r\n  probe(name) {\r\n    debug('probing transport \"%s\"', name);\r\n    let transport = this.createTransport(name, { probe: 1 });\r\n    let failed = false;\r\n\r\n    Socket.priorWebsocketSuccess = false;\r\n\r\n    const onTransportOpen = () => {\r\n      if (failed) return;\r\n\r\n      debug('probe transport \"%s\" opened', name);\r\n      transport.send([{ type: \"ping\", data: \"probe\" }]);\r\n      transport.once(\"packet\", msg => {\r\n        if (failed) return;\r\n        if (\"pong\" === msg.type && \"probe\" === msg.data) {\r\n          debug('probe transport \"%s\" pong', name);\r\n          this.upgrading = true;\r\n          this.emit(\"upgrading\", transport);\r\n          if (!transport) return;\r\n          Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\r\n\r\n          debug('pausing current transport \"%s\"', this.transport.name);\r\n          this.transport.pause(() => {\r\n            if (failed) return;\r\n            if (\"closed\" === this.readyState) return;\r\n            debug(\"changing transport and sending upgrade packet\");\r\n\r\n            cleanup();\r\n\r\n            this.setTransport(transport);\r\n            transport.send([{ type: \"upgrade\" }]);\r\n            this.emit(\"upgrade\", transport);\r\n            transport = null;\r\n            this.upgrading = false;\r\n            this.flush();\r\n          });\r\n        } else {\r\n          debug('probe transport \"%s\" failed', name);\r\n          const err = new Error(\"probe error\");\r\n          err.transport = transport.name;\r\n          this.emit(\"upgradeError\", err);\r\n        }\r\n      });\r\n    };\r\n\r\n    function freezeTransport() {\r\n      if (failed) return;\r\n\r\n      // Any callback called by transport should be ignored since now\r\n      failed = true;\r\n\r\n      cleanup();\r\n\r\n      transport.close();\r\n      transport = null;\r\n    }\r\n\r\n    // Handle any error that happens while probing\r\n    const onerror = err => {\r\n      const error = new Error(\"probe error: \" + err);\r\n      error.transport = transport.name;\r\n\r\n      freezeTransport();\r\n\r\n      debug('probe transport \"%s\" failed because of error: %s', name, err);\r\n\r\n      this.emit(\"upgradeError\", error);\r\n    };\r\n\r\n    function onTransportClose() {\r\n      onerror(\"transport closed\");\r\n    }\r\n\r\n    // When the socket is closed while we're probing\r\n    function onclose() {\r\n      onerror(\"socket closed\");\r\n    }\r\n\r\n    // When the socket is upgraded while we're probing\r\n    function onupgrade(to) {\r\n      if (transport && to.name !== transport.name) {\r\n        debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\r\n        freezeTransport();\r\n      }\r\n    }\r\n\r\n    // Remove all listeners on the transport and on self\r\n    const cleanup = () => {\r\n      transport.removeListener(\"open\", onTransportOpen);\r\n      transport.removeListener(\"error\", onerror);\r\n      transport.removeListener(\"close\", onTransportClose);\r\n      this.removeListener(\"close\", onclose);\r\n      this.removeListener(\"upgrading\", onupgrade);\r\n    };\r\n\r\n    transport.once(\"open\", onTransportOpen);\r\n    transport.once(\"error\", onerror);\r\n    transport.once(\"close\", onTransportClose);\r\n\r\n    this.once(\"close\", onclose);\r\n    this.once(\"upgrading\", onupgrade);\r\n\r\n    transport.open();\r\n  }\r\n\r\n  /**\r\n   * Called when connection is deemed open.\r\n   *\r\n   * @api public\r\n   */\r\n  onOpen() {\r\n    debug(\"socket open\");\r\n    this.readyState = \"open\";\r\n    Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\r\n    this.emit(\"open\");\r\n    this.flush();\r\n\r\n    // we check for `readyState` in case an `open`\r\n    // listener already closed the socket\r\n    if (\r\n      \"open\" === this.readyState &&\r\n      this.opts.upgrade &&\r\n      this.transport.pause\r\n    ) {\r\n      debug(\"starting upgrade probes\");\r\n      let i = 0;\r\n      const l = this.upgrades.length;\r\n      for (; i < l; i++) {\r\n        this.probe(this.upgrades[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles a packet.\r\n   *\r\n   * @api private\r\n   */\r\n  onPacket(packet) {\r\n    if (\r\n      \"opening\" === this.readyState ||\r\n      \"open\" === this.readyState ||\r\n      \"closing\" === this.readyState\r\n    ) {\r\n      debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\r\n\r\n      this.emit(\"packet\", packet);\r\n\r\n      // Socket is live - any packet counts\r\n      this.emit(\"heartbeat\");\r\n\r\n      switch (packet.type) {\r\n        case \"open\":\r\n          this.onHandshake(JSON.parse(packet.data));\r\n          break;\r\n\r\n        case \"ping\":\r\n          this.resetPingTimeout();\r\n          this.sendPacket(\"pong\");\r\n          this.emit(\"pong\");\r\n          break;\r\n\r\n        case \"error\":\r\n          const err = new Error(\"server error\");\r\n          err.code = packet.data;\r\n          this.onError(err);\r\n          break;\r\n\r\n        case \"message\":\r\n          this.emit(\"data\", packet.data);\r\n          this.emit(\"message\", packet.data);\r\n          break;\r\n      }\r\n    } else {\r\n      debug('packet received with socket readyState \"%s\"', this.readyState);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called upon handshake completion.\r\n   *\r\n   * @param {Object} handshake obj\r\n   * @api private\r\n   */\r\n  onHandshake(data) {\r\n    this.emit(\"handshake\", data);\r\n    this.id = data.sid;\r\n    this.transport.query.sid = data.sid;\r\n    this.upgrades = this.filterUpgrades(data.upgrades);\r\n    this.pingInterval = data.pingInterval;\r\n    this.pingTimeout = data.pingTimeout;\r\n    this.onOpen();\r\n    // In case open handler closes socket\r\n    if (\"closed\" === this.readyState) return;\r\n    this.resetPingTimeout();\r\n  }\r\n\r\n  /**\r\n   * Sets and resets ping timeout timer based on server pings.\r\n   *\r\n   * @api private\r\n   */\r\n  resetPingTimeout() {\r\n    clearTimeout(this.pingTimeoutTimer);\r\n    this.pingTimeoutTimer = setTimeout(() => {\r\n      this.onClose(\"ping timeout\");\r\n    }, this.pingInterval + this.pingTimeout);\r\n    if (this.opts.autoUnref) {\r\n      this.pingTimeoutTimer.unref();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called on `drain` event\r\n   *\r\n   * @api private\r\n   */\r\n  onDrain() {\r\n    this.writeBuffer.splice(0, this.prevBufferLen);\r\n\r\n    // setting prevBufferLen = 0 is very important\r\n    // for example, when upgrading, upgrade packet is sent over,\r\n    // and a nonzero prevBufferLen could cause problems on `drain`\r\n    this.prevBufferLen = 0;\r\n\r\n    if (0 === this.writeBuffer.length) {\r\n      this.emit(\"drain\");\r\n    } else {\r\n      this.flush();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Flush write buffers.\r\n   *\r\n   * @api private\r\n   */\r\n  flush() {\r\n    if (\r\n      \"closed\" !== this.readyState &&\r\n      this.transport.writable &&\r\n      !this.upgrading &&\r\n      this.writeBuffer.length\r\n    ) {\r\n      debug(\"flushing %d packets in socket\", this.writeBuffer.length);\r\n      this.transport.send(this.writeBuffer);\r\n      // keep track of current length of writeBuffer\r\n      // splice writeBuffer and callbackBuffer on `drain`\r\n      this.prevBufferLen = this.writeBuffer.length;\r\n      this.emit(\"flush\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sends a message.\r\n   *\r\n   * @param {String} message.\r\n   * @param {Function} callback function.\r\n   * @param {Object} options.\r\n   * @return {Socket} for chaining.\r\n   * @api public\r\n   */\r\n  write(msg, options, fn) {\r\n    this.sendPacket(\"message\", msg, options, fn);\r\n    return this;\r\n  }\r\n\r\n  send(msg, options, fn) {\r\n    this.sendPacket(\"message\", msg, options, fn);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sends a packet.\r\n   *\r\n   * @param {String} packet type.\r\n   * @param {String} data.\r\n   * @param {Object} options.\r\n   * @param {Function} callback function.\r\n   * @api private\r\n   */\r\n  sendPacket(type, data, options, fn) {\r\n    if (\"function\" === typeof data) {\r\n      fn = data;\r\n      data = undefined;\r\n    }\r\n\r\n    if (\"function\" === typeof options) {\r\n      fn = options;\r\n      options = null;\r\n    }\r\n\r\n    if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\r\n      return;\r\n    }\r\n\r\n    options = options || {};\r\n    options.compress = false !== options.compress;\r\n\r\n    const packet = {\r\n      type: type,\r\n      data: data,\r\n      options: options\r\n    };\r\n    this.emit(\"packetCreate\", packet);\r\n    this.writeBuffer.push(packet);\r\n    if (fn) this.once(\"flush\", fn);\r\n    this.flush();\r\n  }\r\n\r\n  /**\r\n   * Closes the connection.\r\n   *\r\n   * @api private\r\n   */\r\n  close() {\r\n    const close = () => {\r\n      this.onClose(\"forced close\");\r\n      debug(\"socket closing - telling transport to close\");\r\n      this.transport.close();\r\n    };\r\n\r\n    const cleanupAndClose = () => {\r\n      this.removeListener(\"upgrade\", cleanupAndClose);\r\n      this.removeListener(\"upgradeError\", cleanupAndClose);\r\n      close();\r\n    };\r\n\r\n    const waitForUpgrade = () => {\r\n      // wait for upgrade to finish since we can't send packets while pausing a transport\r\n      this.once(\"upgrade\", cleanupAndClose);\r\n      this.once(\"upgradeError\", cleanupAndClose);\r\n    };\r\n\r\n    if (\"opening\" === this.readyState || \"open\" === this.readyState) {\r\n      this.readyState = \"closing\";\r\n\r\n      if (this.writeBuffer.length) {\r\n        this.once(\"drain\", () => {\r\n          if (this.upgrading) {\r\n            waitForUpgrade();\r\n          } else {\r\n            close();\r\n          }\r\n        });\r\n      } else if (this.upgrading) {\r\n        waitForUpgrade();\r\n      } else {\r\n        close();\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Called upon transport error\r\n   *\r\n   * @api private\r\n   */\r\n  onError(err) {\r\n    debug(\"socket error %j\", err);\r\n    Socket.priorWebsocketSuccess = false;\r\n    this.emit(\"error\", err);\r\n    this.onClose(\"transport error\", err);\r\n  }\r\n\r\n  /**\r\n   * Called upon transport close.\r\n   *\r\n   * @api private\r\n   */\r\n  onClose(reason, desc) {\r\n    if (\r\n      \"opening\" === this.readyState ||\r\n      \"open\" === this.readyState ||\r\n      \"closing\" === this.readyState\r\n    ) {\r\n      debug('socket close with reason: \"%s\"', reason);\r\n\r\n      // clear timers\r\n      clearTimeout(this.pingIntervalTimer);\r\n      clearTimeout(this.pingTimeoutTimer);\r\n\r\n      // stop event from firing again for transport\r\n      this.transport.removeAllListeners(\"close\");\r\n\r\n      // ensure transport won't stay open\r\n      this.transport.close();\r\n\r\n      // ignore further transport communication\r\n      this.transport.removeAllListeners();\r\n\r\n      if (typeof removeEventListener === \"function\") {\r\n        removeEventListener(\"offline\", this.offlineEventListener, false);\r\n      }\r\n\r\n      // set ready state\r\n      this.readyState = \"closed\";\r\n\r\n      // clear session id\r\n      this.id = null;\r\n\r\n      // emit close event\r\n      this.emit(\"close\", reason, desc);\r\n\r\n      // clean buffers after, so users can still\r\n      // grab the buffers on `close` event\r\n      this.writeBuffer = [];\r\n      this.prevBufferLen = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Filters upgrades, returning only those matching client transports.\r\n   *\r\n   * @param {Array} server upgrades\r\n   * @api private\r\n   *\r\n   */\r\n  filterUpgrades(upgrades) {\r\n    const filteredUpgrades = [];\r\n    let i = 0;\r\n    const j = upgrades.length;\r\n    for (; i < j; i++) {\r\n      if (~this.transports.indexOf(upgrades[i]))\r\n        filteredUpgrades.push(upgrades[i]);\r\n    }\r\n    return filteredUpgrades;\r\n  }\r\n}\r\n\r\nSocket.priorWebsocketSuccess = false;\r\n\r\n/**\r\n * Protocol version.\r\n *\r\n * @api public\r\n */\r\n\r\nSocket.protocol = parser.protocol; // this is an int\r\n\r\nfunction clone(obj) {\r\n  const o = {};\r\n  for (let i in obj) {\r\n    if (obj.hasOwnProperty(i)) {\r\n      o[i] = obj[i];\r\n    }\r\n  }\r\n  return o;\r\n}\r\n\r\nmodule.exports = Socket;\r\n"]},"metadata":{},"sourceType":"script"}