{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nimport { useRadioGroup } from \"./use-radio-group\";\nvar [RadioGroupProvider, useRadioGroupContext] = createContext({\n  name: \"RadioGroupContext\",\n  strict: false\n});\nexport { useRadioGroupContext };\n\n/**\r\n * Used for multiple radios which are bound in one group,\r\n * and it indicates which option is selected.\r\n *\r\n * @see Docs https://chakra-ui.com/docs/form/radio\r\n */\nexport var RadioGroup = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n      colorScheme,\n      size,\n      variant,\n      children,\n      className\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"colorScheme\", \"size\", \"variant\", \"children\", \"className\"]);\n  var {\n    value,\n    onChange,\n    getRootProps,\n    name,\n    htmlProps\n  } = useRadioGroup(rest);\n  var group = React.useMemo(() => ({\n    name,\n    size,\n    onChange,\n    colorScheme,\n    value,\n    variant\n  }), [size, name, onChange, colorScheme, value, variant]);\n  var groupProps = getRootProps(htmlProps, ref);\n  var _className = cx(\"chakra-radio-group\", className);\n  return /*#__PURE__*/React.createElement(RadioGroupProvider, {\n    value: group\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({}, groupProps, {\n    className: _className\n  }), children));\n});\nif (__DEV__) {\n  RadioGroup.displayName = \"RadioGroup\";\n}","map":{"version":3,"names":["chakra","forwardRef","cx","__DEV__","createContext","React","useRadioGroup","RadioGroupProvider","useRadioGroupContext","name","strict","RadioGroup","props","ref","colorScheme","size","variant","children","className","rest","_objectWithoutPropertiesLoose","value","onChange","getRootProps","htmlProps","group","useMemo","groupProps","_className","createElement","div","_extends","displayName"],"sources":["../../src/radio-group.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  ThemingProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport { createContext } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport {\n  useRadioGroup,\n  UseRadioGroupProps,\n  UseRadioGroupReturn,\n} from \"./use-radio-group\"\n\nexport interface RadioGroupContext\n  extends Pick<UseRadioGroupReturn, \"onChange\" | \"value\" | \"name\">,\n    Omit<ThemingProps<\"Radio\">, \"orientation\"> {}\n\nconst [\n  RadioGroupProvider,\n  useRadioGroupContext,\n] = createContext<RadioGroupContext>({\n  name: \"RadioGroupContext\",\n  strict: false,\n})\n\nexport { useRadioGroupContext }\n\ntype Omitted =\n  | \"onChange\"\n  | \"value\"\n  | \"defaultValue\"\n  | \"defaultChecked\"\n  | \"children\"\nexport interface RadioGroupProps\n  extends UseRadioGroupProps,\n    Omit<HTMLChakraProps<\"div\">, Omitted>,\n    Omit<ThemingProps<\"Radio\">, \"orientation\"> {\n  children: React.ReactNode\n}\n\n/**\n * Used for multiple radios which are bound in one group,\n * and it indicates which option is selected.\n *\n * @see Docs https://chakra-ui.com/docs/form/radio\n */\nexport const RadioGroup = forwardRef<RadioGroupProps, \"div\">((props, ref) => {\n  const { colorScheme, size, variant, children, className, ...rest } = props\n\n  const { value, onChange, getRootProps, name, htmlProps } = useRadioGroup(rest)\n\n  const group = React.useMemo(\n    () => ({\n      name,\n      size,\n      onChange,\n      colorScheme,\n      value,\n      variant,\n    }),\n    [size, name, onChange, colorScheme, value, variant],\n  )\n\n  const groupProps = getRootProps(htmlProps, ref)\n  const _className = cx(\"chakra-radio-group\", className)\n\n  return (\n    <RadioGroupProvider value={group}>\n      <chakra.div {...groupProps} className={_className}>\n        {children}\n      </chakra.div>\n    </RadioGroupProvider>\n  )\n})\n\nif (__DEV__) {\n  RadioGroup.displayName = \"RadioGroup\"\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SACEA,MADF,EAEEC,UAFF,QAKO,mBALP;AAMA,SAASC,EAAT,EAAaC,OAAb,QAA4B,kBAA5B;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SACEC,aADF,QAIO,mBAJP;AAUA,IAAM,CACJC,kBADI,EAEJC,oBAFI,IAGFJ,aAAa,CAAoB;EACnCK,IAAI,EAAE,mBAD6B;EAEnCC,MAAM,EAAE;AAF2B,CAApB,CAHjB;AAQA,SAASF,oBAAT;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMG,UAAU,gBAAGV,UAAU,CAAyB,CAACW,KAAD,EAAQC,GAAR,KAAgB;EAC3E,IAAM;MAAEC,WAAF;MAAeC,IAAf;MAAqBC,OAArB;MAA8BC,QAA9B;MAAwCC;IAAxC,IAA+DN,KAArE;IAA4DO,IAA5D,GAAAC,6BAAA,CAAqER,KAArE;EAEA,IAAM;IAAES,KAAF;IAASC,QAAT;IAAmBC,YAAnB;IAAiCd,IAAjC;IAAuCe;EAAvC,IAAqDlB,aAAa,CAACa,IAAD,CAAxE;EAEA,IAAMM,KAAK,GAAGpB,KAAK,CAACqB,OAAN,CACZ,OAAO;IACLjB,IADK;IAELM,IAFK;IAGLO,QAHK;IAILR,WAJK;IAKLO,KALK;IAMLL;EANK,CAAP,CADY,EASZ,CAACD,IAAD,EAAON,IAAP,EAAaa,QAAb,EAAuBR,WAAvB,EAAoCO,KAApC,EAA2CL,OAA3C,CATY,CAAd;EAYA,IAAMW,UAAU,GAAGJ,YAAY,CAACC,SAAD,EAAYX,GAAZ,CAA/B;EACA,IAAMe,UAAU,GAAG1B,EAAE,CAAC,oBAAD,EAAuBgB,SAAvB,CAArB;EAEA,oBACEb,KAAA,CAAAwB,aAAA,CAACtB,kBAAD;IAAoBc,KAAK,EAAEI;EAA3B,gBACEpB,KAAA,CAAAwB,aAAA,CAAC7B,MAAD,CAAQ8B,GAAR,EAAAC,QAAA,KAAgBJ,UAAhB;IAA4BT,SAAS,EAAEU;EAAvC,IACGX,QADH,CADF,CADF;AAOD,CA3BmC,CAA7B;AA6BP,IAAId,OAAJ,EAAa;EACXQ,UAAU,CAACqB,WAAX,GAAyB,YAAzB;AACD"},"metadata":{},"sourceType":"module"}