{"ast":null,"code":"import { useState } from 'react';\n/**\r\n * creates a MutableRef with ref change callback\r\n * @param initialValue - initial ref value\r\n * @param {Function} callback - a callback to run when value changes\r\n *\r\n * @example\r\n * const ref = useCallbackRef(0, (newValue, oldValue) => console.log(oldValue, '->', newValue);\r\n * ref.current = 1;\r\n * // prints 0 -> 1\r\n *\r\n * @see https://reactjs.org/docs/hooks-reference.html#useref\r\n * @see https://github.com/theKashey/use-callback-ref#usecallbackref---to-replace-reactuseref\r\n * @returns {MutableRefObject}\r\n */\n\nexport function useCallbackRef(initialValue, callback) {\n  var ref = useState(function () {\n    return {\n      // value\n      value: initialValue,\n      // last callback\n      callback: callback,\n      // \"memoized\" public interface\n      facade: {\n        get current() {\n          return ref.value;\n        },\n\n        set current(value) {\n          var last = ref.value;\n\n          if (last !== value) {\n            ref.value = value;\n            ref.callback(value, last);\n          }\n        }\n\n      }\n    };\n  })[0]; // update callback\n\n  ref.callback = callback;\n  return ref.facade;\n}","map":{"version":3,"sources":["E:/Project File/Chatters-a-mern-app/frontend/node_modules/use-callback-ref/dist/es2015/useRef.js"],"names":["useState","useCallbackRef","initialValue","callback","ref","value","facade","current","last"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,cAAT,CAAwBC,YAAxB,EAAsCC,QAAtC,EAAgD;AACnD,MAAIC,GAAG,GAAGJ,QAAQ,CAAC,YAAY;AAAE,WAAQ;AACrC;AACAK,MAAAA,KAAK,EAAEH,YAF8B;AAGrC;AACAC,MAAAA,QAAQ,EAAEA,QAJ2B;AAKrC;AACAG,MAAAA,MAAM,EAAE;AACJ,YAAIC,OAAJ,GAAc;AACV,iBAAOH,GAAG,CAACC,KAAX;AACH,SAHG;;AAIJ,YAAIE,OAAJ,CAAYF,KAAZ,EAAmB;AACf,cAAIG,IAAI,GAAGJ,GAAG,CAACC,KAAf;;AACA,cAAIG,IAAI,KAAKH,KAAb,EAAoB;AAChBD,YAAAA,GAAG,CAACC,KAAJ,GAAYA,KAAZ;AACAD,YAAAA,GAAG,CAACD,QAAJ,CAAaE,KAAb,EAAoBG,IAApB;AACH;AACJ;;AAVG;AAN6B,KAAR;AAkB5B,GAlBa,CAAR,CAkBH,CAlBG,CAAV,CADmD,CAoBnD;;AACAJ,EAAAA,GAAG,CAACD,QAAJ,GAAeA,QAAf;AACA,SAAOC,GAAG,CAACE,MAAX;AACH","sourcesContent":["import { useState } from 'react';\r\n/**\r\n * creates a MutableRef with ref change callback\r\n * @param initialValue - initial ref value\r\n * @param {Function} callback - a callback to run when value changes\r\n *\r\n * @example\r\n * const ref = useCallbackRef(0, (newValue, oldValue) => console.log(oldValue, '->', newValue);\r\n * ref.current = 1;\r\n * // prints 0 -> 1\r\n *\r\n * @see https://reactjs.org/docs/hooks-reference.html#useref\r\n * @see https://github.com/theKashey/use-callback-ref#usecallbackref---to-replace-reactuseref\r\n * @returns {MutableRefObject}\r\n */\r\nexport function useCallbackRef(initialValue, callback) {\r\n    var ref = useState(function () { return ({\r\n        // value\r\n        value: initialValue,\r\n        // last callback\r\n        callback: callback,\r\n        // \"memoized\" public interface\r\n        facade: {\r\n            get current() {\r\n                return ref.value;\r\n            },\r\n            set current(value) {\r\n                var last = ref.value;\r\n                if (last !== value) {\r\n                    ref.value = value;\r\n                    ref.callback(value, last);\r\n                }\r\n            }\r\n        }\r\n    }); })[0];\r\n    // update callback\r\n    ref.callback = callback;\r\n    return ref.facade;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}