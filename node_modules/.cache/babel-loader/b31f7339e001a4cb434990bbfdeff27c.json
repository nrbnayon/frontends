{"ast":null,"code":"import { __assign } from 'tslib';\nimport { visualElement } from '../index.js';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.js';\nimport { htmlConfig } from '../html/visual-element.js';\nimport { buildSVGAttrs } from './utils/build-attrs.js';\nimport { camelToDash } from '../dom/utils/camel-to-dash.js';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.js';\nimport { isTransformProp } from '../html/utils/transform.js';\nimport { renderSVG } from './utils/render.js';\nimport { getDefaultValueType } from '../dom/value-types/defaults.js';\nimport { buildLayoutProjectionTransformOrigin, buildLayoutProjectionTransform } from '../html/utils/build-projection-transform.js';\nvar svgVisualElement = visualElement(__assign(__assign({}, htmlConfig), {\n  getBaseTarget: function (props, key) {\n    return props[key];\n  },\n  readValueFromInstance: function (domElement, key) {\n    var _a;\n\n    if (isTransformProp(key)) {\n      return ((_a = getDefaultValueType(key)) === null || _a === void 0 ? void 0 : _a.default) || 0;\n    }\n\n    key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n    return domElement.getAttribute(key);\n  },\n  scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n  build: function (_element, renderState, latestValues, projection, layoutState, options, props) {\n    var isProjectionTranform = projection.isEnabled && layoutState.isHydrated;\n    buildSVGAttrs(renderState, latestValues, projection, layoutState, options, props.transformTemplate, isProjectionTranform ? buildLayoutProjectionTransform : undefined, isProjectionTranform ? buildLayoutProjectionTransformOrigin : undefined);\n  },\n  render: renderSVG\n}));\nexport { svgVisualElement };","map":{"version":3,"sources":["E:/Hasan sir project/ChattersTwo/frontend/node_modules/framer-motion/dist/es/render/svg/visual-element.js"],"names":["__assign","visualElement","scrapeMotionValuesFromProps","htmlConfig","buildSVGAttrs","camelToDash","camelCaseAttributes","isTransformProp","renderSVG","getDefaultValueType","buildLayoutProjectionTransformOrigin","buildLayoutProjectionTransform","svgVisualElement","getBaseTarget","props","key","readValueFromInstance","domElement","_a","default","has","getAttribute","build","_element","renderState","latestValues","projection","layoutState","options","isProjectionTranform","isEnabled","isHydrated","transformTemplate","undefined","render"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,aAAT,QAA8B,aAA9B;AACA,SAASC,2BAAT,QAA4C,iCAA5C;AACA,SAASC,UAAT,QAA2B,2BAA3B;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,WAAT,QAA4B,+BAA5B;AACA,SAASC,mBAAT,QAAoC,6BAApC;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,mBAAT,QAAoC,gCAApC;AACA,SAASC,oCAAT,EAA+CC,8BAA/C,QAAqF,6CAArF;AAEA,IAAIC,gBAAgB,GAAGX,aAAa,CAACD,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKG,UAAL,CAAT,EAA2B;AAAEU,EAAAA,aAAa,EAAE,UAAUC,KAAV,EAAiBC,GAAjB,EAAsB;AACvG,WAAOD,KAAK,CAACC,GAAD,CAAZ;AACH,GAFmE;AAGpEC,EAAAA,qBAAqB,EAAE,UAAUC,UAAV,EAAsBF,GAAtB,EAA2B;AAC9C,QAAIG,EAAJ;;AACA,QAAIX,eAAe,CAACQ,GAAD,CAAnB,EAA0B;AACtB,aAAO,CAAC,CAACG,EAAE,GAAGT,mBAAmB,CAACM,GAAD,CAAzB,MAAoC,IAApC,IAA4CG,EAAE,KAAK,KAAK,CAAxD,GAA4D,KAAK,CAAjE,GAAqEA,EAAE,CAACC,OAAzE,KAAqF,CAA5F;AACH;;AACDJ,IAAAA,GAAG,GAAG,CAACT,mBAAmB,CAACc,GAApB,CAAwBL,GAAxB,CAAD,GAAgCV,WAAW,CAACU,GAAD,CAA3C,GAAmDA,GAAzD;AACA,WAAOE,UAAU,CAACI,YAAX,CAAwBN,GAAxB,CAAP;AACH,GAVmE;AAWpEb,EAAAA,2BAA2B,EAAEA,2BAXuC;AAYpEoB,EAAAA,KAAK,EAAE,UAAUC,QAAV,EAAoBC,WAApB,EAAiCC,YAAjC,EAA+CC,UAA/C,EAA2DC,WAA3D,EAAwEC,OAAxE,EAAiFd,KAAjF,EAAwF;AAC3F,QAAIe,oBAAoB,GAAGH,UAAU,CAACI,SAAX,IAAwBH,WAAW,CAACI,UAA/D;AACA3B,IAAAA,aAAa,CAACoB,WAAD,EAAcC,YAAd,EAA4BC,UAA5B,EAAwCC,WAAxC,EAAqDC,OAArD,EAA8Dd,KAAK,CAACkB,iBAApE,EAAuFH,oBAAoB,GAAGlB,8BAAH,GAAoCsB,SAA/I,EAA0JJ,oBAAoB,GACrLnB,oCADqL,GAErLuB,SAFO,CAAb;AAGH,GAjBmE;AAiBjEC,EAAAA,MAAM,EAAE1B;AAjByD,CAA3B,CAAT,CAApC;AAmBA,SAASI,gBAAT","sourcesContent":["import { __assign } from 'tslib';\r\nimport { visualElement } from '../index.js';\r\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.js';\r\nimport { htmlConfig } from '../html/visual-element.js';\r\nimport { buildSVGAttrs } from './utils/build-attrs.js';\r\nimport { camelToDash } from '../dom/utils/camel-to-dash.js';\r\nimport { camelCaseAttributes } from './utils/camel-case-attrs.js';\r\nimport { isTransformProp } from '../html/utils/transform.js';\r\nimport { renderSVG } from './utils/render.js';\r\nimport { getDefaultValueType } from '../dom/value-types/defaults.js';\r\nimport { buildLayoutProjectionTransformOrigin, buildLayoutProjectionTransform } from '../html/utils/build-projection-transform.js';\r\n\r\nvar svgVisualElement = visualElement(__assign(__assign({}, htmlConfig), { getBaseTarget: function (props, key) {\r\n        return props[key];\r\n    },\r\n    readValueFromInstance: function (domElement, key) {\r\n        var _a;\r\n        if (isTransformProp(key)) {\r\n            return ((_a = getDefaultValueType(key)) === null || _a === void 0 ? void 0 : _a.default) || 0;\r\n        }\r\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\r\n        return domElement.getAttribute(key);\r\n    },\r\n    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\r\n    build: function (_element, renderState, latestValues, projection, layoutState, options, props) {\r\n        var isProjectionTranform = projection.isEnabled && layoutState.isHydrated;\r\n        buildSVGAttrs(renderState, latestValues, projection, layoutState, options, props.transformTemplate, isProjectionTranform ? buildLayoutProjectionTransform : undefined, isProjectionTranform\r\n            ? buildLayoutProjectionTransformOrigin\r\n            : undefined);\r\n    }, render: renderSVG }));\r\n\r\nexport { svgVisualElement };\r\n"]},"metadata":{},"sourceType":"module"}