{"ast":null,"code":"import { useCallbackRef, useControllableProp } from \"@chakra-ui/hooks\";\nimport { clampValue, countDecimalPlaces, maxSafeInteger, minSafeInteger, toPrecision } from \"@chakra-ui/utils\";\nimport { useCallback, useState } from \"react\";\nexport function useCounter(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var {\n    onChange,\n    precision: precisionProp,\n    defaultValue,\n    value: valueProp,\n    step: stepProp = 1,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    keepWithinRange = true\n  } = props;\n  var onChangeProp = useCallbackRef(onChange);\n  var [valueState, setValue] = useState(() => {\n    var _cast;\n    if (defaultValue == null) return \"\";\n    return (_cast = cast(defaultValue, stepProp, precisionProp)) != null ? _cast : \"\";\n  });\n  /**\r\n   * Because the component that consumes this hook can be controlled or uncontrolled\r\n   * we'll keep track of that\r\n   */\n\n  var [isControlled, value] = useControllableProp(valueProp, valueState);\n  var decimalPlaces = getDecimalPlaces(parse(value), stepProp);\n  var precision = precisionProp != null ? precisionProp : decimalPlaces;\n  var update = useCallback(next => {\n    if (next === value) return;\n    if (!isControlled) {\n      setValue(next.toString());\n    }\n    onChangeProp == null ? void 0 : onChangeProp(next.toString(), parse(next));\n  }, [onChangeProp, isControlled, value]); // Function to clamp the value and round it to the precision\n\n  var clamp = useCallback(value => {\n    var nextValue = value;\n    if (keepWithinRange) {\n      nextValue = clampValue(nextValue, min, max);\n    }\n    return toPrecision(nextValue, precision);\n  }, [precision, keepWithinRange, max, min]);\n  var increment = useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n    var next;\n    /**\r\n     * Let's follow the native browser behavior for\r\n     * scenarios where the input starts empty (\"\")\r\n     */\n\n    if (value === \"\") {\n      /**\r\n       * If `min` is set, native input, starts at the `min`.\r\n       * Else, it starts at `step`\r\n       */\n      next = parse(step);\n    } else {\n      next = parse(value) + step;\n    }\n    next = clamp(next);\n    update(next);\n  }, [clamp, stepProp, update, value]);\n  var decrement = useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n    var next; // Same thing here. We'll follow native implementation\n\n    if (value === \"\") {\n      next = parse(-step);\n    } else {\n      next = parse(value) - step;\n    }\n    next = clamp(next);\n    update(next);\n  }, [clamp, stepProp, update, value]);\n  var reset = useCallback(() => {\n    var next;\n    if (defaultValue == null) {\n      next = \"\";\n    } else {\n      var _cast2;\n      next = (_cast2 = cast(defaultValue, stepProp, precisionProp)) != null ? _cast2 : min;\n    }\n    update(next);\n  }, [defaultValue, precisionProp, stepProp, update, min]);\n  var castValue = useCallback(value => {\n    var _cast3;\n    var nextValue = (_cast3 = cast(value, stepProp, precision)) != null ? _cast3 : min;\n    update(nextValue);\n  }, [precision, stepProp, update, min]);\n  var valueAsNumber = parse(value);\n  /**\r\n   * Common range checks\r\n   */\n\n  var isOutOfRange = valueAsNumber > max || valueAsNumber < min;\n  var isAtMax = valueAsNumber === max;\n  var isAtMin = valueAsNumber === min;\n  return {\n    isOutOfRange,\n    isAtMax,\n    isAtMin,\n    precision,\n    value,\n    valueAsNumber,\n    update,\n    reset,\n    increment,\n    decrement,\n    clamp,\n    cast: castValue,\n    setValue\n  };\n}\nfunction parse(value) {\n  return parseFloat(value.toString().replace(/[^\\w.-]+/g, \"\"));\n}\nfunction getDecimalPlaces(value, step) {\n  return Math.max(countDecimalPlaces(step), countDecimalPlaces(value));\n}\nfunction cast(value, step, precision) {\n  var parsedValue = parse(value);\n  if (Number.isNaN(parsedValue)) return undefined;\n  var decimalPlaces = getDecimalPlaces(parsedValue, step);\n  return toPrecision(parsedValue, precision != null ? precision : decimalPlaces);\n}","map":{"version":3,"names":["useCallbackRef","useControllableProp","clampValue","countDecimalPlaces","maxSafeInteger","minSafeInteger","toPrecision","useCallback","useState","useCounter","props","onChange","precision","precisionProp","defaultValue","value","valueProp","step","stepProp","min","max","keepWithinRange","onChangeProp","valueState","setValue","_cast","cast","isControlled","decimalPlaces","getDecimalPlaces","parse","update","next","toString","clamp","nextValue","increment","decrement","reset","_cast2","castValue","_cast3","valueAsNumber","isOutOfRange","isAtMax","isAtMin","parseFloat","replace","Math","parsedValue","Number","isNaN","undefined"],"sources":["../../src/use-counter.ts"],"sourcesContent":["import { useCallbackRef, useControllableProp } from \"@chakra-ui/hooks\"\nimport {\n  clampValue,\n  countDecimalPlaces,\n  maxSafeInteger,\n  minSafeInteger,\n  StringOrNumber,\n  toPrecision,\n} from \"@chakra-ui/utils\"\nimport { useCallback, useState } from \"react\"\n\nexport interface UseCounterProps {\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?(valueAsString: string, valueAsNumber: number): void\n  /**\n   * The number of decimal points used to round the value\n   */\n  precision?: number\n  /**\n   * The initial value of the counter. Should be less than `max` and greater than `min`\n   */\n  defaultValue?: StringOrNumber\n  /**\n   * The value of the counter. Should be less than `max` and greater than `min`\n   */\n  value?: StringOrNumber\n  /**\n   * The step used to increment or decrement the value\n   * @default 1\n   */\n  step?: number\n  /**\n   * The minimum value of the counter\n   * @default -Infinity\n   */\n  min?: number\n  /**\n   * The maximum value of the counter\n   * @default Infinity\n   */\n  max?: number\n  /**\n   * This controls the value update behavior in general.\n   *\n   * - If `true` and you use the stepper or up/down arrow keys,\n   *  the value will not exceed the `max` or go lower than `min`\n   *\n   * - If `false`, the value will be allowed to go out of range.\n   *\n   * @default true\n   */\n  keepWithinRange?: boolean\n}\n\nexport function useCounter(props: UseCounterProps = {}) {\n  const {\n    onChange,\n    precision: precisionProp,\n    defaultValue,\n    value: valueProp,\n    step: stepProp = 1,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    keepWithinRange = true,\n  } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n\n  const [valueState, setValue] = useState<StringOrNumber>(() => {\n    if (defaultValue == null) return \"\"\n    return cast(defaultValue, stepProp, precisionProp) ?? \"\"\n  })\n\n  /**\n   * Because the component that consumes this hook can be controlled or uncontrolled\n   * we'll keep track of that\n   */\n  const [isControlled, value] = useControllableProp(valueProp, valueState)\n\n  const decimalPlaces = getDecimalPlaces(parse(value), stepProp)\n\n  const precision = precisionProp ?? decimalPlaces\n\n  const update = useCallback(\n    (next: StringOrNumber) => {\n      if (next === value) return\n      if (!isControlled) {\n        setValue(next.toString())\n      }\n      onChangeProp?.(next.toString(), parse(next))\n    },\n    [onChangeProp, isControlled, value],\n  )\n\n  // Function to clamp the value and round it to the precision\n  const clamp = useCallback(\n    (value: number) => {\n      let nextValue = value\n\n      if (keepWithinRange) {\n        nextValue = clampValue(nextValue, min, max)\n      }\n\n      return toPrecision(nextValue, precision)\n    },\n    [precision, keepWithinRange, max, min],\n  )\n\n  const increment = useCallback(\n    (step = stepProp) => {\n      let next: StringOrNumber\n\n      /**\n       * Let's follow the native browser behavior for\n       * scenarios where the input starts empty (\"\")\n       */\n      if (value === \"\") {\n        /**\n         * If `min` is set, native input, starts at the `min`.\n         * Else, it starts at `step`\n         */\n        next = parse(step)\n      } else {\n        next = parse(value) + step\n      }\n\n      next = clamp(next as number)\n      update(next)\n    },\n    [clamp, stepProp, update, value],\n  )\n\n  const decrement = useCallback(\n    (step = stepProp) => {\n      let next: StringOrNumber\n\n      // Same thing here. We'll follow native implementation\n      if (value === \"\") {\n        next = parse(-step)\n      } else {\n        next = parse(value) - step\n      }\n\n      next = clamp(next as number)\n      update(next)\n    },\n    [clamp, stepProp, update, value],\n  )\n\n  const reset = useCallback(() => {\n    let next: StringOrNumber\n    if (defaultValue == null) {\n      next = \"\"\n    } else {\n      next = cast(defaultValue, stepProp, precisionProp) ?? min\n    }\n    update(next)\n  }, [defaultValue, precisionProp, stepProp, update, min])\n\n  const castValue = useCallback(\n    (value: StringOrNumber) => {\n      const nextValue = cast(value, stepProp, precision) ?? min\n      update(nextValue)\n    },\n    [precision, stepProp, update, min],\n  )\n\n  const valueAsNumber = parse(value)\n\n  /**\n   * Common range checks\n   */\n  const isOutOfRange = valueAsNumber > max || valueAsNumber < min\n  const isAtMax = valueAsNumber === max\n  const isAtMin = valueAsNumber === min\n\n  return {\n    isOutOfRange,\n    isAtMax,\n    isAtMin,\n    precision,\n    value,\n    valueAsNumber,\n    update,\n    reset,\n    increment,\n    decrement,\n    clamp,\n    cast: castValue,\n    setValue,\n  }\n}\n\nexport type UseCounterReturn = ReturnType<typeof useCounter>\n\nfunction parse(value: StringOrNumber) {\n  return parseFloat(value.toString().replace(/[^\\w.-]+/g, \"\"))\n}\n\nfunction getDecimalPlaces(value: number, step: number) {\n  return Math.max(countDecimalPlaces(step), countDecimalPlaces(value))\n}\n\nfunction cast(value: StringOrNumber, step: number, precision?: number) {\n  const parsedValue = parse(value)\n  if (Number.isNaN(parsedValue)) return undefined\n  const decimalPlaces = getDecimalPlaces(parsedValue, step)\n  return toPrecision(parsedValue, precision ?? decimalPlaces)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}