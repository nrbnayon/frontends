{"ast":null,"code":"var _classCallCheck = require(\"E:/Hasan sir project/ChattersTwo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"E:/Hasan sir project/ChattersTwo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"E:/Hasan sir project/ChattersTwo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"E:/Hasan sir project/ChattersTwo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar parser = require(\"engine.io-parser\");\n\nvar Emitter = require(\"component-emitter\");\n\nvar debug = require(\"debug\")(\"engine.io-client:transport\");\n\nvar Transport = /*#__PURE__*/function (_Emitter) {\n  \"use strict\";\n\n  _inherits(Transport, _Emitter);\n\n  var _super = _createSuper(Transport);\n\n  /**\r\n   * Transport abstract constructor.\r\n   *\r\n   * @param {Object} options.\r\n   * @api private\r\n   */\n  function Transport(opts) {\n    var _this;\n\n    _classCallCheck(this, Transport);\n\n    _this = _super.call(this);\n    _this.opts = opts;\n    _this.query = opts.query;\n    _this.readyState = \"\";\n    _this.socket = opts.socket;\n    return _this;\n  }\n  /**\r\n   * Emits an error.\r\n   *\r\n   * @param {String} str\r\n   * @return {Transport} for chaining\r\n   * @api public\r\n   */\n\n\n  _createClass(Transport, [{\n    key: \"onError\",\n    value: function onError(msg, desc) {\n      var err = new Error(msg);\n      err.type = \"TransportError\";\n      err.description = desc;\n      this.emit(\"error\", err);\n      return this;\n    }\n    /**\r\n     * Opens the transport.\r\n     *\r\n     * @api public\r\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      if (\"closed\" === this.readyState || \"\" === this.readyState) {\n        this.readyState = \"opening\";\n        this.doOpen();\n      }\n\n      return this;\n    }\n    /**\r\n     * Closes the transport.\r\n     *\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n        this.doClose();\n        this.onClose();\n      }\n\n      return this;\n    }\n    /**\r\n     * Sends multiple packets.\r\n     *\r\n     * @param {Array} packets\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(packets) {\n      if (\"open\" === this.readyState) {\n        this.write(packets);\n      } else {\n        // this might happen if the transport was silently closed in the beforeunload event handler\n        debug(\"transport is not open, discarding packets\");\n      }\n    }\n    /**\r\n     * Called upon open\r\n     *\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"onOpen\",\n    value: function onOpen() {\n      this.readyState = \"open\";\n      this.writable = true;\n      this.emit(\"open\");\n    }\n    /**\r\n     * Called with data.\r\n     *\r\n     * @param {String} data\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"onData\",\n    value: function onData(data) {\n      var packet = parser.decodePacket(data, this.socket.binaryType);\n      this.onPacket(packet);\n    }\n    /**\r\n     * Called with a decoded packet.\r\n     */\n\n  }, {\n    key: \"onPacket\",\n    value: function onPacket(packet) {\n      this.emit(\"packet\", packet);\n    }\n    /**\r\n     * Called upon close.\r\n     *\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"onClose\",\n    value: function onClose() {\n      this.readyState = \"closed\";\n      this.emit(\"close\");\n    }\n  }]);\n\n  return Transport;\n}(Emitter);\n\nmodule.exports = Transport;","map":{"version":3,"sources":["E:/Hasan sir project/ChattersTwo/frontend/node_modules/engine.io-client/lib/transport.js"],"names":["parser","require","Emitter","debug","Transport","opts","query","readyState","socket","msg","desc","err","Error","type","description","emit","doOpen","doClose","onClose","packets","write","writable","data","packet","decodePacket","binaryType","onPacket","module","exports"],"mappings":";;;;;;;;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAAtB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,mBAAD,CAAvB;;AACA,IAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAAP,CAAiB,4BAAjB,CAAd;;IAEMG,S;;;;;;;AACJ;AACF;AACA;AACA;AACA;AACA;AACE,qBAAYC,IAAZ,EAAkB;AAAA;;AAAA;;AAChB;AAEA,UAAKA,IAAL,GAAYA,IAAZ;AACA,UAAKC,KAAL,GAAaD,IAAI,CAACC,KAAlB;AACA,UAAKC,UAAL,GAAkB,EAAlB;AACA,UAAKC,MAAL,GAAcH,IAAI,CAACG,MAAnB;AANgB;AAOjB;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;;WACE,iBAAQC,GAAR,EAAaC,IAAb,EAAmB;AACjB,UAAMC,GAAG,GAAG,IAAIC,KAAJ,CAAUH,GAAV,CAAZ;AACAE,MAAAA,GAAG,CAACE,IAAJ,GAAW,gBAAX;AACAF,MAAAA,GAAG,CAACG,WAAJ,GAAkBJ,IAAlB;AACA,WAAKK,IAAL,CAAU,OAAV,EAAmBJ,GAAnB;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;;WACE,gBAAO;AACL,UAAI,aAAa,KAAKJ,UAAlB,IAAgC,OAAO,KAAKA,UAAhD,EAA4D;AAC1D,aAAKA,UAAL,GAAkB,SAAlB;AACA,aAAKS,MAAL;AACD;;AAED,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;;WACE,iBAAQ;AACN,UAAI,cAAc,KAAKT,UAAnB,IAAiC,WAAW,KAAKA,UAArD,EAAiE;AAC/D,aAAKU,OAAL;AACA,aAAKC,OAAL;AACD;;AAED,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,cAAKC,OAAL,EAAc;AACZ,UAAI,WAAW,KAAKZ,UAApB,EAAgC;AAC9B,aAAKa,KAAL,CAAWD,OAAX;AACD,OAFD,MAEO;AACL;AACAhB,QAAAA,KAAK,CAAC,2CAAD,CAAL;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;;WACE,kBAAS;AACP,WAAKI,UAAL,GAAkB,MAAlB;AACA,WAAKc,QAAL,GAAgB,IAAhB;AACA,WAAKN,IAAL,CAAU,MAAV;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,gBAAOO,IAAP,EAAa;AACX,UAAMC,MAAM,GAAGvB,MAAM,CAACwB,YAAP,CAAoBF,IAApB,EAA0B,KAAKd,MAAL,CAAYiB,UAAtC,CAAf;AACA,WAAKC,QAAL,CAAcH,MAAd;AACD;AAED;AACF;AACA;;;;WACE,kBAASA,MAAT,EAAiB;AACf,WAAKR,IAAL,CAAU,QAAV,EAAoBQ,MAApB;AACD;AAED;AACF;AACA;AACA;AACA;;;;WACE,mBAAU;AACR,WAAKhB,UAAL,GAAkB,QAAlB;AACA,WAAKQ,IAAL,CAAU,OAAV;AACD;;;;EA/GqBb,O;;AAkHxByB,MAAM,CAACC,OAAP,GAAiBxB,SAAjB","sourcesContent":["const parser = require(\"engine.io-parser\");\r\nconst Emitter = require(\"component-emitter\");\r\nconst debug = require(\"debug\")(\"engine.io-client:transport\");\r\n\r\nclass Transport extends Emitter {\r\n  /**\r\n   * Transport abstract constructor.\r\n   *\r\n   * @param {Object} options.\r\n   * @api private\r\n   */\r\n  constructor(opts) {\r\n    super();\r\n\r\n    this.opts = opts;\r\n    this.query = opts.query;\r\n    this.readyState = \"\";\r\n    this.socket = opts.socket;\r\n  }\r\n\r\n  /**\r\n   * Emits an error.\r\n   *\r\n   * @param {String} str\r\n   * @return {Transport} for chaining\r\n   * @api public\r\n   */\r\n  onError(msg, desc) {\r\n    const err = new Error(msg);\r\n    err.type = \"TransportError\";\r\n    err.description = desc;\r\n    this.emit(\"error\", err);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Opens the transport.\r\n   *\r\n   * @api public\r\n   */\r\n  open() {\r\n    if (\"closed\" === this.readyState || \"\" === this.readyState) {\r\n      this.readyState = \"opening\";\r\n      this.doOpen();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Closes the transport.\r\n   *\r\n   * @api private\r\n   */\r\n  close() {\r\n    if (\"opening\" === this.readyState || \"open\" === this.readyState) {\r\n      this.doClose();\r\n      this.onClose();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sends multiple packets.\r\n   *\r\n   * @param {Array} packets\r\n   * @api private\r\n   */\r\n  send(packets) {\r\n    if (\"open\" === this.readyState) {\r\n      this.write(packets);\r\n    } else {\r\n      // this might happen if the transport was silently closed in the beforeunload event handler\r\n      debug(\"transport is not open, discarding packets\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called upon open\r\n   *\r\n   * @api private\r\n   */\r\n  onOpen() {\r\n    this.readyState = \"open\";\r\n    this.writable = true;\r\n    this.emit(\"open\");\r\n  }\r\n\r\n  /**\r\n   * Called with data.\r\n   *\r\n   * @param {String} data\r\n   * @api private\r\n   */\r\n  onData(data) {\r\n    const packet = parser.decodePacket(data, this.socket.binaryType);\r\n    this.onPacket(packet);\r\n  }\r\n\r\n  /**\r\n   * Called with a decoded packet.\r\n   */\r\n  onPacket(packet) {\r\n    this.emit(\"packet\", packet);\r\n  }\r\n\r\n  /**\r\n   * Called upon close.\r\n   *\r\n   * @api private\r\n   */\r\n  onClose() {\r\n    this.readyState = \"closed\";\r\n    this.emit(\"close\");\r\n  }\r\n}\r\n\r\nmodule.exports = Transport;\r\n"]},"metadata":{},"sourceType":"script"}