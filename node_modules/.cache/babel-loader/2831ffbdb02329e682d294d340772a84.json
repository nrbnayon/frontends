{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { callAllHandlers } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useControllableProp } from \"./use-controllable\";\nimport { useId } from \"./use-id\";\nexport function useDisclosure(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp\n  } = props;\n  var [isOpenState, setIsOpen] = React.useState(props.defaultIsOpen || false);\n  var [isControlled, isOpen] = useControllableProp(isOpenProp, isOpenState);\n  var id = useId(idProp, \"disclosure\");\n  var onClose = React.useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n    onCloseProp == null ? void 0 : onCloseProp();\n  }, [isControlled, onCloseProp]);\n  var onOpen = React.useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n    onOpenProp == null ? void 0 : onOpenProp();\n  }, [isControlled, onOpenProp]);\n  var onToggle = React.useCallback(() => {\n    var action = isOpen ? onClose : onOpen;\n    action();\n  }, [isOpen, onOpen, onClose]);\n  return {\n    isOpen: !!isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps: function getButtonProps(props) {\n      if (props === void 0) {\n        props = {};\n      }\n      return _extends({}, props, {\n        \"aria-expanded\": \"true\",\n        \"aria-controls\": id,\n        onClick: callAllHandlers(props.onClick, onToggle)\n      });\n    },\n    getDisclosureProps: function getDisclosureProps(props) {\n      if (props === void 0) {\n        props = {};\n      }\n      return _extends({}, props, {\n        hidden: !isOpen,\n        id\n      });\n    }\n  };\n}","map":{"version":3,"names":["callAllHandlers","React","useControllableProp","useId","useDisclosure","props","onClose","onCloseProp","onOpen","onOpenProp","isOpen","isOpenProp","id","idProp","isOpenState","setIsOpen","useState","defaultIsOpen","isControlled","useCallback","onToggle","action","getButtonProps","_extends","onClick","getDisclosureProps","hidden"],"sources":["../../src/use-disclosure.ts"],"sourcesContent":["import { callAllHandlers } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useControllableProp } from \"./use-controllable\"\nimport { useId } from \"./use-id\"\n\nexport interface UseDisclosureProps {\n  isOpen?: boolean\n  defaultIsOpen?: boolean\n  onClose?(): void\n  onOpen?(): void\n  id?: string\n}\n\nexport function useDisclosure(props: UseDisclosureProps = {}) {\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp,\n  } = props\n\n  const [isOpenState, setIsOpen] = React.useState(props.defaultIsOpen || false)\n  const [isControlled, isOpen] = useControllableProp(isOpenProp, isOpenState)\n\n  const id = useId(idProp, \"disclosure\")\n\n  const onClose = React.useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false)\n    }\n    onCloseProp?.()\n  }, [isControlled, onCloseProp])\n\n  const onOpen = React.useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true)\n    }\n    onOpenProp?.()\n  }, [isControlled, onOpenProp])\n\n  const onToggle = React.useCallback(() => {\n    const action = isOpen ? onClose : onOpen\n    action()\n  }, [isOpen, onOpen, onClose])\n\n  return {\n    isOpen: !!isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps: (props: any = {}) => ({\n      ...props,\n      \"aria-expanded\": \"true\",\n      \"aria-controls\": id,\n      onClick: callAllHandlers(props.onClick, onToggle),\n    }),\n    getDisclosureProps: (props: any = {}) => ({\n      ...props,\n      hidden: !isOpen,\n      id,\n    }),\n  }\n}\n\nexport type UseDisclosureReturn = ReturnType<typeof useDisclosure>\n"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,eAAT,QAAgC,kBAAhC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,mBAAT,QAAoC,oBAApC;AACA,SAASC,KAAT,QAAsB,UAAtB;AAUA,OAAO,SAASC,aAATA,CAAuBC,KAAvB,EAAuD;EAAA,IAAhCA,KAAgC;IAAhCA,KAAgC,GAAJ,EAAI;EAAA;EAC5D,IAAM;IACJC,OAAO,EAAEC,WADL;IAEJC,MAAM,EAAEC,UAFJ;IAGJC,MAAM,EAAEC,UAHJ;IAIJC,EAAE,EAAEC;EAJA,IAKFR,KALJ;EAOA,IAAM,CAACS,WAAD,EAAcC,SAAd,IAA2Bd,KAAK,CAACe,QAAN,CAAeX,KAAK,CAACY,aAAN,IAAuB,KAAtC,CAAjC;EACA,IAAM,CAACC,YAAD,EAAeR,MAAf,IAAyBR,mBAAmB,CAACS,UAAD,EAAaG,WAAb,CAAlD;EAEA,IAAMF,EAAE,GAAGT,KAAK,CAACU,MAAD,EAAS,YAAT,CAAhB;EAEA,IAAMP,OAAO,GAAGL,KAAK,CAACkB,WAAN,CAAkB,MAAM;IACtC,IAAI,CAACD,YAAL,EAAmB;MACjBH,SAAS,CAAC,KAAD,CAAT;IACD;IACDR,WAAW,QAAX,YAAAA,WAAW;EACZ,CALe,EAKb,CAACW,YAAD,EAAeX,WAAf,CALa,CAAhB;EAOA,IAAMC,MAAM,GAAGP,KAAK,CAACkB,WAAN,CAAkB,MAAM;IACrC,IAAI,CAACD,YAAL,EAAmB;MACjBH,SAAS,CAAC,IAAD,CAAT;IACD;IACDN,UAAU,QAAV,YAAAA,UAAU;EACX,CALc,EAKZ,CAACS,YAAD,EAAeT,UAAf,CALY,CAAf;EAOA,IAAMW,QAAQ,GAAGnB,KAAK,CAACkB,WAAN,CAAkB,MAAM;IACvC,IAAME,MAAM,GAAGX,MAAM,GAAGJ,OAAH,GAAaE,MAAlC;IACAa,MAAM;EACP,CAHgB,EAGd,CAACX,MAAD,EAASF,MAAT,EAAiBF,OAAjB,CAHc,CAAjB;EAKA,OAAO;IACLI,MAAM,EAAE,CAAC,CAACA,MADL;IAELF,MAFK;IAGLF,OAHK;IAILc,QAJK;IAKLF,YALK;IAMLI,cAAc,EAAE,SAAAA,eAACjB,KAAD;MAAA,IAACA,KAAD;QAACA,KAAD,GAAc,EAAd;MAAA;MAAA,OAAAkB,QAAA,KACXlB,KADW;QAEd,iBAAiB,MAFH;QAGd,iBAAiBO,EAHH;QAIdY,OAAO,EAAExB,eAAe,CAACK,KAAK,CAACmB,OAAP,EAAgBJ,QAAhB;MAJV;IAAA,CANX;IAYLK,kBAAkB,EAAE,SAAAA,mBAACpB,KAAD;MAAA,IAACA,KAAD;QAACA,KAAD,GAAc,EAAd;MAAA;MAAA,OAAAkB,QAAA,KACflB,KADe;QAElBqB,MAAM,EAAE,CAAChB,MAFS;QAGlBE;MAHkB;IAAA;EAZf,CAAP;AAkBD"},"metadata":{},"sourceType":"module"}