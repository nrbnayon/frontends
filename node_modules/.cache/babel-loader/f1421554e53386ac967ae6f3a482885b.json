{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/utils\";\nimport { useFormControlContext } from \"./form-control\";\n\n/**\r\n * React hook that provides the props that should be spread on to\r\n * input fields (`input`, `select`, `textarea`, etc.).\r\n *\r\n * It provides a convenient way to control a form fields, validation\r\n * and helper text.\r\n */\nexport function useFormControl(props) {\n  var _useFormControlProps = useFormControlProps(props),\n    {\n      isDisabled,\n      isInvalid,\n      isReadOnly,\n      isRequired\n    } = _useFormControlProps,\n    rest = _objectWithoutPropertiesLoose(_useFormControlProps, [\"isDisabled\", \"isInvalid\", \"isReadOnly\", \"isRequired\"]);\n  return _extends({}, rest, {\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly)\n  });\n}\nexport function useFormControlProps(props) {\n  var _ref, _ref2, _ref3;\n  var field = useFormControlContext();\n  var {\n      id,\n      disabled,\n      readOnly,\n      required,\n      isRequired,\n      isInvalid,\n      isReadOnly,\n      isDisabled,\n      onFocus,\n      onBlur\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"id\", \"disabled\", \"readOnly\", \"required\", \"isRequired\", \"isInvalid\", \"isReadOnly\", \"isDisabled\", \"onFocus\", \"onBlur\"]);\n  var labelIds = []; // Error message must be described first in all scenarios.\n\n  if (field != null && field.hasFeedbackText && field != null && field.isInvalid) {\n    labelIds.push(field.feedbackId);\n  }\n  if (field != null && field.hasHelpText) {\n    labelIds.push(field.helpTextId);\n  }\n  return _extends({}, rest, {\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id != null ? id : field == null ? void 0 : field.id,\n    isDisabled: (_ref = disabled != null ? disabled : isDisabled) != null ? _ref : field == null ? void 0 : field.isDisabled,\n    isReadOnly: (_ref2 = readOnly != null ? readOnly : isReadOnly) != null ? _ref2 : field == null ? void 0 : field.isReadOnly,\n    isRequired: (_ref3 = required != null ? required : isRequired) != null ? _ref3 : field == null ? void 0 : field.isRequired,\n    isInvalid: isInvalid != null ? isInvalid : field == null ? void 0 : field.isInvalid,\n    onFocus: callAllHandlers(field == null ? void 0 : field.onFocus, onFocus),\n    onBlur: callAllHandlers(field == null ? void 0 : field.onBlur, onBlur)\n  });\n}","map":{"version":3,"names":["ariaAttr","callAllHandlers","useFormControlContext","useFormControl","props","_useFormControlProps","useFormControlProps","isDisabled","isInvalid","isReadOnly","isRequired","rest","_objectWithoutPropertiesLoose","_extends","disabled","readOnly","required","_ref","_ref2","_ref3","field","id","onFocus","onBlur","labelIds","hasFeedbackText","push","feedbackId","hasHelpText","helpTextId","join","undefined"],"sources":["../../src/use-form-control.ts"],"sourcesContent":["import { ariaAttr, callAllHandlers } from \"@chakra-ui/utils\"\nimport { FocusEventHandler } from \"react\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: FocusEventHandler<T>\n  onBlur?: FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const {\n    isDisabled,\n    isInvalid,\n    isReadOnly,\n    isRequired,\n    ...rest\n  } = useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,eAAnB,QAA0C,kBAA1C;AAEA,SAA6BC,qBAA7B,QAA0D,gBAA1D;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAATA,CACLC,KADK,EAEL;EACA,IAAAC,oBAAA,GAMIC,mBAAmB,CAACF,KAAD,CANvB;IAAM;MACJG,UADI;MAEJC,SAFI;MAGJC,UAHI;MAIJC;IAJI,CAAN,GAAAL,oBAAA;IAKKM,IALL,GAAAC,6BAAA,CAAAP,oBAAA;EAQA,OAAAQ,QAAA,KACKF,IADL;IAEEG,QAAQ,EAAEP,UAFZ;IAGEQ,QAAQ,EAAEN,UAHZ;IAIEO,QAAQ,EAAEN,UAJZ;IAKE,gBAAgBV,QAAQ,CAACQ,SAAD,CAL1B;IAME,iBAAiBR,QAAQ,CAACU,UAAD,CAN3B;IAOE,iBAAiBV,QAAQ,CAACS,UAAD;EAP3B;AASD;AAED,OAAO,SAASH,mBAATA,CACLF,KADK,EAEL;EAAA,IAAAa,IAAA,EAAAC,KAAA,EAAAC,KAAA;EACA,IAAMC,KAAK,GAAGlB,qBAAqB,EAAnC;EAEA,IAAM;MACJmB,EADI;MAEJP,QAFI;MAGJC,QAHI;MAIJC,QAJI;MAKJN,UALI;MAMJF,SANI;MAOJC,UAPI;MAQJF,UARI;MASJe,OATI;MAUJC;IAVI,IAYFnB,KAZJ;IAWKO,IAXL,GAAAC,6BAAA,CAYIR,KAZJ;EAcA,IAAMoB,QAAkB,GAAG,EAA3B,CAjBA,CAmBA;;EACA,IAAIJ,KAAK,QAAL,IAAAA,KAAK,CAAEK,eAAP,IAA0BL,KAA1B,YAA0BA,KAAK,CAAEZ,SAArC,EAAgD;IAC9CgB,QAAQ,CAACE,IAAT,CAAcN,KAAK,CAACO,UAApB;EACD;EAED,IAAIP,KAAJ,YAAIA,KAAK,CAAEQ,WAAX,EAAwB;IACtBJ,QAAQ,CAACE,IAAT,CAAcN,KAAK,CAACS,UAApB;EACD;EAED,OAAAhB,QAAA,KACKF,IADL;IAEE,oBAAoBa,QAAQ,CAACM,IAAT,CAAc,GAAd,KAAsBC,SAF5C;IAGEV,EAAE,EAAEA,EAAF,WAAEA,EAAF,GAAQD,KAAR,oBAAQA,KAAK,CAAEC,EAHnB;IAIEd,UAAU,GAAAU,IAAA,GAAEH,QAAF,WAAEA,QAAF,GAAcP,UAAd,YAAAU,IAAA,GAA4BG,KAA5B,oBAA4BA,KAAK,CAAEb,UAJ/C;IAKEE,UAAU,GAAAS,KAAA,GAAEH,QAAF,WAAEA,QAAF,GAAcN,UAAd,YAAAS,KAAA,GAA4BE,KAA5B,oBAA4BA,KAAK,CAAEX,UAL/C;IAMEC,UAAU,GAAAS,KAAA,GAAEH,QAAF,WAAEA,QAAF,GAAcN,UAAd,YAAAS,KAAA,GAA4BC,KAA5B,oBAA4BA,KAAK,CAAEV,UAN/C;IAOEF,SAAS,EAAEA,SAAF,WAAEA,SAAF,GAAeY,KAAf,oBAAeA,KAAK,CAAEZ,SAPjC;IAQEc,OAAO,EAAErB,eAAe,CAACmB,KAAD,oBAACA,KAAK,CAAEE,OAAR,EAAiBA,OAAjB,CAR1B;IASEC,MAAM,EAAEtB,eAAe,CAACmB,KAAD,oBAACA,KAAK,CAAEG,MAAR,EAAgBA,MAAhB;EATzB;AAWD"},"metadata":{},"sourceType":"module"}