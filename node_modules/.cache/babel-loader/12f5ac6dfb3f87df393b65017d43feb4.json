{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { chakra, forwardRef, useStyles } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nvar placements = {\n  left: {\n    marginEnd: \"-1px\",\n    borderEndRadius: 0,\n    borderEndColor: \"transparent\"\n  },\n  right: {\n    marginStart: \"-1px\",\n    borderStartRadius: 0,\n    borderStartColor: \"transparent\"\n  }\n};\nvar StyledAddon = chakra(\"div\", {\n  baseStyle: {\n    flex: \"0 0 auto\",\n    width: \"auto\",\n    display: \"flex\",\n    alignItems: \"center\",\n    whiteSpace: \"nowrap\"\n  }\n});\n\n/**\r\n * InputAddon\r\n *\r\n * Element to append or prepend to an input\r\n */\nexport var InputAddon = /*#__PURE__*/forwardRef((props, ref) => {\n  var _placements$placement;\n  var {\n      placement = \"left\"\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, [\"placement\"]);\n  var placementStyles = (_placements$placement = placements[placement]) != null ? _placements$placement : {};\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(StyledAddon, _extends({\n    ref: ref\n  }, rest, {\n    __css: _extends({}, styles.addon, placementStyles)\n  }));\n});\nif (__DEV__) {\n  InputAddon.displayName = \"InputAddon\";\n}\n/**\r\n * InputLeftAddon\r\n *\r\n * Element to append to the left of an input\r\n */\n\nexport var InputLeftAddon = /*#__PURE__*/forwardRef((props, ref) => /*#__PURE__*/React.createElement(InputAddon, _extends({\n  ref: ref,\n  placement: \"left\"\n}, props, {\n  className: cx(\"chakra-input__left-addon\", props.className)\n})));\nif (__DEV__) {\n  InputLeftAddon.displayName = \"InputLeftAddon\";\n} // This is used in `input-group.tsx`\n\nInputLeftAddon.id = \"InputLeftAddon\";\n/**\r\n * InputRightAddon\r\n *\r\n * Element to append to the right of an input\r\n */\n\nexport var InputRightAddon = /*#__PURE__*/forwardRef((props, ref) => /*#__PURE__*/React.createElement(InputAddon, _extends({\n  ref: ref,\n  placement: \"right\"\n}, props, {\n  className: cx(\"chakra-input__right-addon\", props.className)\n})));\nif (__DEV__) {\n  InputRightAddon.displayName = \"InputRightAddon\";\n} // This is used in `input-group.tsx`\n\nInputRightAddon.id = \"InputRightAddon\";","map":{"version":3,"names":["chakra","forwardRef","useStyles","cx","__DEV__","React","placements","left","marginEnd","borderEndRadius","borderEndColor","right","marginStart","borderStartRadius","borderStartColor","StyledAddon","baseStyle","flex","width","display","alignItems","whiteSpace","InputAddon","props","ref","_placements$placement","placement","rest","_objectWithoutPropertiesLoose","placementStyles","styles","createElement","_extends","__css","addon","displayName","InputLeftAddon","className","id","InputRightAddon"],"sources":["../../src/input-addon.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ntype Placement = \"left\" | \"right\"\n\nconst placements = {\n  left: {\n    marginEnd: \"-1px\",\n    borderEndRadius: 0,\n    borderEndColor: \"transparent\",\n  },\n  right: {\n    marginStart: \"-1px\",\n    borderStartRadius: 0,\n    borderStartColor: \"transparent\",\n  },\n}\n\nconst StyledAddon = chakra(\"div\", {\n  baseStyle: {\n    flex: \"0 0 auto\",\n    width: \"auto\",\n    display: \"flex\",\n    alignItems: \"center\",\n    whiteSpace: \"nowrap\",\n  },\n})\n\nexport interface InputAddonProps extends HTMLChakraProps<\"div\"> {\n  placement?: Placement\n}\n\n/**\n * InputAddon\n *\n * Element to append or prepend to an input\n */\nexport const InputAddon = forwardRef<InputAddonProps, \"div\">((props, ref) => {\n  const { placement = \"left\", ...rest } = props\n  const placementStyles = placements[placement] ?? {}\n  const styles = useStyles()\n\n  return (\n    <StyledAddon\n      ref={ref}\n      {...rest}\n      __css={{\n        ...styles.addon,\n        ...placementStyles,\n      }}\n    />\n  )\n})\n\nif (__DEV__) {\n  InputAddon.displayName = \"InputAddon\"\n}\n\n/**\n * InputLeftAddon\n *\n * Element to append to the left of an input\n */\nexport const InputLeftAddon = forwardRef<InputAddonProps, \"div\">(\n  (props, ref) => (\n    <InputAddon\n      ref={ref}\n      placement=\"left\"\n      {...props}\n      className={cx(\"chakra-input__left-addon\", props.className)}\n    />\n  ),\n)\n\nif (__DEV__) {\n  InputLeftAddon.displayName = \"InputLeftAddon\"\n}\n\n// This is used in `input-group.tsx`\nInputLeftAddon.id = \"InputLeftAddon\"\n\n/**\n * InputRightAddon\n *\n * Element to append to the right of an input\n */\nexport const InputRightAddon = forwardRef<InputAddonProps, \"div\">(\n  (props, ref) => (\n    <InputAddon\n      ref={ref}\n      placement=\"right\"\n      {...props}\n      className={cx(\"chakra-input__right-addon\", props.className)}\n    />\n  ),\n)\n\nif (__DEV__) {\n  InputRightAddon.displayName = \"InputRightAddon\"\n}\n\n// This is used in `input-group.tsx`\nInputRightAddon.id = \"InputRightAddon\"\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SACEA,MADF,EAEEC,UAFF,EAGEC,SAHF,QAKO,mBALP;AAMA,SAASC,EAAT,EAAaC,OAAb,QAA4B,kBAA5B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAIA,IAAMC,UAAU,GAAG;EACjBC,IAAI,EAAE;IACJC,SAAS,EAAE,MADP;IAEJC,eAAe,EAAE,CAFb;IAGJC,cAAc,EAAE;EAHZ,CADW;EAMjBC,KAAK,EAAE;IACLC,WAAW,EAAE,MADR;IAELC,iBAAiB,EAAE,CAFd;IAGLC,gBAAgB,EAAE;EAHb;AANU,CAAnB;AAaA,IAAMC,WAAW,GAAGf,MAAM,CAAC,KAAD,EAAQ;EAChCgB,SAAS,EAAE;IACTC,IAAI,EAAE,UADG;IAETC,KAAK,EAAE,MAFE;IAGTC,OAAO,EAAE,MAHA;IAITC,UAAU,EAAE,QAJH;IAKTC,UAAU,EAAE;EALH;AADqB,CAAR,CAA1B;;AAcA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,UAAU,gBAAGrB,UAAU,CAAyB,CAACsB,KAAD,EAAQC,GAAR,KAAgB;EAAA,IAAAC,qBAAA;EAC3E,IAAM;MAAEC,SAAS,GAAG;IAAd,IAAkCH,KAAxC;IAA+BI,IAA/B,GAAAC,6BAAA,CAAwCL,KAAxC;EACA,IAAMM,eAAe,IAAAJ,qBAAA,GAAGnB,UAAU,CAACoB,SAAD,CAAb,YAAAD,qBAAA,GAA4B,EAAjD;EACA,IAAMK,MAAM,GAAG5B,SAAS,EAAxB;EAEA,oBACEG,KAAA,CAAA0B,aAAA,CAAChB,WAAD,EAAAiB,QAAA;IACER,GAAG,EAAEA;EADP,GAEMG,IAFN;IAGEM,KAAK,EAAAD,QAAA,KACAF,MAAM,CAACI,KADP,EAEAL,eAFA;EAHP,GADF;AAUD,CAfmC,CAA7B;AAiBP,IAAIzB,OAAJ,EAAa;EACXkB,UAAU,CAACa,WAAX,GAAyB,YAAzB;AACD;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,cAAc,gBAAGnC,UAAU,CACtC,CAACsB,KAAD,EAAQC,GAAR,kBACEnB,KAAA,CAAA0B,aAAA,CAACT,UAAD,EAAAU,QAAA;EACER,GAAG,EAAEA,GADP;EAEEE,SAAS,EAAC;AAFZ,GAGMH,KAHN;EAIEc,SAAS,EAAElC,EAAE,CAAC,0BAAD,EAA6BoB,KAAK,CAACc,SAAnC;AAJf,GAFoC,CAAjC;AAWP,IAAIjC,OAAJ,EAAa;EACXgC,cAAc,CAACD,WAAf,GAA6B,gBAA7B;AACD,C,CAED;;AACAC,cAAc,CAACE,EAAf,GAAoB,gBAApB;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,eAAe,gBAAGtC,UAAU,CACvC,CAACsB,KAAD,EAAQC,GAAR,kBACEnB,KAAA,CAAA0B,aAAA,CAACT,UAAD,EAAAU,QAAA;EACER,GAAG,EAAEA,GADP;EAEEE,SAAS,EAAC;AAFZ,GAGMH,KAHN;EAIEc,SAAS,EAAElC,EAAE,CAAC,2BAAD,EAA8BoB,KAAK,CAACc,SAApC;AAJf,GAFqC,CAAlC;AAWP,IAAIjC,OAAJ,EAAa;EACXmC,eAAe,CAACJ,WAAhB,GAA8B,iBAA9B;AACD,C,CAED;;AACAI,eAAe,CAACD,EAAhB,GAAqB,iBAArB"},"metadata":{},"sourceType":"module"}