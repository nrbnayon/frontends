{"ast":null,"code":"import defaultTheme, { isChakraTheme } from \"@chakra-ui/theme\";\nimport { isFunction, mergeWith, pipe } from \"@chakra-ui/utils\";\n\n/**\r\n * Function to override or customize the Chakra UI theme conveniently.\r\n * First extension overrides the baseTheme and following extensions override the preceding extensions.\r\n *\r\n * @example:\r\n * import { theme as baseTheme, extendTheme, withDefaultColorScheme } from '@chakra-ui/react'\r\n *\r\n * const customTheme = extendTheme(\r\n *   {\r\n *     colors: {\r\n *       brand: {\r\n *         500: \"#b4d455\",\r\n *       },\r\n *     },\r\n *   },\r\n *   withDefaultColorScheme({ colorScheme: \"red\" }),\r\n *   baseTheme // optional\r\n * )\r\n */\nexport function extendTheme() {\n  for (var _len = arguments.length, extensions = new Array(_len), _key = 0; _key < _len; _key++) {\n    extensions[_key] = arguments[_key];\n  }\n  var overrides = [...extensions];\n  var baseTheme = extensions[extensions.length - 1];\n  if (isChakraTheme(baseTheme) &&\n  // this ensures backward compatibility\n  // previously only `extendTheme(override, baseTheme?)` was allowed\n  overrides.length > 1) {\n    overrides = overrides.slice(0, overrides.length - 1);\n  } else {\n    baseTheme = defaultTheme;\n  }\n  return pipe(...overrides.map(extension => prevTheme => isFunction(extension) ? extension(prevTheme) : mergeThemeOverride(prevTheme, extension)))(baseTheme);\n}\nexport function mergeThemeOverride() {\n  for (var _len2 = arguments.length, overrides = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    overrides[_key2] = arguments[_key2];\n  }\n  return mergeWith({}, ...overrides, mergeThemeCustomizer);\n}\nfunction mergeThemeCustomizer(source, override, key, object) {\n  if ((isFunction(source) || isFunction(override)) && Object.prototype.hasOwnProperty.call(object, key)) {\n    return function () {\n      var sourceValue = isFunction(source) ? source(...arguments) : source;\n      var overrideValue = isFunction(override) ? override(...arguments) : override;\n      return mergeWith({}, sourceValue, overrideValue, mergeThemeCustomizer);\n    };\n  } // fallback to default behaviour\n\n  return undefined;\n}","map":{"version":3,"names":["defaultTheme","isChakraTheme","isFunction","mergeWith","pipe","extendTheme","_len","arguments","length","extensions","Array","_key","overrides","baseTheme","slice","map","extension","prevTheme","mergeThemeOverride","_len2","_key2","mergeThemeCustomizer","source","override","key","object","Object","prototype","hasOwnProperty","call","sourceValue","overrideValue","undefined"],"sources":["../../src/extend-theme.ts"],"sourcesContent":["import defaultTheme, {\n  ChakraTheme,\n  isChakraTheme,\n  Theme,\n} from \"@chakra-ui/theme\"\nimport {\n  AnyFunction,\n  Dict,\n  isFunction,\n  mergeWith,\n  pipe,\n} from \"@chakra-ui/utils\"\n\ntype CloneKey<Target, Key> = Key extends keyof Target ? Target[Key] : unknown\n\nexport type DeepPartial<T> = {\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P]\n}\n\n/**\n * Represents a loose but specific type for the theme override.\n * It provides autocomplete hints for extending the theme, but leaves room\n * for adding properties.\n */\ntype DeepThemeExtension<BaseTheme, ThemeType> = {\n  [Key in keyof BaseTheme]?: BaseTheme[Key] extends (...args: any[]) => any\n    ? DeepThemeExtension<\n        DeepPartial<ReturnType<BaseTheme[Key]>>,\n        CloneKey<ThemeType, Key>\n      >\n    : BaseTheme[Key] extends Array<any>\n    ? CloneKey<ThemeType, Key>\n    : BaseTheme[Key] extends object\n    ? DeepThemeExtension<DeepPartial<BaseTheme[Key]>, CloneKey<ThemeType, Key>>\n    : CloneKey<ThemeType, Key>\n}\n\nexport declare type ThemeOverride<\n  BaseTheme = Theme\n> = DeepPartial<ChakraTheme> & DeepThemeExtension<BaseTheme, ChakraTheme> & Dict\n\nexport type ThemeExtension<Override extends ThemeOverride = ThemeOverride> = (\n  themeOverride: Override,\n) => Override\n\nexport type BaseThemeWithExtensions<\n  BaseTheme extends ChakraTheme,\n  Extensions extends readonly [...any]\n> = BaseTheme &\n  (Extensions extends [infer L, ...infer R]\n    ? L extends AnyFunction\n      ? ReturnType<L> & BaseThemeWithExtensions<BaseTheme, R>\n      : L & BaseThemeWithExtensions<BaseTheme, R>\n    : Extensions)\n/**\n * Function to override or customize the Chakra UI theme conveniently.\n * First extension overrides the baseTheme and following extensions override the preceding extensions.\n *\n * @example:\n * import { theme as baseTheme, extendTheme, withDefaultColorScheme } from '@chakra-ui/react'\n *\n * const customTheme = extendTheme(\n *   {\n *     colors: {\n *       brand: {\n *         500: \"#b4d455\",\n *       },\n *     },\n *   },\n *   withDefaultColorScheme({ colorScheme: \"red\" }),\n *   baseTheme // optional\n * )\n */\nexport function extendTheme<\n  BaseTheme extends ChakraTheme = Theme,\n  Extensions extends (\n    | BaseTheme\n    | ThemeOverride<BaseTheme>\n    | ThemeExtension<ThemeOverride<BaseTheme>>\n  )[] = (ThemeOverride<BaseTheme> | ThemeExtension<ThemeOverride<BaseTheme>>)[]\n>(...extensions: [...Extensions]) {\n  let overrides = [...extensions]\n  let baseTheme = extensions[extensions.length - 1]\n\n  if (\n    isChakraTheme(baseTheme) &&\n    // this ensures backward compatibility\n    // previously only `extendTheme(override, baseTheme?)` was allowed\n    overrides.length > 1\n  ) {\n    overrides = overrides.slice(0, overrides.length - 1)\n  } else {\n    baseTheme = (defaultTheme as unknown) as BaseTheme\n  }\n\n  return pipe(\n    ...overrides.map(\n      (extension) => (\n        prevTheme: BaseThemeWithExtensions<BaseTheme, Extensions>,\n      ) =>\n        isFunction(extension)\n          ? (extension as any)(prevTheme)\n          : mergeThemeOverride(prevTheme, extension),\n    ),\n  )(baseTheme as BaseThemeWithExtensions<BaseTheme, Extensions>)\n}\n\nexport function mergeThemeOverride<BaseTheme extends ChakraTheme = ChakraTheme>(\n  ...overrides: ThemeOverride<BaseTheme>[]\n): ThemeOverride<BaseTheme> {\n  return mergeWith({}, ...overrides, mergeThemeCustomizer)\n}\n\nfunction mergeThemeCustomizer(\n  source: unknown,\n  override: unknown,\n  key: string,\n  object: any,\n) {\n  if (\n    (isFunction(source) || isFunction(override)) &&\n    Object.prototype.hasOwnProperty.call(object, key)\n  ) {\n    return (...args: unknown[]) => {\n      const sourceValue = isFunction(source) ? source(...args) : source\n\n      const overrideValue = isFunction(override) ? override(...args) : override\n\n      return mergeWith({}, sourceValue, overrideValue, mergeThemeCustomizer)\n    }\n  }\n\n  // fallback to default behaviour\n  return undefined\n}\n"],"mappings":"AAAA,OAAOA,YAAP,IAEEC,aAFF,QAIO,kBAJP;AAKA,SAGEC,UAHF,EAIEC,SAJF,EAKEC,IALF,QAMO,kBANP;;AAiDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAATA,CAAA,EAO2B;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAA7BC,UAA6B,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAA7BF,UAA6B,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;EAAA;EAChC,IAAIC,SAAS,GAAG,CAAC,GAAGH,UAAJ,CAAhB;EACA,IAAII,SAAS,GAAGJ,UAAU,CAACA,UAAU,CAACD,MAAX,GAAoB,CAArB,CAA1B;EAEA,IACEP,aAAa,CAACY,SAAD,CAAb;EACA;EACA;EACAD,SAAS,CAACJ,MAAV,GAAmB,CAJrB,EAKE;IACAI,SAAS,GAAGA,SAAS,CAACE,KAAV,CAAgB,CAAhB,EAAmBF,SAAS,CAACJ,MAAV,GAAmB,CAAtC,CAAZ;EACD,CAPD,MAOO;IACLK,SAAS,GAAIb,YAAb;EACD;EAED,OAAOI,IAAI,CACT,GAAGQ,SAAS,CAACG,GAAV,CACAC,SAAD,IACEC,SADa,IAGbf,UAAU,CAACc,SAAD,CAAV,GACKA,SAAD,CAAmBC,SAAnB,CADJ,GAEIC,kBAAkB,CAACD,SAAD,EAAYD,SAAZ,CANvB,CADM,CAAJ,CASLH,SATK,CAAP;AAUD;AAED,OAAO,SAASK,kBAATA,CAAA,EAEqB;EAAA,SAAAC,KAAA,GAAAZ,SAAA,CAAAC,MAAA,EADvBI,SACuB,OAAAF,KAAA,CAAAS,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;IADvBR,SACuB,CAAAQ,KAAA,IAAAb,SAAA,CAAAa,KAAA;EAAA;EAC1B,OAAOjB,SAAS,CAAC,EAAD,EAAK,GAAGS,SAAR,EAAmBS,oBAAnB,CAAhB;AACD;AAED,SAASA,oBAATA,CACEC,MADF,EAEEC,QAFF,EAGEC,GAHF,EAIEC,MAJF,EAKE;EACA,IACE,CAACvB,UAAU,CAACoB,MAAD,CAAV,IAAsBpB,UAAU,CAACqB,QAAD,CAAjC,KACAG,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CD,GAA7C,CAFF,EAGE;IACA,OAAO,YAAwB;MAC7B,IAAMM,WAAW,GAAG5B,UAAU,CAACoB,MAAD,CAAV,GAAqBA,MAAM,CAAC,GAAAf,SAAD,CAA3B,GAAuCe,MAA3D;MAEA,IAAMS,aAAa,GAAG7B,UAAU,CAACqB,QAAD,CAAV,GAAuBA,QAAQ,CAAC,GAAAhB,SAAD,CAA/B,GAA2CgB,QAAjE;MAEA,OAAOpB,SAAS,CAAC,EAAD,EAAK2B,WAAL,EAAkBC,aAAlB,EAAiCV,oBAAjC,CAAhB;IACD,CAND;EAOD,CAZD,CAcA;;EACA,OAAOW,SAAP;AACD"},"metadata":{},"sourceType":"module"}