{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport Icon from \"@chakra-ui/icon\";\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useFormControlContext } from \"./form-control\";\n\n/**\r\n * Used to provide feedback about an invalid input,\r\n * and suggest clear instructions on how to fix it.\r\n */\nexport var FormErrorMessage = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useMultiStyleConfig(\"FormError\", props);\n  var ownProps = omitThemingProps(props);\n  var field = useFormControlContext();\n  if (!(field != null && field.isInvalid)) return null;\n  return /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({}, field == null ? void 0 : field.getErrorMessageProps(ownProps, ref), {\n    className: cx(\"chakra-form__error-message\", props.className),\n    __css: _extends({\n      display: \"flex\",\n      alignItems: \"center\"\n    }, styles.text)\n  })));\n});\nif (__DEV__) {\n  FormErrorMessage.displayName = \"FormErrorMessage\";\n}\n/**\r\n * Used as the visual indicator that a field is invalid or\r\n * a field has incorrect values.\r\n */\n\nexport var FormErrorIcon = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useStyles();\n  var field = useFormControlContext();\n  if (!(field != null && field.isInvalid)) return null;\n  var _className = cx(\"chakra-form__error-icon\", props.className);\n  return /*#__PURE__*/React.createElement(Icon, _extends({\n    ref: ref,\n    \"aria-hidden\": true\n  }, props, {\n    __css: styles.icon,\n    className: _className\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z\"\n  }));\n});\nif (__DEV__) {\n  FormErrorIcon.displayName = \"FormErrorIcon\";\n}","map":{"version":3,"names":["Icon","chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","cx","__DEV__","React","useFormControlContext","FormErrorMessage","props","ref","styles","ownProps","field","isInvalid","createElement","value","div","_extends","getErrorMessageProps","className","__css","display","alignItems","text","displayName","FormErrorIcon","_className","icon","fill","d"],"sources":["../../src/form-error.tsx"],"sourcesContent":["import Icon, { IconProps } from \"@chakra-ui/icon\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useFormControlContext } from \"./form-control\"\n\nexport interface FormErrorMessageProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormErrorMessage\"> {}\n\n/**\n * Used to provide feedback about an invalid input,\n * and suggest clear instructions on how to fix it.\n */\nexport const FormErrorMessage = forwardRef<FormErrorMessageProps, \"div\">(\n  (props, ref) => {\n    const styles = useMultiStyleConfig(\"FormError\", props)\n    const ownProps = omitThemingProps(props)\n    const field = useFormControlContext()\n\n    if (!field?.isInvalid) return null\n\n    return (\n      <StylesProvider value={styles}>\n        <chakra.div\n          {...field?.getErrorMessageProps(ownProps, ref)}\n          className={cx(\"chakra-form__error-message\", props.className)}\n          __css={{\n            display: \"flex\",\n            alignItems: \"center\",\n            ...styles.text,\n          }}\n        />\n      </StylesProvider>\n    )\n  },\n)\n\nif (__DEV__) {\n  FormErrorMessage.displayName = \"FormErrorMessage\"\n}\n\n/**\n * Used as the visual indicator that a field is invalid or\n * a field has incorrect values.\n */\nexport const FormErrorIcon = forwardRef<IconProps, \"svg\">((props, ref) => {\n  const styles = useStyles()\n  const field = useFormControlContext()\n\n  if (!field?.isInvalid) return null\n\n  const _className = cx(\"chakra-form__error-icon\", props.className)\n\n  return (\n    <Icon\n      ref={ref}\n      aria-hidden\n      {...props}\n      __css={styles.icon}\n      className={_className}\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z\"\n      />\n    </Icon>\n  )\n})\n\nif (__DEV__) {\n  FormErrorIcon.displayName = \"FormErrorIcon\"\n}\n"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,IAAP,MAAgC,iBAAhC;AACA,SACEC,MADF,EAEEC,UAFF,EAIEC,gBAJF,EAKEC,cALF,EAOEC,mBAPF,EAQEC,SARF,QASO,mBATP;AAUA,SAASC,EAAT,EAAaC,OAAb,QAA4B,kBAA5B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,qBAAT,QAAsC,gBAAtC;;AAMA;AACA;AACA;AACA;AACA,OAAO,IAAMC,gBAAgB,gBAAGT,UAAU,CACxC,CAACU,KAAD,EAAQC,GAAR,KAAgB;EACd,IAAMC,MAAM,GAAGT,mBAAmB,CAAC,WAAD,EAAcO,KAAd,CAAlC;EACA,IAAMG,QAAQ,GAAGZ,gBAAgB,CAACS,KAAD,CAAjC;EACA,IAAMI,KAAK,GAAGN,qBAAqB,EAAnC;EAEA,IAAI,EAACM,KAAD,YAACA,KAAK,CAAEC,SAAR,CAAJ,EAAuB,OAAO,IAAP;EAEvB,oBACER,KAAA,CAAAS,aAAA,CAACd,cAAD;IAAgBe,KAAK,EAAEL;EAAvB,gBACEL,KAAA,CAAAS,aAAA,CAACjB,MAAD,CAAQmB,GAAR,EAAAC,QAAA,KACML,KADN,oBACMA,KAAK,CAAEM,oBAAP,CAA4BP,QAA5B,EAAsCF,GAAtC,CADN;IAEEU,SAAS,EAAEhB,EAAE,CAAC,4BAAD,EAA+BK,KAAK,CAACW,SAArC,CAFf;IAGEC,KAAK,EAAAH,QAAA;MACHI,OAAO,EAAE,MADN;MAEHC,UAAU,EAAE;IAFT,GAGAZ,MAAM,CAACa,IAHP;EAHP,GADF,CADF;AAaD,CArBuC,CAAnC;AAwBP,IAAInB,OAAJ,EAAa;EACXG,gBAAgB,CAACiB,WAAjB,GAA+B,kBAA/B;AACD;AAED;AACA;AACA;AACA;;AACA,OAAO,IAAMC,aAAa,gBAAG3B,UAAU,CAAmB,CAACU,KAAD,EAAQC,GAAR,KAAgB;EACxE,IAAMC,MAAM,GAAGR,SAAS,EAAxB;EACA,IAAMU,KAAK,GAAGN,qBAAqB,EAAnC;EAEA,IAAI,EAACM,KAAD,YAACA,KAAK,CAAEC,SAAR,CAAJ,EAAuB,OAAO,IAAP;EAEvB,IAAMa,UAAU,GAAGvB,EAAE,CAAC,yBAAD,EAA4BK,KAAK,CAACW,SAAlC,CAArB;EAEA,oBACEd,KAAA,CAAAS,aAAA,CAAClB,IAAD,EAAAqB,QAAA;IACER,GAAG,EAAEA,GADP;IAEE;EAFF,GAGMD,KAHN;IAIEY,KAAK,EAAEV,MAAM,CAACiB,IAJhB;IAKER,SAAS,EAAEO;EALb,iBAOErB,KAAA,CAAAS,aAAA;IACEc,IAAI,EAAC,cADP;IAEEC,CAAC,EAAC;EAFJ,EAPF,CADF;AAcD,CAtBsC,CAAhC;AAwBP,IAAIzB,OAAJ,EAAa;EACXqB,aAAa,CAACD,WAAd,GAA4B,eAA5B;AACD"},"metadata":{},"sourceType":"module"}