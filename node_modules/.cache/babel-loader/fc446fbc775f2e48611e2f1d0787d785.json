{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { useCounter } from \"@chakra-ui/counter\";\nimport { useBoolean, useCallbackRef, useEventListener, useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { ariaAttr, callAllHandlers, focus, isBrowser, isNull, maxSafeInteger, minSafeInteger, normalizeEventKey, scheduleMicrotask } from \"@chakra-ui/utils\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nimport { useSpinner } from \"./use-spinner\";\nimport { isFloatingPointNumericCharacter, isValidNumericKeyboardEvent } from \"./utils\";\nvar sanitize = value => value.split(\"\").filter(isFloatingPointNumericCharacter).join(\"\");\n/**\r\n * React hook that implements the WAI-ARIA Spin Button widget\r\n * and used to create numeric input fields.\r\n *\r\n * It returns prop getters you can use to build your own\r\n * custom number inputs.\r\n *\r\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\r\n * @see Docs     https://www.chakra-ui.com/useNumberInput\r\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\r\n */\n\nexport function useNumberInput(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var {\n      focusInputOnChange = true,\n      clampValueOnBlur = true,\n      keepWithinRange = true,\n      min = minSafeInteger,\n      max = maxSafeInteger,\n      step: stepProp = 1,\n      isReadOnly,\n      isDisabled,\n      isRequired,\n      getAriaValueText,\n      isInvalid,\n      pattern = \"[0-9]*(.[0-9]+)?\",\n      inputMode = \"decimal\",\n      allowMouseWheel,\n      id,\n      name,\n      \"aria-describedby\": ariaDescBy,\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledBy,\n      onFocus,\n      onBlur\n    } = props,\n    htmlProps = _objectWithoutPropertiesLoose(props, [\"focusInputOnChange\", \"clampValueOnBlur\", \"keepWithinRange\", \"min\", \"max\", \"step\", \"isReadOnly\", \"isDisabled\", \"isRequired\", \"getAriaValueText\", \"isInvalid\", \"pattern\", \"inputMode\", \"allowMouseWheel\", \"id\", \"onChange\", \"precision\", \"name\", \"aria-describedby\", \"aria-label\", \"aria-labelledby\", \"onFocus\", \"onBlur\"]);\n  var onFocusProp = useCallbackRef(onFocus);\n  var onBlurProp = useCallbackRef(onBlur);\n  var getAriaValueTextProp = useCallbackRef(getAriaValueText);\n  /**\r\n   * Leverage the `useCounter` hook since it provides\r\n   * the functionality to `increment`, `decrement` and `update`\r\n   * counter values\r\n   */\n\n  var counter = useCounter(props);\n  var {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn\n  } = counter;\n  /**\r\n   * Keep track of the focused state of the input,\r\n   * so user can this to change the styles of the\r\n   * `spinners`, maybe :)\r\n   */\n\n  var [isFocused, setFocused] = useBoolean();\n  var inputRef = React.useRef(null);\n  /**\r\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\r\n   */\n\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return;\n    var notInSync = inputRef.current.value != counter.value;\n    if (notInSync) {\n      counter.setValue(sanitize(inputRef.current.value));\n    }\n  }, []);\n  var isInteractive = !(isReadOnly || isDisabled);\n  var increment = React.useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n    if (isInteractive) {\n      incrementFn(step);\n    }\n  }, [incrementFn, isInteractive, stepProp]);\n  var decrement = React.useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n    if (isInteractive) {\n      decrementFn(step);\n    }\n  }, [decrementFn, isInteractive, stepProp]);\n  /**\r\n   * Leverage the `useSpinner` hook to spin the input's value\r\n   * when long press on the up and down buttons.\r\n   *\r\n   * This leverages `setInterval` internally\r\n   */\n\n  var spinner = useSpinner(increment, decrement);\n  /**\r\n   * The `onChange` handler filters out any character typed\r\n   * that isn't floating point compatible.\r\n   */\n\n  var onChange = React.useCallback(event => {\n    updateFn(sanitize(event.target.value));\n  }, [updateFn]);\n  var onKeyDown = React.useCallback(event => {\n    /**\r\n     * only allow valid numeric keys\r\n     */\n    if (!isValidNumericKeyboardEvent(event)) {\n      event.preventDefault();\n    }\n    /**\r\n     * Keyboard Accessibility\r\n     *\r\n     * We want to increase or decrease the input's value\r\n     * based on if the user the arrow keys.\r\n     *\r\n     * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\r\n     */\n\n    var stepFactor = getStepFactor(event) * stepProp;\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      ArrowUp: () => increment(stepFactor),\n      ArrowDown: () => decrement(stepFactor),\n      Home: () => updateFn(min),\n      End: () => updateFn(max)\n    };\n    var action = keyMap[eventKey];\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [updateFn, decrement, increment, max, min, stepProp]);\n  var getStepFactor = event => {\n    var ratio = 1;\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1;\n    }\n    if (event.shiftKey) {\n      ratio = 10;\n    }\n    return ratio;\n  };\n  /**\r\n   * If user would like to use a human-readable representation\r\n   * of the value, rather than the value itself they can pass `getAriaValueText`\r\n   *\r\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\r\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\r\n   */\n\n  var ariaValueText = React.useMemo(() => {\n    var text = getAriaValueTextProp == null ? void 0 : getAriaValueTextProp(counter.value);\n    if (!isNull(text)) {\n      return text;\n    }\n    var defaultText = counter.value.toString(); // empty string is an invalid ARIA attribute value\n\n    return !defaultText ? undefined : defaultText;\n  }, [counter.value, getAriaValueTextProp]);\n  /**\r\n   * Function that clamps the input's value on blur\r\n   */\n\n  var validateAndClamp = React.useCallback(() => {\n    var next = counter.value;\n    if (next === \"\") return;\n    if (counter.valueAsNumber < min) {\n      next = min;\n    }\n    if (counter.valueAsNumber > max) {\n      next = max;\n    }\n    /**\r\n     * `counter.cast` does 2 things:\r\n     *\r\n     * - sanitize the value by using parseFloat and some Regex\r\n     * - used to round value to computed precision or decimal points\r\n     */\n\n    counter.cast(next);\n  }, [counter, max, min]);\n  var onInputBlur = React.useCallback(() => {\n    setFocused.off();\n    if (clampValueOnBlur) {\n      validateAndClamp();\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp]);\n  var focusInput = React.useCallback(() => {\n    if (focusInputOnChange) {\n      focus(inputRef.current, {\n        nextTick: true\n      });\n    }\n  }, [focusInputOnChange]);\n  var spinUp = React.useCallback(event => {\n    event.preventDefault();\n    spinner.up();\n    focusInput();\n  }, [focusInput, spinner]);\n  var spinDown = React.useCallback(event => {\n    event.preventDefault();\n    spinner.down();\n    focusInput();\n  }, [focusInput, spinner]);\n  var pointerDown = isBrowser && !!document.documentElement.ontouchstart ? \"onTouchStart\" : \"onMouseDown\";\n  useEventListener(\"wheel\", event => {\n    var isInputFocused = document.activeElement === inputRef.current;\n    if (!allowMouseWheel || !isInputFocused) return;\n    event.preventDefault();\n    var stepFactor = getStepFactor(event) * stepProp;\n    var direction = Math.sign(event.deltaY);\n    if (direction === -1) {\n      increment(stepFactor);\n    } else if (direction === 1) {\n      decrement(stepFactor);\n    }\n  }, inputRef.current, {\n    passive: false\n  });\n  var getIncrementButtonProps = React.useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (ref === void 0) {\n      ref = null;\n    }\n    var disabled = isDisabled || keepWithinRange && counter.isAtMax;\n    return _extends({}, props, {\n      ref,\n      role: \"button\",\n      tabIndex: -1,\n      [pointerDown]: callAllHandlers(props[pointerDown], spinUp),\n      onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n      onMouseLeave: callAllHandlers(props.onMouseUp, spinner.stop),\n      onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n      disabled,\n      \"aria-disabled\": ariaAttr(disabled)\n    });\n  }, [pointerDown, counter.isAtMax, keepWithinRange, spinUp, spinner.stop, isDisabled]);\n  var getDecrementButtonProps = React.useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (ref === void 0) {\n      ref = null;\n    }\n    var disabled = isDisabled || keepWithinRange && counter.isAtMin;\n    return _extends({}, props, {\n      ref,\n      role: \"button\",\n      tabIndex: -1,\n      [pointerDown]: callAllHandlers(props[pointerDown], spinDown),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, spinner.stop),\n      onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n      onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n      disabled,\n      \"aria-disabled\": ariaAttr(disabled)\n    });\n  }, [pointerDown, counter.isAtMin, keepWithinRange, spinDown, spinner.stop, isDisabled]);\n  var getInputProps = React.useCallback(function (props, ref) {\n    var _props$readOnly, _props$readOnly2, _props$required, _props$required2;\n    if (props === void 0) {\n      props = {};\n    }\n    if (ref === void 0) {\n      ref = null;\n    }\n    return _extends({\n      name,\n      inputMode,\n      type: \"text\",\n      pattern,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-label\": ariaLabel,\n      \"aria-describedby\": ariaDescBy,\n      id,\n      disabled: isDisabled\n    }, props, {\n      readOnly: (_props$readOnly = props.readOnly) != null ? _props$readOnly : isReadOnly,\n      \"aria-readonly\": (_props$readOnly2 = props.readOnly) != null ? _props$readOnly2 : isReadOnly,\n      \"aria-required\": (_props$required = props.required) != null ? _props$required : isRequired,\n      required: (_props$required2 = props.required) != null ? _props$required2 : isRequired,\n      ref: mergeRefs(inputRef, ref),\n      value: counter.value,\n      role: \"spinbutton\",\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuenow\": Number.isNaN(counter.valueAsNumber) ? undefined : counter.valueAsNumber,\n      \"aria-invalid\": ariaAttr(isInvalid != null ? isInvalid : counter.isOutOfRange),\n      \"aria-valuetext\": ariaValueText,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props.onFocus, onFocusProp, () => scheduleMicrotask(setFocused.on)),\n      onBlur: callAllHandlers(props.onBlur, onBlurProp, onInputBlur)\n    });\n  }, [name, inputMode, pattern, ariaLabelledBy, ariaLabel, ariaDescBy, id, isDisabled, isRequired, isReadOnly, isInvalid, counter.value, counter.valueAsNumber, counter.isOutOfRange, min, max, ariaValueText, onChange, onKeyDown, onFocusProp, setFocused.on, onBlurProp, onInputBlur]);\n  return {\n    value: counter.value,\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps\n  };\n}","map":{"version":3,"names":["useCounter","useBoolean","useCallbackRef","useEventListener","useSafeLayoutEffect","ariaAttr","callAllHandlers","focus","isBrowser","isNull","maxSafeInteger","minSafeInteger","normalizeEventKey","scheduleMicrotask","mergeRefs","React","useSpinner","isFloatingPointNumericCharacter","isValidNumericKeyboardEvent","sanitize","value","split","filter","join","useNumberInput","props","focusInputOnChange","clampValueOnBlur","keepWithinRange","min","max","step","stepProp","isReadOnly","isDisabled","isRequired","getAriaValueText","isInvalid","pattern","inputMode","allowMouseWheel","id","name","ariaDescBy","ariaLabel","ariaLabelledBy","onFocus","onBlur","htmlProps","_objectWithoutPropertiesLoose","onFocusProp","onBlurProp","getAriaValueTextProp","counter","update","updateFn","increment","incrementFn","decrement","decrementFn","isFocused","setFocused","inputRef","useRef","current","notInSync","setValue","isInteractive","useCallback","spinner","onChange","event","target","onKeyDown","preventDefault","stepFactor","getStepFactor","eventKey","keyMap","ArrowUp","ArrowDown","Home","End","action","ratio","metaKey","ctrlKey","shiftKey","ariaValueText","useMemo","text","defaultText","toString","undefined","validateAndClamp","next","valueAsNumber","cast","onInputBlur","off","focusInput","nextTick","spinUp","up","spinDown","down","pointerDown","document","documentElement","ontouchstart","isInputFocused","activeElement","direction","Math","sign","deltaY","passive","getIncrementButtonProps","ref","disabled","isAtMax","_extends","role","tabIndex","onMouseUp","stop","onMouseLeave","onTouchEnd","getDecrementButtonProps","isAtMin","getInputProps","_props$readOnly","_props$readOnly2","_props$required","_props$required2","type","readOnly","required","Number","isNaN","isOutOfRange","autoComplete","autoCorrect","on"],"sources":["../../src/use-number-input.ts"],"sourcesContent":["import { useCounter, UseCounterProps } from \"@chakra-ui/counter\"\nimport {\n  useBoolean,\n  useCallbackRef,\n  useEventListener,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  focus,\n  isBrowser,\n  isNull,\n  maxSafeInteger,\n  minSafeInteger,\n  StringOrNumber,\n  normalizeEventKey,\n  scheduleMicrotask,\n} from \"@chakra-ui/utils\"\nimport { mergeRefs, PropGetter, EventKeyMap } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport { useSpinner } from \"./use-spinner\"\nimport {\n  isFloatingPointNumericCharacter,\n  isValidNumericKeyboardEvent,\n} from \"./utils\"\n\nexport interface UseNumberInputProps extends UseCounterProps {\n  /**\n   * If `true`, the input will be focused as you increment\n   * or decrement the value with the stepper\n   *\n   * @default true\n   */\n  focusInputOnChange?: boolean\n  /**\n   * This controls the value update when you blur out of the input.\n   * - If `true` and the value is greater than `max`, the value will be reset to `max`\n   * - Else, the value remains the same.\n   *\n   * @default true\n   */\n  clampValueOnBlur?: boolean\n  /**\n   * This is used to format the value so that screen readers\n   * can speak out a more human-friendly value.\n   *\n   * It is used to set the `aria-valuetext` property of the input\n   */\n  getAriaValueText?(value: StringOrNumber): string\n  /**\n   * If `true`, the input will be in readonly mode\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the input will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the input will be disabled\n   */\n  isDisabled?: boolean\n  isRequired?: boolean\n  /**\n   * The `id` to use for the number input field.\n   */\n  id?: string\n  /**\n   * The pattern used to check the <input> element's value against on form submission.\n   *\n   * @default\n   * \"[0-9]*(.[0-9]+)?\"\n   */\n  pattern?: React.InputHTMLAttributes<any>[\"pattern\"]\n  /**\n   * Hints at the type of data that might be entered by the user. It also determines\n   * the type of keyboard shown to the user on mobile devices\n   *\n   * @default\n   * \"decimal\"\n   */\n  inputMode?: React.InputHTMLAttributes<any>[\"inputMode\"]\n  /**\n   * If `true`, the input's value will change based on mouse wheel\n   */\n  allowMouseWheel?: boolean\n  /**\n   * The HTML `name` attribute used for forms\n   */\n  name?: string\n  \"aria-describedby\"?: string\n  \"aria-label\"?: string\n  \"aria-labelledby\"?: string\n  onFocus?: React.FocusEventHandler<HTMLInputElement>\n  onBlur?: React.FocusEventHandler<HTMLInputElement>\n}\n\nconst sanitize = (value: string) =>\n  value.split(\"\").filter(isFloatingPointNumericCharacter).join(\"\")\n\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\nexport function useNumberInput(props: UseNumberInputProps = {}) {\n  const {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    isRequired,\n    getAriaValueText,\n    isInvalid,\n    pattern = \"[0-9]*(.[0-9]+)?\",\n    inputMode = \"decimal\",\n    allowMouseWheel,\n    id,\n    onChange: _,\n    precision,\n    name,\n    \"aria-describedby\": ariaDescBy,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    onFocus,\n    onBlur,\n    ...htmlProps\n  } = props\n\n  const onFocusProp = useCallbackRef(onFocus)\n  const onBlurProp = useCallbackRef(onBlur)\n  const getAriaValueTextProp = useCallbackRef(getAriaValueText)\n\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n  const counter = useCounter(props)\n\n  const {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn,\n  } = counter\n\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n  const [isFocused, setFocused] = useBoolean()\n\n  const inputRef = React.useRef<HTMLInputElement>(null)\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   */\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return\n    const notInSync = inputRef.current.value != counter.value\n    if (notInSync) {\n      counter.setValue(sanitize(inputRef.current.value))\n    }\n  }, [])\n\n  const isInteractive = !(isReadOnly || isDisabled)\n\n  const increment = React.useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        incrementFn(step)\n      }\n    },\n    [incrementFn, isInteractive, stepProp],\n  )\n\n  const decrement = React.useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        decrementFn(step)\n      }\n    },\n    [decrementFn, isInteractive, stepProp],\n  )\n\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n  const spinner = useSpinner(increment, decrement)\n\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n  const onChange = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      updateFn(sanitize(event.target.value))\n    },\n    [updateFn],\n  )\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      /**\n       * only allow valid numeric keys\n       */\n      if (!isValidNumericKeyboardEvent(event)) {\n        event.preventDefault()\n      }\n\n      /**\n       * Keyboard Accessibility\n       *\n       * We want to increase or decrease the input's value\n       * based on if the user the arrow keys.\n       *\n       * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n       */\n      const stepFactor = getStepFactor(event) * stepProp\n\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        ArrowUp: () => increment(stepFactor),\n        ArrowDown: () => decrement(stepFactor),\n        Home: () => updateFn(min),\n        End: () => updateFn(max),\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [updateFn, decrement, increment, max, min, stepProp],\n  )\n\n  const getStepFactor = <Event extends React.KeyboardEvent | React.WheelEvent>(\n    event: Event,\n  ) => {\n    let ratio = 1\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1\n    }\n    if (event.shiftKey) {\n      ratio = 10\n    }\n    return ratio\n  }\n\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n  const ariaValueText = React.useMemo(() => {\n    const text = getAriaValueTextProp?.(counter.value)\n    if (!isNull(text)) {\n      return text\n    }\n\n    const defaultText = counter.value.toString()\n    // empty string is an invalid ARIA attribute value\n    return !defaultText ? undefined : defaultText\n  }, [counter.value, getAriaValueTextProp])\n\n  /**\n   * Function that clamps the input's value on blur\n   */\n  const validateAndClamp = React.useCallback(() => {\n    let next = counter.value as StringOrNumber\n\n    if (next === \"\") return\n\n    if (counter.valueAsNumber < min) {\n      next = min\n    }\n\n    if (counter.valueAsNumber > max) {\n      next = max\n    }\n\n    /**\n     * `counter.cast` does 2 things:\n     *\n     * - sanitize the value by using parseFloat and some Regex\n     * - used to round value to computed precision or decimal points\n     */\n    counter.cast(next)\n  }, [counter, max, min])\n\n  const onInputBlur = React.useCallback(() => {\n    setFocused.off()\n\n    if (clampValueOnBlur) {\n      validateAndClamp()\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp])\n\n  const focusInput = React.useCallback(() => {\n    if (focusInputOnChange) {\n      focus(inputRef.current, { nextTick: true })\n    }\n  }, [focusInputOnChange])\n\n  const spinUp = React.useCallback(\n    (event: any) => {\n      event.preventDefault()\n      spinner.up()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const spinDown = React.useCallback(\n    (event: any) => {\n      event.preventDefault()\n      spinner.down()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const pointerDown =\n    isBrowser && !!document.documentElement.ontouchstart\n      ? \"onTouchStart\"\n      : \"onMouseDown\"\n\n  useEventListener(\n    \"wheel\",\n    (event) => {\n      const isInputFocused = document.activeElement === inputRef.current\n      if (!allowMouseWheel || !isInputFocused) return\n\n      event.preventDefault()\n\n      const stepFactor = getStepFactor(event as any) * stepProp\n      const direction = Math.sign(event.deltaY)\n\n      if (direction === -1) {\n        increment(stepFactor)\n      } else if (direction === 1) {\n        decrement(stepFactor)\n      }\n    },\n    inputRef.current,\n    { passive: false },\n  )\n\n  const getIncrementButtonProps: PropGetter = React.useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMax)\n      return {\n        ...props,\n        ref,\n        role: \"button\",\n        tabIndex: -1,\n        [pointerDown]: callAllHandlers(props[pointerDown], spinUp),\n        onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n        onMouseLeave: callAllHandlers(props.onMouseUp, spinner.stop),\n        onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [\n      pointerDown,\n      counter.isAtMax,\n      keepWithinRange,\n      spinUp,\n      spinner.stop,\n      isDisabled,\n    ],\n  )\n\n  const getDecrementButtonProps: PropGetter = React.useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMin)\n      return {\n        ...props,\n        ref,\n        role: \"button\",\n        tabIndex: -1,\n        [pointerDown]: callAllHandlers(props[pointerDown], spinDown),\n        onMouseLeave: callAllHandlers(props.onMouseLeave, spinner.stop),\n        onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n        onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [\n      pointerDown,\n      counter.isAtMin,\n      keepWithinRange,\n      spinDown,\n      spinner.stop,\n      isDisabled,\n    ],\n  )\n\n  const getInputProps: PropGetter<\n    HTMLInputElement,\n    Pick<\n      React.InputHTMLAttributes<HTMLInputElement>,\n      \"disabled\" | \"required\" | \"readOnly\"\n    >\n  > = React.useCallback(\n    (props = {}, ref = null) => ({\n      name,\n      inputMode,\n      type: \"text\",\n      pattern,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-label\": ariaLabel,\n      \"aria-describedby\": ariaDescBy,\n      id,\n      disabled: isDisabled,\n      ...props,\n      readOnly: props.readOnly ?? isReadOnly,\n      \"aria-readonly\": props.readOnly ?? isReadOnly,\n      \"aria-required\": props.required ?? isRequired,\n      required: props.required ?? isRequired,\n      ref: mergeRefs(inputRef, ref),\n      value: counter.value,\n      role: \"spinbutton\",\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuenow\": Number.isNaN(counter.valueAsNumber)\n        ? undefined\n        : counter.valueAsNumber,\n      \"aria-invalid\": ariaAttr(isInvalid ?? counter.isOutOfRange),\n      \"aria-valuetext\": ariaValueText,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props.onFocus, onFocusProp, () =>\n        scheduleMicrotask(setFocused.on),\n      ),\n      onBlur: callAllHandlers(props.onBlur, onBlurProp, onInputBlur),\n    }),\n    [\n      name,\n      inputMode,\n      pattern,\n      ariaLabelledBy,\n      ariaLabel,\n      ariaDescBy,\n      id,\n      isDisabled,\n      isRequired,\n      isReadOnly,\n      isInvalid,\n      counter.value,\n      counter.valueAsNumber,\n      counter.isOutOfRange,\n      min,\n      max,\n      ariaValueText,\n      onChange,\n      onKeyDown,\n      onFocusProp,\n      setFocused.on,\n      onBlurProp,\n      onInputBlur,\n    ],\n  )\n\n  return {\n    value: counter.value,\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps,\n  }\n}\n\nexport type UseNumberInputReturn = ReturnType<typeof useNumberInput>\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}