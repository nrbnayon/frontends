{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { useFormControlProps } from \"@chakra-ui/form-control\";\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { __DEV__, cx } from \"@chakra-ui/utils\";\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nimport { TriangleDownIcon, TriangleUpIcon } from \"./icons\";\nimport { useNumberInput } from \"./use-number-input\";\n\n/**\r\n * React context used to communicate between components\r\n */\nvar [NumberInputProvider, useNumberInputContext] = createContext({\n  name: \"NumberInputContext\",\n  errorMessage: \"useNumberInputContext: `context` is undefined. Seems you forgot to wrap number-input's components within <NumberInput />\"\n});\n\n/**\r\n * NumberInput\r\n *\r\n * React component that provides context and logic to all\r\n * number input sub-components.\r\n *\r\n * It renders a `div` by default.\r\n *\r\n * @see Docs http://chakra-ui.com/numberinput\r\n */\nexport var NumberInput = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useMultiStyleConfig(\"NumberInput\", props);\n  var ownProps = omitThemingProps(props);\n  var controlProps = useFormControlProps(ownProps);\n  var _useNumberInput = useNumberInput(controlProps),\n    {\n      htmlProps\n    } = _useNumberInput,\n    context = _objectWithoutPropertiesLoose(_useNumberInput, [\"htmlProps\"]);\n  var ctx = React.useMemo(() => context, [context]);\n  return /*#__PURE__*/React.createElement(NumberInputProvider, {\n    value: ctx\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({}, htmlProps, {\n    ref: ref,\n    className: cx(\"chakra-numberinput\", props.className),\n    __css: _extends({\n      position: \"relative\",\n      zIndex: 0\n    }, styles.root)\n  }))));\n});\nif (__DEV__) {\n  NumberInput.displayName = \"NumberInput\";\n}\n\n/**\r\n * NumberInputStepper\r\n *\r\n * React component used to group the increment and decrement\r\n * button spinners.\r\n *\r\n * It renders a `div` by default.\r\n *\r\n * @see Docs http://chakra-ui.com/components/number-input\r\n */\nexport var NumberInputStepper = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    \"aria-hidden\": true,\n    ref: ref\n  }, props, {\n    __css: _extends({\n      display: \"flex\",\n      flexDirection: \"column\",\n      position: \"absolute\",\n      top: \"0\",\n      insetEnd: \"0px\",\n      margin: \"1px\",\n      height: \"calc(100% - 2px)\",\n      zIndex: 1\n    }, styles.stepperGroup)\n  }));\n});\nif (__DEV__) {\n  NumberInputStepper.displayName = \"NumberInputStepper\";\n}\n\n/**\r\n * NumberInputField\r\n *\r\n * React component that represents the actual `input` field\r\n * where users can type to edit numeric values.\r\n *\r\n * It renders an `input` by default and ensures only numeric\r\n * values can be typed.\r\n *\r\n * @see Docs http://chakra-ui.com/numberinput\r\n */\nexport var NumberInputField = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    getInputProps\n  } = useNumberInputContext();\n  var input = getInputProps(props, ref);\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.input, _extends({}, input, {\n    className: cx(\"chakra-numberinput__field\", props.className),\n    __css: _extends({\n      width: \"100%\"\n    }, styles.field)\n  }));\n});\nif (__DEV__) {\n  NumberInputField.displayName = \"NumberInputField\";\n}\nexport var StyledStepper = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flex: 1,\n    transition: \"all 0.3s\",\n    userSelect: \"none\",\n    cursor: \"pointer\",\n    lineHeight: \"normal\"\n  }\n});\n\n/**\r\n * NumberDecrementStepper\r\n *\r\n * React component used to decrement the number input's value\r\n *\r\n * It renders a `div` with `role=button` by default\r\n */\nexport var NumberDecrementStepper = /*#__PURE__*/forwardRef((props, ref) => {\n  var _props$children;\n  var styles = useStyles();\n  var {\n    getDecrementButtonProps\n  } = useNumberInputContext();\n  var decrement = getDecrementButtonProps(props, ref);\n  return /*#__PURE__*/React.createElement(StyledStepper, _extends({}, decrement, {\n    __css: styles.stepper\n  }), (_props$children = props.children) != null ? _props$children : /*#__PURE__*/React.createElement(TriangleDownIcon, null));\n});\nif (__DEV__) {\n  NumberDecrementStepper.displayName = \"NumberDecrementStepper\";\n}\n\n/**\r\n * NumberIncrementStepper\r\n *\r\n * React component used to increment the number input's value\r\n *\r\n * It renders a `div` with `role=button` by default\r\n */\nexport var NumberIncrementStepper = /*#__PURE__*/forwardRef((props, ref) => {\n  var _props$children2;\n  var {\n    getIncrementButtonProps\n  } = useNumberInputContext();\n  var increment = getIncrementButtonProps(props, ref);\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(StyledStepper, _extends({}, increment, {\n    __css: styles.stepper\n  }), (_props$children2 = props.children) != null ? _props$children2 : /*#__PURE__*/React.createElement(TriangleUpIcon, null));\n});\nif (__DEV__) {\n  NumberIncrementStepper.displayName = \"NumberIncrementStepper\";\n}","map":{"version":3,"names":["useFormControlProps","chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","__DEV__","cx","createContext","React","TriangleDownIcon","TriangleUpIcon","useNumberInput","NumberInputProvider","useNumberInputContext","name","errorMessage","NumberInput","props","ref","styles","ownProps","controlProps","_useNumberInput","htmlProps","context","_objectWithoutPropertiesLoose","ctx","useMemo","createElement","value","div","_extends","className","__css","position","zIndex","root","displayName","NumberInputStepper","display","flexDirection","top","insetEnd","margin","height","stepperGroup","NumberInputField","getInputProps","input","width","field","StyledStepper","baseStyle","justifyContent","alignItems","flex","transition","userSelect","cursor","lineHeight","NumberDecrementStepper","_props$children","getDecrementButtonProps","decrement","stepper","children","NumberIncrementStepper","_props$children2","getIncrementButtonProps","increment"],"sources":["../../src/number-input.tsx"],"sourcesContent":["import { useFormControlProps } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { __DEV__, cx } from \"@chakra-ui/utils\"\nimport { createContext } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport { TriangleDownIcon, TriangleUpIcon } from \"./icons\"\nimport {\n  useNumberInput,\n  UseNumberInputProps,\n  UseNumberInputReturn,\n} from \"./use-number-input\"\n\ninterface NumberInputContext extends Omit<UseNumberInputReturn, \"htmlProps\"> {}\n\n/**\n * React context used to communicate between components\n */\nconst [\n  NumberInputProvider,\n  useNumberInputContext,\n] = createContext<NumberInputContext>({\n  name: \"NumberInputContext\",\n  errorMessage:\n    \"useNumberInputContext: `context` is undefined. Seems you forgot to wrap number-input's components within <NumberInput />\",\n})\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * If `true`, the input element will span the full width of its parent\n   *\n   * @deprecated\n   * This component defaults to 100% width,\n   * please use the props `maxWidth` or `width` to configure\n   */\n  isFullWidth?: boolean\n}\n\nexport interface NumberInputProps\n  extends UseNumberInputProps,\n    ThemingProps<\"NumberInput\">,\n    InputOptions,\n    Omit<HTMLChakraProps<\"div\">, keyof UseNumberInputProps> {}\n\n/**\n * NumberInput\n *\n * React component that provides context and logic to all\n * number input sub-components.\n *\n * It renders a `div` by default.\n *\n * @see Docs http://chakra-ui.com/numberinput\n */\nexport const NumberInput = forwardRef<NumberInputProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"NumberInput\", props)\n\n  const ownProps = omitThemingProps(props)\n  const controlProps = useFormControlProps(ownProps)\n\n  const { htmlProps, ...context } = useNumberInput(controlProps)\n  const ctx = React.useMemo(() => context, [context])\n\n  return (\n    <NumberInputProvider value={ctx}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          {...htmlProps}\n          ref={ref}\n          className={cx(\"chakra-numberinput\", props.className)}\n          __css={{\n            position: \"relative\",\n            zIndex: 0,\n            ...styles.root,\n          }}\n        />\n      </StylesProvider>\n    </NumberInputProvider>\n  )\n})\n\nif (__DEV__) {\n  NumberInput.displayName = \"NumberInput\"\n}\n\nexport interface NumberInputStepperProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * NumberInputStepper\n *\n * React component used to group the increment and decrement\n * button spinners.\n *\n * It renders a `div` by default.\n *\n * @see Docs http://chakra-ui.com/components/number-input\n */\nexport const NumberInputStepper = forwardRef<NumberInputStepperProps, \"div\">(\n  (props, ref) => {\n    const styles = useStyles()\n    return (\n      <chakra.div\n        aria-hidden\n        ref={ref}\n        {...props}\n        __css={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          position: \"absolute\",\n          top: \"0\",\n          insetEnd: \"0px\",\n          margin: \"1px\",\n          height: \"calc(100% - 2px)\",\n          zIndex: 1,\n          ...styles.stepperGroup,\n        }}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  NumberInputStepper.displayName = \"NumberInputStepper\"\n}\n\nexport interface NumberInputFieldProps extends HTMLChakraProps<\"input\"> {}\n\n/**\n * NumberInputField\n *\n * React component that represents the actual `input` field\n * where users can type to edit numeric values.\n *\n * It renders an `input` by default and ensures only numeric\n * values can be typed.\n *\n * @see Docs http://chakra-ui.com/numberinput\n */\nexport const NumberInputField = forwardRef<NumberInputFieldProps, \"input\">(\n  (props, ref) => {\n    const { getInputProps } = useNumberInputContext()\n\n    const input = getInputProps(props, ref)\n    const styles = useStyles()\n\n    return (\n      <chakra.input\n        {...input}\n        className={cx(\"chakra-numberinput__field\", props.className)}\n        __css={{\n          width: \"100%\",\n          ...styles.field,\n        }}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  NumberInputField.displayName = \"NumberInputField\"\n}\n\nexport const StyledStepper = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flex: 1,\n    transition: \"all 0.3s\",\n    userSelect: \"none\",\n    cursor: \"pointer\",\n    lineHeight: \"normal\",\n  },\n})\n\nexport interface NumberDecrementStepperProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * NumberDecrementStepper\n *\n * React component used to decrement the number input's value\n *\n * It renders a `div` with `role=button` by default\n */\nexport const NumberDecrementStepper = forwardRef<\n  NumberDecrementStepperProps,\n  \"div\"\n>((props, ref) => {\n  const styles = useStyles()\n  const { getDecrementButtonProps } = useNumberInputContext()\n  const decrement = getDecrementButtonProps(props, ref)\n\n  return (\n    <StyledStepper {...decrement} __css={styles.stepper}>\n      {props.children ?? <TriangleDownIcon />}\n    </StyledStepper>\n  )\n})\n\nif (__DEV__) {\n  NumberDecrementStepper.displayName = \"NumberDecrementStepper\"\n}\n\nexport interface NumberIncrementStepperProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * NumberIncrementStepper\n *\n * React component used to increment the number input's value\n *\n * It renders a `div` with `role=button` by default\n */\nexport const NumberIncrementStepper = forwardRef<\n  NumberIncrementStepperProps,\n  \"div\"\n>((props, ref) => {\n  const { getIncrementButtonProps } = useNumberInputContext()\n  const increment = getIncrementButtonProps(props, ref)\n  const styles = useStyles()\n\n  return (\n    <StyledStepper {...increment} __css={styles.stepper}>\n      {props.children ?? <TriangleUpIcon />}\n    </StyledStepper>\n  )\n})\n\nif (__DEV__) {\n  NumberIncrementStepper.displayName = \"NumberIncrementStepper\"\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}