{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { createDescendantContext } from \"@chakra-ui/descendant\";\nimport { useControllableState, useId } from \"@chakra-ui/hooks\";\nimport { ariaAttr, callAllHandlers, focus } from \"@chakra-ui/utils\";\nimport { createContext, mergeRefs } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\n/* -------------------------------------------------------------------------------------------------\r\n * Create context to track descendants and their indices\r\n * -----------------------------------------------------------------------------------------------*/\n\nexport var [PinInputDescendantsProvider, usePinInputDescendantsContext, usePinInputDescendants, usePinInputDescendant] = createDescendantContext();\n/* -------------------------------------------------------------------------------------------------\r\n * Create context that stores pin-input logic\r\n * -----------------------------------------------------------------------------------------------*/\n\nexport var [PinInputProvider, usePinInputContext] = createContext({\n  name: \"PinInputContext\",\n  errorMessage: \"usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`\"\n});\n/* -------------------------------------------------------------------------------------------------\r\n * usePinInput hook\r\n * -----------------------------------------------------------------------------------------------*/\n\nvar toArray = value => value == null ? void 0 : value.split(\"\");\nfunction validate(value, type) {\n  var NUMERIC_REGEX = /^[0-9]+$/;\n  var ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i;\n  var regex = type === \"alphanumeric\" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX;\n  return regex.test(value);\n}\n/* -------------------------------------------------------------------------------------------------\r\n * usePinInput - handles the general pin input logic\r\n * -----------------------------------------------------------------------------------------------*/\n\n/**\r\n * @internal\r\n */\n\nexport function usePinInput(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var {\n    autoFocus,\n    value,\n    defaultValue,\n    onChange: _onChange,\n    onComplete,\n    placeholder = \"â—‹\",\n    manageFocus = true,\n    otp = false,\n    id: idProp,\n    isDisabled,\n    isInvalid,\n    type = \"number\",\n    mask\n  } = props;\n  var uuid = useId();\n  var id = idProp != null ? idProp : \"pin-input-\" + uuid;\n  var descendants = usePinInputDescendants();\n  var [moveFocus, setMoveFocus] = React.useState(true);\n  var [focusedIndex, setFocusedIndex] = React.useState(-1);\n  var [values, setValues] = useControllableState({\n    defaultValue: toArray(defaultValue) || [],\n    value: toArray(value),\n    onChange: values => _onChange == null ? void 0 : _onChange(values.join(\"\"))\n  });\n  React.useEffect(() => {\n    if (autoFocus) {\n      var first = descendants.first();\n      if (first) focus(first.node, {\n        nextTick: true\n      });\n    } // We don't want to listen for updates to `autoFocus` since it only runs initially\n    // eslint-disable-next-line\n  }, [descendants]);\n  var focusNext = React.useCallback(index => {\n    if (!moveFocus || !manageFocus) return;\n    var next = descendants.next(index, false);\n    if (next) focus(next.node, {\n      nextTick: true\n    });\n  }, [descendants, moveFocus, manageFocus]);\n  var setValue = React.useCallback((value, index) => {\n    var nextValues = [...values];\n    nextValues[index] = value;\n    setValues(nextValues);\n    var isComplete = value !== \"\" && nextValues.length === descendants.count() && nextValues.every(inputValue => inputValue != null && inputValue !== \"\");\n    if (isComplete) {\n      onComplete == null ? void 0 : onComplete(nextValues.join(\"\"));\n    } else {\n      focusNext(index);\n    }\n  }, [values, setValues, focusNext, onComplete, descendants]);\n  var clear = React.useCallback(() => {\n    var values = Array(descendants.count()).fill(\"\");\n    setValues(values);\n    var first = descendants.first();\n    if (first) focus(first.node);\n  }, [descendants, setValues]);\n  var getNextValue = React.useCallback((value, eventValue) => {\n    var nextValue = eventValue;\n    if ((value == null ? void 0 : value.length) > 0) {\n      if (value[0] === eventValue.charAt(0)) {\n        nextValue = eventValue.charAt(1);\n      } else if (value[0] === eventValue.charAt(1)) {\n        nextValue = eventValue.charAt(0);\n      }\n    }\n    return nextValue;\n  }, []);\n  var getInputProps = React.useCallback(props => {\n    var {\n        index\n      } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"index\"]);\n    /**\r\n     * Improved from: https://github.com/uber/baseweb/blob/master/src/pin-code/pin-code.js\r\n     */\n\n    var onChange = event => {\n      var eventValue = event.target.value;\n      var currentValue = values[index];\n      var nextValue = getNextValue(currentValue, eventValue); // if the value was removed using backspace\n\n      if (nextValue === \"\") {\n        setValue(\"\", index);\n        return;\n      } // in the case of an autocomplete or copy and paste\n\n      if (eventValue.length > 2) {\n        // see if we can use the string to fill out our values\n        if (validate(eventValue, type)) {\n          // Ensure the value matches the number of inputs\n          var _nextValue = eventValue.split(\"\").filter((_, index) => index < descendants.count());\n          setValues(_nextValue); // if pasting fills the entire input fields, trigger `onComplete`\n\n          if (_nextValue.length === descendants.count()) {\n            onComplete == null ? void 0 : onComplete(_nextValue.join(\"\"));\n          }\n        }\n      } else {\n        // only set if the new value is a number\n        if (validate(nextValue, type)) {\n          setValue(nextValue, index);\n        }\n        setMoveFocus(true);\n      }\n    };\n    var onKeyDown = event => {\n      if (event.key === \"Backspace\" && manageFocus) {\n        if (event.target.value === \"\") {\n          var prevInput = descendants.prev(index, false);\n          if (prevInput) {\n            setValue(\"\", index - 1);\n            focus(prevInput.node);\n            setMoveFocus(true);\n          }\n        } else {\n          setMoveFocus(false);\n        }\n      }\n    };\n    var onFocus = () => {\n      setFocusedIndex(index);\n    };\n    var onBlur = () => {\n      setFocusedIndex(-1);\n    };\n    var hasFocus = focusedIndex === index;\n    var inputType = type === \"number\" ? \"tel\" : \"text\";\n    return _extends({\n      \"aria-label\": \"Please enter your pin code\",\n      inputMode: type === \"number\" ? \"numeric\" : \"text\",\n      type: mask ? \"password\" : inputType\n    }, rest, {\n      id: id + \"-\" + index,\n      disabled: isDisabled,\n      \"aria-invalid\": ariaAttr(isInvalid),\n      onChange: callAllHandlers(rest.onChange, onChange),\n      onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(rest.onFocus, onFocus),\n      onBlur: callAllHandlers(rest.onBlur, onBlur),\n      value: values[index] || \"\",\n      autoComplete: otp ? \"one-time-code\" : \"off\",\n      placeholder: hasFocus ? \"\" : placeholder\n    });\n  }, [descendants, focusedIndex, getNextValue, id, isDisabled, mask, isInvalid, manageFocus, onComplete, otp, placeholder, setValue, setValues, type, values]);\n  return {\n    // prop getter\n    getInputProps,\n    // state\n    id,\n    descendants,\n    values,\n    // actions\n    setValue,\n    setValues,\n    clear\n  };\n}\n\n/**\r\n * @internal\r\n */\nexport function usePinInputField(props, ref) {\n  if (props === void 0) {\n    props = {};\n  }\n  if (ref === void 0) {\n    ref = null;\n  }\n  var {\n    getInputProps\n  } = usePinInputContext();\n  var {\n    index,\n    register\n  } = usePinInputDescendant();\n  return getInputProps(_extends({}, props, {\n    ref: mergeRefs(register, ref),\n    index\n  }));\n}","map":{"version":3,"names":["createDescendantContext","useControllableState","useId","ariaAttr","callAllHandlers","focus","createContext","mergeRefs","React","PinInputDescendantsProvider","usePinInputDescendantsContext","usePinInputDescendants","usePinInputDescendant","PinInputProvider","usePinInputContext","name","errorMessage","toArray","value","split","validate","type","NUMERIC_REGEX","ALPHA_NUMERIC_REGEX","regex","test","usePinInput","props","autoFocus","defaultValue","onChange","_onChange","onComplete","placeholder","manageFocus","otp","id","idProp","isDisabled","isInvalid","mask","uuid","descendants","moveFocus","setMoveFocus","useState","focusedIndex","setFocusedIndex","values","setValues","join","useEffect","first","node","nextTick","focusNext","useCallback","index","next","setValue","nextValues","isComplete","length","count","every","inputValue","clear","Array","fill","getNextValue","eventValue","nextValue","charAt","getInputProps","rest","_objectWithoutPropertiesLoose","event","target","currentValue","_nextValue","filter","_","onKeyDown","key","prevInput","prev","onFocus","onBlur","hasFocus","inputType","_extends","inputMode","disabled","autoComplete","usePinInputField","ref","register"],"sources":["../../src/use-pin-input.ts"],"sourcesContent":["import { createDescendantContext } from \"@chakra-ui/descendant\"\nimport { useControllableState, useId } from \"@chakra-ui/hooks\"\nimport { ariaAttr, callAllHandlers, focus } from \"@chakra-ui/utils\"\nimport { createContext, mergeRefs } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [\n  PinInputDescendantsProvider,\n  usePinInputDescendantsContext,\n  usePinInputDescendants,\n  usePinInputDescendant,\n] = createDescendantContext<HTMLInputElement>()\n\n/* -------------------------------------------------------------------------------------------------\n * Create context that stores pin-input logic\n * -----------------------------------------------------------------------------------------------*/\n\nexport type PinInputContext = Omit<UsePinInputReturn, \"descendants\"> & {\n  /**\n   * Sets the pin input component to the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * Sets the pin input component to the invalid state\n   */\n  isInvalid?: boolean\n}\n\nexport const [\n  PinInputProvider,\n  usePinInputContext,\n] = createContext<PinInputContext>({\n  name: \"PinInputContext\",\n  errorMessage:\n    \"usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`\",\n})\n\n/* -------------------------------------------------------------------------------------------------\n * usePinInput hook\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UsePinInputProps {\n  /**\n   * If `true`, the pin input receives focus on mount\n   */\n  autoFocus?: boolean\n  /**\n   * The value of the the pin input. This is the value\n   * that will be returned when the pin input is filled\n   */\n  value?: string\n  /**\n   * The default value of the pin input\n   */\n  defaultValue?: string\n  /**\n   * Function called on input change\n   */\n  onChange?: (value: string) => void\n  /**\n   * Function called when all inputs have valid values\n   */\n  onComplete?: (value: string) => void\n  /**\n   * The placeholder for the pin input\n   */\n  placeholder?: string\n  /**\n   * If `true`, focus will move automatically to the next input once filled\n   * @default true\n   */\n  manageFocus?: boolean\n  /**\n   * If `true`, the pin input component signals to its fields that they should\n   * use `autocomplete=\"one-time-code\"`.\n   */\n  otp?: boolean\n  /**\n   * The top-level id string that will be applied to the input fields.\n   * The index of the input will be appended to this top-level id.\n   *\n   * @example\n   * if id=\"foo\", the first input will have `foo-0`\n   */\n  id?: string\n  /**\n   * If `true`, the pin input component is put in the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the pin input component is put in the invalid state\n   */\n  isInvalid?: boolean\n  /**\n   * The type of values the pin-input should allow\n   */\n  type?: \"alphanumeric\" | \"number\"\n  /**\n   * If `true`, the input's value will be masked just like `type=password`\n   */\n  mask?: boolean\n}\n\nconst toArray = (value?: string) => value?.split(\"\")\n\nfunction validate(value: string, type: UsePinInputProps[\"type\"]) {\n  const NUMERIC_REGEX = /^[0-9]+$/\n  const ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i\n  const regex = type === \"alphanumeric\" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX\n  return regex.test(value)\n}\n\n/* -------------------------------------------------------------------------------------------------\n * usePinInput - handles the general pin input logic\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal\n */\nexport function usePinInput(props: UsePinInputProps = {}) {\n  const {\n    autoFocus,\n    value,\n    defaultValue,\n    onChange,\n    onComplete,\n    placeholder = \"â—‹\",\n    manageFocus = true,\n    otp = false,\n    id: idProp,\n    isDisabled,\n    isInvalid,\n    type = \"number\",\n    mask,\n  } = props\n\n  const uuid = useId()\n  const id = idProp ?? `pin-input-${uuid}`\n\n  const descendants = usePinInputDescendants()\n\n  const [moveFocus, setMoveFocus] = React.useState(true)\n  const [focusedIndex, setFocusedIndex] = React.useState(-1)\n\n  const [values, setValues] = useControllableState<string[]>({\n    defaultValue: toArray(defaultValue) || [],\n    value: toArray(value),\n    onChange: (values) => onChange?.(values.join(\"\")),\n  })\n\n  React.useEffect(() => {\n    if (autoFocus) {\n      const first = descendants.first()\n      if (first) focus(first.node, { nextTick: true })\n    }\n    // We don't want to listen for updates to `autoFocus` since it only runs initially\n    // eslint-disable-next-line\n  }, [descendants])\n\n  const focusNext = React.useCallback(\n    (index: number) => {\n      if (!moveFocus || !manageFocus) return\n      const next = descendants.next(index, false)\n      if (next) focus(next.node, { nextTick: true })\n    },\n    [descendants, moveFocus, manageFocus],\n  )\n\n  const setValue = React.useCallback(\n    (value: string, index: number) => {\n      const nextValues = [...values]\n      nextValues[index] = value\n      setValues(nextValues)\n\n      const isComplete =\n        value !== \"\" &&\n        nextValues.length === descendants.count() &&\n        nextValues.every(\n          (inputValue) => inputValue != null && inputValue !== \"\",\n        )\n\n      if (isComplete) {\n        onComplete?.(nextValues.join(\"\"))\n      } else {\n        focusNext(index)\n      }\n    },\n    [values, setValues, focusNext, onComplete, descendants],\n  )\n\n  const clear = React.useCallback(() => {\n    const values: string[] = Array(descendants.count()).fill(\"\")\n    setValues(values)\n    const first = descendants.first()\n    if (first) focus(first.node)\n  }, [descendants, setValues])\n\n  const getNextValue = React.useCallback(\n    (value: string, eventValue: string) => {\n      let nextValue = eventValue\n      if (value?.length > 0) {\n        if (value[0] === eventValue.charAt(0)) {\n          nextValue = eventValue.charAt(1)\n        } else if (value[0] === eventValue.charAt(1)) {\n          nextValue = eventValue.charAt(0)\n        }\n      }\n      return nextValue\n    },\n    [],\n  )\n\n  const getInputProps = React.useCallback(\n    (props: InputProps & { index: number }): InputProps => {\n      const { index, ...rest } = props\n\n      /**\n       * Improved from: https://github.com/uber/baseweb/blob/master/src/pin-code/pin-code.js\n       */\n      const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const eventValue = event.target.value\n        const currentValue = values[index]\n        const nextValue = getNextValue(currentValue, eventValue)\n\n        // if the value was removed using backspace\n        if (nextValue === \"\") {\n          setValue(\"\", index)\n          return\n        }\n\n        // in the case of an autocomplete or copy and paste\n        if (eventValue.length > 2) {\n          // see if we can use the string to fill out our values\n          if (validate(eventValue, type)) {\n            // Ensure the value matches the number of inputs\n            const nextValue = eventValue\n              .split(\"\")\n              .filter((_, index) => index < descendants.count())\n\n            setValues(nextValue)\n\n            // if pasting fills the entire input fields, trigger `onComplete`\n            if (nextValue.length === descendants.count()) {\n              onComplete?.(nextValue.join(\"\"))\n            }\n          }\n        } else {\n          // only set if the new value is a number\n          if (validate(nextValue, type)) {\n            setValue(nextValue, index)\n          }\n\n          setMoveFocus(true)\n        }\n      }\n\n      const onKeyDown = (event: React.KeyboardEvent) => {\n        if (event.key === \"Backspace\" && manageFocus) {\n          if ((event.target as HTMLInputElement).value === \"\") {\n            const prevInput = descendants.prev(index, false)\n            if (prevInput) {\n              setValue(\"\", index - 1)\n              focus(prevInput.node)\n              setMoveFocus(true)\n            }\n          } else {\n            setMoveFocus(false)\n          }\n        }\n      }\n\n      const onFocus = () => {\n        setFocusedIndex(index)\n      }\n\n      const onBlur = () => {\n        setFocusedIndex(-1)\n      }\n\n      const hasFocus = focusedIndex === index\n      const inputType = type === \"number\" ? \"tel\" : \"text\"\n\n      return {\n        \"aria-label\": \"Please enter your pin code\",\n        inputMode: type === \"number\" ? \"numeric\" : \"text\",\n        type: mask ? \"password\" : inputType,\n        ...rest,\n        id: `${id}-${index}`,\n        disabled: isDisabled,\n        \"aria-invalid\": ariaAttr(isInvalid),\n        onChange: callAllHandlers(rest.onChange, onChange),\n        onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),\n        onFocus: callAllHandlers(rest.onFocus, onFocus),\n        onBlur: callAllHandlers(rest.onBlur, onBlur),\n        value: values[index] || \"\",\n        autoComplete: otp ? \"one-time-code\" : \"off\",\n        placeholder: hasFocus ? \"\" : placeholder,\n      }\n    },\n    [\n      descendants,\n      focusedIndex,\n      getNextValue,\n      id,\n      isDisabled,\n      mask,\n      isInvalid,\n      manageFocus,\n      onComplete,\n      otp,\n      placeholder,\n      setValue,\n      setValues,\n      type,\n      values,\n    ],\n  )\n\n  return {\n    // prop getter\n    getInputProps,\n    // state\n    id,\n    descendants,\n    values,\n    // actions\n    setValue,\n    setValues,\n    clear,\n  }\n}\n\nexport type UsePinInputReturn = ReturnType<typeof usePinInput>\n\nexport interface UsePinInputFieldProps extends InputProps {\n  ref?: React.Ref<HTMLInputElement>\n}\n\n/**\n * @internal\n */\nexport function usePinInputField(\n  props: UsePinInputFieldProps = {},\n  ref: React.Ref<any> = null,\n) {\n  const { getInputProps } = usePinInputContext()\n  const { index, register } = usePinInputDescendant()\n\n  return getInputProps({\n    ...props,\n    ref: mergeRefs(register, ref),\n    index,\n  })\n}\n\ninterface InputProps\n  extends Omit<\n    React.ComponentPropsWithRef<\"input\">,\n    \"color\" | \"height\" | \"width\"\n  > {}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}