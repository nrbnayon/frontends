{"ast":null,"code":"import { getLastItem } from \"./array\";\nimport { isNumber, isObject } from \"./assertion\";\nimport { fromEntries } from \"./object\";\nfunction analyzeCSSValue(value) {\n  var num = parseFloat(value.toString());\n  var unit = value.toString().replace(String(num), \"\");\n  return {\n    unitless: !unit,\n    value: num,\n    unit\n  };\n}\nexport function px(value) {\n  if (value == null) return value;\n  var {\n    unitless\n  } = analyzeCSSValue(value);\n  return unitless || isNumber(value) ? value + \"px\" : value;\n}\nvar sortByBreakpointValue = (a, b) => parseInt(a[1], 10) > parseInt(b[1], 10) ? 1 : -1;\nvar sortBps = breakpoints => fromEntries(Object.entries(breakpoints).sort(sortByBreakpointValue));\nfunction normalize(breakpoints) {\n  var sorted = sortBps(breakpoints);\n  return Object.assign(Object.values(sorted), sorted);\n}\nfunction keys(breakpoints) {\n  var value = Object.keys(sortBps(breakpoints));\n  return new Set(value);\n}\nfunction subtract(value) {\n  var _px;\n  if (!value) return value;\n  value = (_px = px(value)) != null ? _px : value;\n  var factor = value.endsWith(\"px\") ? -1 :\n  // the equivalent of 1px in em using a 16px base\n  -0.0635;\n  return isNumber(value) ? \"\" + (value + factor) : value.replace(/([0-9]+\\.?[0-9]*)/, m => \"\" + (parseFloat(m) + factor));\n}\nfunction queryString(min, max) {\n  var query = [];\n  if (min) query.push(\"@media screen and (min-width: \" + px(min) + \")\");\n  if (query.length > 0 && max) query.push(\"and\");\n  if (max) query.push(\"@media screen and (max-width: \" + px(max) + \")\");\n  return query.join(\" \");\n}\nexport function analyzeBreakpoints(breakpoints) {\n  var _breakpoints$base;\n  if (!breakpoints) return null;\n  breakpoints.base = (_breakpoints$base = breakpoints.base) != null ? _breakpoints$base : \"0px\";\n  var normalized = normalize(breakpoints);\n  var queries = Object.entries(breakpoints).sort(sortByBreakpointValue).map((_ref, index, entry) => {\n    var _entry;\n    var [breakpoint, minW] = _ref;\n    var [, maxW] = (_entry = entry[index + 1]) != null ? _entry : [];\n    maxW = parseFloat(maxW) > 0 ? subtract(maxW) : undefined;\n    return {\n      breakpoint,\n      minW,\n      maxW,\n      maxWQuery: queryString(null, maxW),\n      minWQuery: queryString(minW),\n      minMaxQuery: queryString(minW, maxW)\n    };\n  });\n  var _keys = keys(breakpoints);\n  var _keysArr = Array.from(_keys.values());\n  return {\n    keys: _keys,\n    normalized,\n    isResponsive(test) {\n      var keys = Object.keys(test);\n      return keys.length > 0 && keys.every(key => _keys.has(key));\n    },\n    asObject: sortBps(breakpoints),\n    asArray: normalize(breakpoints),\n    details: queries,\n    media: [null, ...normalized.map(minW => queryString(minW)).slice(1)],\n    toArrayValue(test) {\n      if (!isObject(test)) {\n        throw new Error(\"toArrayValue: value must be an object\");\n      }\n      var result = _keysArr.map(bp => {\n        var _test$bp;\n        return (_test$bp = test[bp]) != null ? _test$bp : null;\n      });\n      while (getLastItem(result) === null) {\n        result.pop();\n      }\n      return result;\n    },\n    toObjectValue(test) {\n      if (!Array.isArray(test)) {\n        throw new Error(\"toObjectValue: value must be an array\");\n      }\n      return test.reduce((acc, value, index) => {\n        var key = _keysArr[index];\n        if (key != null && value != null) acc[key] = value;\n        return acc;\n      }, {});\n    }\n  };\n}","map":{"version":3,"names":["getLastItem","isNumber","isObject","fromEntries","analyzeCSSValue","value","num","parseFloat","toString","unit","replace","String","unitless","px","sortByBreakpointValue","a","b","parseInt","sortBps","breakpoints","Object","entries","sort","normalize","sorted","assign","values","keys","Set","subtract","_px","factor","endsWith","m","queryString","min","max","query","push","length","join","analyzeBreakpoints","_breakpoints$base","base","normalized","queries","map","_ref","index","entry","_entry","breakpoint","minW","maxW","undefined","maxWQuery","minWQuery","minMaxQuery","_keys","_keysArr","Array","from","isResponsive","test","every","key","has","asObject","asArray","details","media","slice","toArrayValue","Error","result","bp","_test$bp","pop","toObjectValue","isArray","reduce","acc"],"sources":["../../src/breakpoint.ts"],"sourcesContent":["import { getLastItem } from \"./array\"\nimport { isNumber, isObject } from \"./assertion\"\nimport { fromEntries } from \"./object\"\nimport { Dict } from \"./types\"\n\nfunction analyzeCSSValue(value: number | string) {\n  const num = parseFloat(value.toString())\n  const unit = value.toString().replace(String(num), \"\")\n  return { unitless: !unit, value: num, unit }\n}\n\nexport function px(value: number | string | null): string | null {\n  if (value == null) return value\n  const { unitless } = analyzeCSSValue(value)\n  return unitless || isNumber(value) ? `${value}px` : value\n}\n\nconst sortByBreakpointValue = (a: any[], b: any[]) =>\n  parseInt(a[1], 10) > parseInt(b[1], 10) ? 1 : -1\n\nconst sortBps = (breakpoints: Dict): Dict =>\n  fromEntries(Object.entries(breakpoints).sort(sortByBreakpointValue))\n\nfunction normalize(breakpoints: Dict) {\n  const sorted = sortBps(breakpoints)\n  return Object.assign(Object.values(sorted), sorted) as string[]\n}\n\nfunction keys(breakpoints: Dict) {\n  const value = Object.keys(sortBps(breakpoints))\n  return new Set(value)\n}\n\nfunction subtract(value: string) {\n  if (!value) return value\n  value = px(value) ?? value\n  const factor = value.endsWith(\"px\")\n    ? -1\n    : // the equivalent of 1px in em using a 16px base\n      -0.0635\n  return isNumber(value)\n    ? `${value + factor}`\n    : value.replace(/(\\d+\\.?\\d*)/u, (m) => `${parseFloat(m) + factor}`)\n}\n\nfunction queryString(min: string | null, max?: string) {\n  const query = []\n\n  if (min) query.push(`@media screen and (min-width: ${px(min)})`)\n  if (query.length > 0 && max) query.push(\"and\")\n  if (max) query.push(`@media screen and (max-width: ${px(max)})`)\n\n  return query.join(\" \")\n}\n\nexport function analyzeBreakpoints(breakpoints: Dict) {\n  if (!breakpoints) return null\n\n  breakpoints.base = breakpoints.base ?? \"0px\"\n\n  const normalized = normalize(breakpoints)\n\n  const queries = Object.entries(breakpoints)\n    .sort(sortByBreakpointValue)\n    .map(([breakpoint, minW], index, entry) => {\n      let [, maxW] = entry[index + 1] ?? []\n      maxW = parseFloat(maxW) > 0 ? subtract(maxW) : undefined\n      return {\n        breakpoint,\n        minW,\n        maxW,\n        maxWQuery: queryString(null, maxW),\n        minWQuery: queryString(minW),\n        minMaxQuery: queryString(minW, maxW),\n      }\n    })\n\n  const _keys = keys(breakpoints)\n  const _keysArr = Array.from(_keys.values())\n\n  return {\n    keys: _keys,\n    normalized,\n    isResponsive(test: Dict) {\n      const keys = Object.keys(test)\n      return keys.length > 0 && keys.every((key) => _keys.has(key))\n    },\n    asObject: sortBps(breakpoints),\n    asArray: normalize(breakpoints),\n    details: queries,\n    media: [null, ...normalized.map((minW) => queryString(minW)).slice(1)],\n    toArrayValue(test: Dict) {\n      if (!isObject(test)) {\n        throw new Error(\"toArrayValue: value must be an object\")\n      }\n      const result = _keysArr.map((bp) => test[bp] ?? null)\n      while (getLastItem(result) === null) {\n        result.pop()\n      }\n      return result\n    },\n    toObjectValue(test: any[]) {\n      if (!Array.isArray(test)) {\n        throw new Error(\"toObjectValue: value must be an array\")\n      }\n      return test.reduce((acc, value, index) => {\n        const key = _keysArr[index]\n        if (key != null && value != null) acc[key] = value\n        return acc\n      }, {} as Dict)\n    },\n  }\n}\n\nexport type AnalyzeBreakpointsReturn = ReturnType<typeof analyzeBreakpoints>\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,SAA5B;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,aAAnC;AACA,SAASC,WAAT,QAA4B,UAA5B;AAGA,SAASC,eAATA,CAAyBC,KAAzB,EAAiD;EAC/C,IAAMC,GAAG,GAAGC,UAAU,CAACF,KAAK,CAACG,QAAN,EAAD,CAAtB;EACA,IAAMC,IAAI,GAAGJ,KAAK,CAACG,QAAN,GAAiBE,OAAjB,CAAyBC,MAAM,CAACL,GAAD,CAA/B,EAAsC,EAAtC,CAAb;EACA,OAAO;IAAEM,QAAQ,EAAE,CAACH,IAAb;IAAmBJ,KAAK,EAAEC,GAA1B;IAA+BG;EAA/B,CAAP;AACD;AAED,OAAO,SAASI,EAATA,CAAYR,KAAZ,EAA0D;EAC/D,IAAIA,KAAK,IAAI,IAAb,EAAmB,OAAOA,KAAP;EACnB,IAAM;IAAEO;EAAF,IAAeR,eAAe,CAACC,KAAD,CAApC;EACA,OAAOO,QAAQ,IAAIX,QAAQ,CAACI,KAAD,CAApB,GAAiCA,KAAjC,UAA6CA,KAApD;AACD;AAED,IAAMS,qBAAqB,GAAGA,CAACC,CAAD,EAAWC,CAAX,KAC5BC,QAAQ,CAACF,CAAC,CAAC,CAAD,CAAF,EAAO,EAAP,CAAR,GAAqBE,QAAQ,CAACD,CAAC,CAAC,CAAD,CAAF,EAAO,EAAP,CAA7B,GAA0C,CAA1C,GAA8C,CAAC,CADjD;AAGA,IAAME,OAAO,GAAIC,WAAD,IACdhB,WAAW,CAACiB,MAAM,CAACC,OAAP,CAAeF,WAAf,EAA4BG,IAA5B,CAAiCR,qBAAjC,CAAD,CADb;AAGA,SAASS,SAATA,CAAmBJ,WAAnB,EAAsC;EACpC,IAAMK,MAAM,GAAGN,OAAO,CAACC,WAAD,CAAtB;EACA,OAAOC,MAAM,CAACK,MAAP,CAAcL,MAAM,CAACM,MAAP,CAAcF,MAAd,CAAd,EAAqCA,MAArC,CAAP;AACD;AAED,SAASG,IAATA,CAAcR,WAAd,EAAiC;EAC/B,IAAMd,KAAK,GAAGe,MAAM,CAACO,IAAP,CAAYT,OAAO,CAACC,WAAD,CAAnB,CAAd;EACA,OAAO,IAAIS,GAAJ,CAAQvB,KAAR,CAAP;AACD;AAED,SAASwB,QAATA,CAAkBxB,KAAlB,EAAiC;EAAA,IAAAyB,GAAA;EAC/B,IAAI,CAACzB,KAAL,EAAY,OAAOA,KAAP;EACZA,KAAK,IAAAyB,GAAA,GAAGjB,EAAE,CAACR,KAAD,CAAL,YAAAyB,GAAA,GAAgBzB,KAArB;EACA,IAAM0B,MAAM,GAAG1B,KAAK,CAAC2B,QAAN,CAAe,IAAf,IACX,CAAC,CADU;EAEX;EACA,CAAC,MAHL;EAIA,OAAO/B,QAAQ,CAACI,KAAD,CAAR,SACAA,KAAK,GAAG0B,MADR,IAEH1B,KAAK,CAACK,OAAN,CAAc,mBAAd,EAA+BuB,CAAD,UAAU1B,UAAU,CAAC0B,CAAD,CAAV,GAAgBF,MAA1B,CAA9B,CAFJ;AAGD;AAED,SAASG,WAATA,CAAqBC,GAArB,EAAyCC,GAAzC,EAAuD;EACrD,IAAMC,KAAK,GAAG,EAAd;EAEA,IAAIF,GAAJ,EAASE,KAAK,CAACC,IAAN,oCAA4CzB,EAAE,CAACsB,GAAD,CAA9C;EACT,IAAIE,KAAK,CAACE,MAAN,GAAe,CAAf,IAAoBH,GAAxB,EAA6BC,KAAK,CAACC,IAAN,CAAW,KAAX;EAC7B,IAAIF,GAAJ,EAASC,KAAK,CAACC,IAAN,oCAA4CzB,EAAE,CAACuB,GAAD,CAA9C;EAET,OAAOC,KAAK,CAACG,IAAN,CAAW,GAAX,CAAP;AACD;AAED,OAAO,SAASC,kBAATA,CAA4BtB,WAA5B,EAA+C;EAAA,IAAAuB,iBAAA;EACpD,IAAI,CAACvB,WAAL,EAAkB,OAAO,IAAP;EAElBA,WAAW,CAACwB,IAAZ,IAAAD,iBAAA,GAAmBvB,WAAW,CAACwB,IAA/B,YAAAD,iBAAA,GAAuC,KAAvC;EAEA,IAAME,UAAU,GAAGrB,SAAS,CAACJ,WAAD,CAA5B;EAEA,IAAM0B,OAAO,GAAGzB,MAAM,CAACC,OAAP,CAAeF,WAAf,EACbG,IADa,CACRR,qBADQ,EAEbgC,GAFa,CAET,CAAAC,IAAA,EAAqBC,KAArB,EAA4BC,KAA5B,KAAsC;IAAA,IAAAC,MAAA;IAAA,IAArC,CAACC,UAAD,EAAaC,IAAb,CAAqC,GAAAL,IAAA;IACzC,IAAI,GAAGM,IAAH,KAAAH,MAAA,GAAWD,KAAK,CAACD,KAAK,GAAG,CAAT,CAAhB,YAAAE,MAAA,GAA+B,EAAnC;IACAG,IAAI,GAAG9C,UAAU,CAAC8C,IAAD,CAAV,GAAmB,CAAnB,GAAuBxB,QAAQ,CAACwB,IAAD,CAA/B,GAAwCC,SAA/C;IACA,OAAO;MACLH,UADK;MAELC,IAFK;MAGLC,IAHK;MAILE,SAAS,EAAErB,WAAW,CAAC,IAAD,EAAOmB,IAAP,CAJjB;MAKLG,SAAS,EAAEtB,WAAW,CAACkB,IAAD,CALjB;MAMLK,WAAW,EAAEvB,WAAW,CAACkB,IAAD,EAAOC,IAAP;IANnB,CAAP;EAQD,CAba,CAAhB;EAeA,IAAMK,KAAK,GAAG/B,IAAI,CAACR,WAAD,CAAlB;EACA,IAAMwC,QAAQ,GAAGC,KAAK,CAACC,IAAN,CAAWH,KAAK,CAAChC,MAAN,EAAX,CAAjB;EAEA,OAAO;IACLC,IAAI,EAAE+B,KADD;IAELd,UAFK;IAGLkB,YAAYA,CAACC,IAAD,EAAa;MACvB,IAAMpC,IAAI,GAAGP,MAAM,CAACO,IAAP,CAAYoC,IAAZ,CAAb;MACA,OAAOpC,IAAI,CAACY,MAAL,GAAc,CAAd,IAAmBZ,IAAI,CAACqC,KAAL,CAAYC,GAAD,IAASP,KAAK,CAACQ,GAAN,CAAUD,GAAV,CAApB,CAA1B;IACD,CANI;IAOLE,QAAQ,EAAEjD,OAAO,CAACC,WAAD,CAPZ;IAQLiD,OAAO,EAAE7C,SAAS,CAACJ,WAAD,CARb;IASLkD,OAAO,EAAExB,OATJ;IAULyB,KAAK,EAAE,CAAC,IAAD,EAAO,GAAG1B,UAAU,CAACE,GAAX,CAAgBM,IAAD,IAAUlB,WAAW,CAACkB,IAAD,CAApC,EAA4CmB,KAA5C,CAAkD,CAAlD,CAAV,CAVF;IAWLC,YAAYA,CAACT,IAAD,EAAa;MACvB,IAAI,CAAC7D,QAAQ,CAAC6D,IAAD,CAAb,EAAqB;QACnB,MAAM,IAAIU,KAAJ,CAAU,uCAAV,CAAN;MACD;MACD,IAAMC,MAAM,GAAGf,QAAQ,CAACb,GAAT,CAAc6B,EAAD;QAAA,IAAAC,QAAA;QAAA,QAAAA,QAAA,GAAQb,IAAI,CAACY,EAAD,CAAZ,YAAAC,QAAA,GAAoB,IAApB;MAAA,CAAb,CAAf;MACA,OAAO5E,WAAW,CAAC0E,MAAD,CAAX,KAAwB,IAA/B,EAAqC;QACnCA,MAAM,CAACG,GAAP;MACD;MACD,OAAOH,MAAP;IACD,CApBI;IAqBLI,aAAaA,CAACf,IAAD,EAAc;MACzB,IAAI,CAACH,KAAK,CAACmB,OAAN,CAAchB,IAAd,CAAL,EAA0B;QACxB,MAAM,IAAIU,KAAJ,CAAU,uCAAV,CAAN;MACD;MACD,OAAOV,IAAI,CAACiB,MAAL,CAAY,CAACC,GAAD,EAAM5E,KAAN,EAAa2C,KAAb,KAAuB;QACxC,IAAMiB,GAAG,GAAGN,QAAQ,CAACX,KAAD,CAApB;QACA,IAAIiB,GAAG,IAAI,IAAP,IAAe5D,KAAK,IAAI,IAA5B,EAAkC4E,GAAG,CAAChB,GAAD,CAAH,GAAW5D,KAAX;QAClC,OAAO4E,GAAP;MACD,CAJM,EAIJ,EAJI,CAAP;IAKD;EA9BI,CAAP;AAgCD"},"metadata":{},"sourceType":"module"}