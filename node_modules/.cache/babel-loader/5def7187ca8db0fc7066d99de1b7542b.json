{"ast":null,"code":"var _jsxFileName = \"E:\\\\React Native\\\\mern-chat-app\\\\frontend\\\\src\\\\components\\\\SingleChat.js\",\n    _s = $RefreshSig$();\n\nimport { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:8080\";\n\nconst SingleChat = ({\n  fetchAgain,\n  setFetchAgain\n}) => {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [typingText, setTypingText] = useState(\"\");\n  const toast = useToast();\n  const {\n    selectedChat,\n    setSelectedChat,\n    user,\n    notification,\n    setNotification\n  } = ChatState();\n  const socket = io(ENDPOINT);\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      setLoading(true);\n      const {\n        data\n      } = await axios.get(`/api/message/${selectedChat._id}`, config);\n      setMessages(data);\n      setLoading(false);\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occurred!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\"\n      });\n    }\n  };\n\n  useEffect(() => {\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => {\n      console.log(\"Connected to socket.io\");\n      setSocketConnected(true);\n    });\n    socket.on(\"typing\", inputText => {\n      console.log(`Received typing event: ${inputText}`);\n      setTypingText(inputText);\n    });\n    socket.on(\"stop typing\", () => {\n      console.log(\"Received stop typing event\");\n      setTypingText(\"\");\n    });\n    fetchMessages(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user, selectedChat]);\n  useEffect(() => {\n    const handleMessageReceived = newMessageReceived => {\n      if (!selectedChat || selectedChat._id !== newMessageReceived.chat._id) {\n        if (!notification.includes(newMessageReceived)) {\n          setNotification([newMessageReceived, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages(prevMessages => [...prevMessages, newMessageReceived]);\n      }\n    };\n\n    socket.on(\"message received\", handleMessageReceived);\n    return () => {\n      socket.off(\"message received\", handleMessageReceived);\n      socket.off(\"typing\");\n      socket.off(\"stop typing\");\n    }; // eslint-disable-next-line\n  }, [notification, setFetchAgain, selectedChat]);\n\n  const sendMessage = async event => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`\n          }\n        };\n        setNewMessage(\"\");\n        const {\n          data\n        } = await axios.post(\"/api/message\", {\n          content: newMessage,\n          chatId: selectedChat\n        }, config);\n        setMessages(prevMessages => [...prevMessages, data]);\n        socket.emit(\"new message\", data);\n      } catch (error) {\n        toast({\n          title: \"Error Occurred!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\"\n        });\n      }\n    }\n  };\n\n  const typingHandler = e => {\n    const inputText = e.target.value;\n    setNewMessage(inputText);\n    if (!socketConnected) return;\n\n    if (!isTyping) {\n      setIsTyping(true);\n      socket.emit(\"typing\", selectedChat._id, inputText);\n    }\n\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n\n      if (timeDiff >= timerLength && isTyping) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setIsTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: selectedChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: {\n          base: \"28px\",\n          md: \"30px\"\n        },\n        pb: 3,\n        px: 2,\n        w: \"100%\",\n        fontFamily: \"Work sans\",\n        d: \"flex\",\n        justifyContent: {\n          base: \"space-between\"\n        },\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          display: {\n            base: \"flex\",\n            md: \"none\"\n          },\n          icon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 21\n          }, this),\n          onClick: () => setSelectedChat(\"\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this), messages && (!selectedChat.isGroupChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [getSender(user, selectedChat.users), /*#__PURE__*/_jsxDEV(ProfileModal, {\n            user: getSenderFull(user, selectedChat.users)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [selectedChat.chatName.toUpperCase(), /*#__PURE__*/_jsxDEV(UpdateGroupChatModal, {\n            fetchMessages: fetchMessages,\n            fetchAgain: fetchAgain,\n            setFetchAgain: setFetchAgain\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        flexDir: \"column\",\n        justifyContent: \"flex-end\",\n        p: 3,\n        bg: \"#E8E8E8\",\n        w: \"100%\",\n        h: \"100%\",\n        borderRadius: \"lg\",\n        overflowY: \"hidden\",\n        children: [loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n          size: \"xl\",\n          w: 20,\n          h: 20,\n          alignSelf: \"center\",\n          margin: \"auto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: /*#__PURE__*/_jsxDEV(ScrollableChat, {\n            messages: messages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          onKeyDown: sendMessage,\n          id: \"first-name\",\n          isRequired: true,\n          mt: 3,\n          children: [isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [user.name, \": \", typingText]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            variant: \"filled\",\n            bg: \"#E0E0E0\",\n            placeholder: \"Enter a message..\",\n            value: newMessage,\n            onChange: typingHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      h: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"3xl\",\n        pb: 3,\n        fontFamily: \"Work sans\",\n        children: \"Click on a user to start chatting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(SingleChat, \"HbAs/2xK/7DPUFeOt/gdATaViiQ=\", false, function () {\n  return [useToast];\n});\n\n_c = SingleChat;\nexport default SingleChat;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleChat\");","map":{"version":3,"sources":["E:/React Native/mern-chat-app/frontend/src/components/SingleChat.js"],"names":["FormControl","Input","Box","Text","IconButton","Spinner","useToast","getSender","getSenderFull","useEffect","useState","axios","ArrowBackIcon","ProfileModal","ScrollableChat","io","UpdateGroupChatModal","ChatState","ENDPOINT","SingleChat","fetchAgain","setFetchAgain","messages","setMessages","loading","setLoading","newMessage","setNewMessage","socketConnected","setSocketConnected","isTyping","setIsTyping","typingText","setTypingText","toast","selectedChat","setSelectedChat","user","notification","setNotification","socket","fetchMessages","config","headers","Authorization","token","data","get","_id","emit","error","title","description","status","duration","isClosable","position","on","console","log","inputText","handleMessageReceived","newMessageReceived","chat","includes","prevMessages","off","sendMessage","event","key","post","content","chatId","typingHandler","e","target","value","lastTypingTime","Date","getTime","timerLength","setTimeout","timeNow","timeDiff","base","md","isGroupChat","users","chatName","toUpperCase","name"],"mappings":"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","sourcesContent":["import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ENDPOINT = \"http://localhost:8080\";\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [typingText, setTypingText] = useState(\"\");\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const socket = io(ENDPOINT);\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occurred!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket.emit(\"setup\", user);\r\n\r\n    socket.on(\"connected\", () => {\r\n      console.log(\"Connected to socket.io\");\r\n      setSocketConnected(true);\r\n    });\r\n\r\n    socket.on(\"typing\", (inputText) => {\r\n      console.log(`Received typing event: ${inputText}`);\r\n      setTypingText(inputText);\r\n    });\r\n\r\n    socket.on(\"stop typing\", () => {\r\n      console.log(\"Received stop typing event\");\r\n      setTypingText(\"\");\r\n    });\r\n\r\n    fetchMessages();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [user, selectedChat]);\r\n\r\n  useEffect(() => {\r\n    const handleMessageReceived = (newMessageReceived) => {\r\n      if (!selectedChat || selectedChat._id !== newMessageReceived.chat._id) {\r\n        if (!notification.includes(newMessageReceived)) {\r\n          setNotification([newMessageReceived, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages((prevMessages) => [...prevMessages, newMessageReceived]);\r\n      }\r\n    };\r\n\r\n    socket.on(\"message received\", handleMessageReceived);\r\n\r\n    return () => {\r\n      socket.off(\"message received\", handleMessageReceived);\r\n      socket.off(\"typing\");\r\n      socket.off(\"stop typing\");\r\n    };\r\n    // eslint-disable-next-line\r\n  }, [notification, setFetchAgain, selectedChat]);\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        setMessages((prevMessages) => [...prevMessages, data]);\r\n        socket.emit(\"new message\", data);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occurred!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const typingHandler = (e) => {\r\n    const inputText = e.target.value;\r\n    setNewMessage(inputText);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!isTyping) {\r\n      setIsTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id, inputText);\r\n    }\r\n\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && isTyping) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setIsTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              display={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            display=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {isTyping && (\r\n                <div>\r\n                  {user.name}: {typingText}\r\n                </div>\r\n              )}\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <Box\r\n          display=\"flex\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"center\"\r\n          h=\"100%\"\r\n        >\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n"]},"metadata":{},"sourceType":"module"}