{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useDisclosure, useFocusOnHide, useFocusOnPointerDown, useFocusOnShow, useIds } from \"@chakra-ui/hooks\";\nimport { popperCSSVars, usePopper } from \"@chakra-ui/popper\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport { callAllHandlers, contains, determineLazyBehavior, getRelatedTarget, px } from \"@chakra-ui/utils\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nvar TRIGGER = {\n  click: \"click\",\n  hover: \"hover\"\n};\n/**\n * @internal\n */\n\nexport function usePopover(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    closeOnBlur = true,\n    closeOnEsc = true,\n    initialFocusRef,\n    id,\n    returnFocusOnClose = true,\n    autoFocus = true,\n    arrowSize,\n    arrowShadowColor,\n    trigger = TRIGGER.click,\n    openDelay = 200,\n    closeDelay = 200,\n    isLazy,\n    lazyBehavior = \"unmount\"\n  } = props,\n      popperProps = _objectWithoutPropertiesLoose(props, [\"closeOnBlur\", \"closeOnEsc\", \"initialFocusRef\", \"id\", \"returnFocusOnClose\", \"autoFocus\", \"arrowSize\", \"arrowShadowColor\", \"trigger\", \"openDelay\", \"closeDelay\", \"isLazy\", \"lazyBehavior\"]);\n\n  var {\n    isOpen,\n    onClose,\n    onOpen,\n    onToggle\n  } = useDisclosure(props);\n  var triggerRef = useRef(null);\n  var popoverRef = useRef(null);\n  var isHoveringRef = useRef(false);\n  var hasBeenOpened = useRef(false);\n\n  if (isOpen) {\n    hasBeenOpened.current = true;\n  }\n\n  var [hasHeader, setHasHeader] = useState(false);\n  var [hasBody, setHasBody] = useState(false);\n  var [triggerId, popoverId, headerId, bodyId] = useIds(id, \"popover-trigger\", \"popover-content\", \"popover-header\", \"popover-body\");\n  var {\n    referenceRef,\n    getArrowProps,\n    getPopperProps,\n    getArrowInnerProps,\n    forceUpdate\n  } = usePopper(popperProps);\n  useFocusOnPointerDown({\n    enabled: isOpen,\n    ref: triggerRef\n  });\n  useFocusOnHide(popoverRef, {\n    focusRef: triggerRef,\n    visible: isOpen,\n    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click\n  });\n  useFocusOnShow(popoverRef, {\n    focusRef: initialFocusRef,\n    visible: isOpen,\n    shouldFocus: autoFocus && trigger === TRIGGER.click\n  });\n  var shouldRenderChildren = determineLazyBehavior({\n    hasBeenSelected: hasBeenOpened.current,\n    isLazy,\n    lazyBehavior,\n    isSelected: isOpen\n  });\n  var getPopoverProps = useCallback(function (props, _ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (_ref === void 0) {\n      _ref = null;\n    }\n\n    var popoverProps = _extends({}, props, {\n      style: _extends({}, props.style, {\n        transformOrigin: popperCSSVars.transformOrigin.varRef\n      }),\n      ref: mergeRefs(popoverRef, _ref),\n      children: shouldRenderChildren ? props.children : null,\n      id: popoverId,\n      tabIndex: -1,\n      role: \"dialog\",\n      onKeyDown: callAllHandlers(props.onKeyDown, event => {\n        if (closeOnEsc && event.key === \"Escape\") {\n          onClose();\n        }\n      }),\n      onBlur: callAllHandlers(props.onBlur, event => {\n        var relatedTarget = getRelatedTarget(event);\n        var targetIsPopover = contains(popoverRef.current, relatedTarget);\n        var targetIsTrigger = contains(triggerRef.current, relatedTarget);\n        var isValidBlur = !targetIsPopover && !targetIsTrigger;\n\n        if (isOpen && closeOnBlur && isValidBlur) {\n          onClose();\n        }\n      }),\n      \"aria-labelledby\": hasHeader ? headerId : undefined,\n      \"aria-describedby\": hasBody ? bodyId : undefined\n    });\n\n    if (trigger === TRIGGER.hover) {\n      popoverProps.role = \"tooltip\";\n      popoverProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n        isHoveringRef.current = true;\n      });\n      popoverProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n        isHoveringRef.current = false;\n        setTimeout(onClose, closeDelay);\n      });\n    }\n\n    return popoverProps;\n  }, [shouldRenderChildren, popoverId, hasHeader, headerId, hasBody, bodyId, trigger, closeOnEsc, onClose, isOpen, closeOnBlur, closeDelay]);\n  var getPopoverPositionerProps = useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    return getPopperProps(_extends({}, props, {\n      style: _extends({\n        [popperCSSVars.arrowSize.var]: arrowSize ? px(arrowSize) : undefined,\n        [popperCSSVars.arrowShadowColor.var]: arrowShadowColor,\n        visibility: isOpen ? \"visible\" : \"hidden\"\n      }, props.style)\n    }), forwardedRef);\n  }, [arrowShadowColor, arrowSize, isOpen, getPopperProps]);\n  var openTimeout = useRef();\n  var closeTimeout = useRef();\n  var getTriggerProps = useCallback(function (props, _ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (_ref === void 0) {\n      _ref = null;\n    }\n\n    var triggerProps = _extends({}, props, {\n      ref: mergeRefs(triggerRef, _ref, referenceRef),\n      id: triggerId,\n      \"aria-haspopup\": \"dialog\",\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": popoverId\n    });\n\n    if (trigger === TRIGGER.click) {\n      triggerProps.onClick = callAllHandlers(props.onClick, onToggle);\n    }\n\n    if (trigger === TRIGGER.hover) {\n      /**\n       * Any content that shows on pointer hover should also show on keyboard focus.\n       * Consider focus and blur to be the `hover` for keyboard users.\n       *\n       * @see https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html\n       */\n      triggerProps.onFocus = callAllHandlers(props.onFocus, onOpen);\n      triggerProps.onBlur = callAllHandlers(props.onBlur, onClose);\n      /**\n       * Any content that shows on hover or focus must be dismissible.\n       * This case pressing `Escape` will dismiss the popover\n       */\n\n      triggerProps.onKeyDown = callAllHandlers(props.onKeyDown, event => {\n        if (event.key === \"Escape\") {\n          onClose();\n        }\n      });\n      triggerProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n        isHoveringRef.current = true;\n        openTimeout.current = window.setTimeout(onOpen, openDelay);\n      });\n      triggerProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n        isHoveringRef.current = false;\n\n        if (openTimeout.current) {\n          clearTimeout(openTimeout.current);\n          openTimeout.current = undefined;\n        }\n\n        closeTimeout.current = window.setTimeout(() => {\n          if (isHoveringRef.current === false) {\n            onClose();\n          }\n        }, closeDelay);\n      });\n    }\n\n    return triggerProps;\n  }, [triggerId, isOpen, popoverId, trigger, referenceRef, onToggle, onOpen, onClose, openDelay, closeDelay]);\n  useEffect(() => {\n    return () => {\n      if (openTimeout.current) {\n        clearTimeout(openTimeout.current);\n      }\n\n      if (closeTimeout.current) {\n        clearTimeout(closeTimeout.current);\n      }\n    };\n  }, []);\n  var getHeaderProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      id: headerId,\n      ref: mergeRefs(ref, node => {\n        setHasHeader(!!node);\n      })\n    });\n  }, [headerId]);\n  var getBodyProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      id: bodyId,\n      ref: mergeRefs(ref, node => {\n        setHasBody(!!node);\n      })\n    });\n  }, [bodyId]);\n  return {\n    forceUpdate,\n    isOpen,\n    onClose,\n    getArrowProps,\n    getArrowInnerProps,\n    getPopoverPositionerProps,\n    getPopoverProps,\n    getTriggerProps,\n    getHeaderProps,\n    getBodyProps\n  };\n}","map":{"version":3,"sources":["../../src/use-popover.ts"],"names":["TRIGGER","click","hover","props","closeOnBlur","closeOnEsc","returnFocusOnClose","autoFocus","trigger","openDelay","closeDelay","lazyBehavior","popperProps","onToggle","useDisclosure","triggerRef","useRef","popoverRef","isHoveringRef","hasBeenOpened","useState","useIds","forceUpdate","usePopper","useFocusOnPointerDown","enabled","ref","useFocusOnHide","focusRef","visible","shouldFocus","useFocusOnShow","shouldRenderChildren","determineLazyBehavior","hasBeenSelected","isSelected","isOpen","getPopoverProps","useCallback","_ref","popoverProps","style","transformOrigin","popperCSSVars","varRef","mergeRefs","children","id","tabIndex","role","onKeyDown","callAllHandlers","event","onClose","onBlur","relatedTarget","getRelatedTarget","targetIsPopover","contains","targetIsTrigger","isValidBlur","hasHeader","hasBody","undefined","setTimeout","getPopoverPositionerProps","forwardedRef","getPopperProps","arrowSize","px","visibility","openTimeout","closeTimeout","getTriggerProps","triggerProps","popoverId","window","clearTimeout","useEffect","getHeaderProps","node","setHasHeader","getBodyProps","setHasBody"],"mappings":"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","sourcesContent":["import {\n  useDisclosure,\n  useFocusOnHide,\n  useFocusOnPointerDown,\n  useFocusOnShow,\n  useIds,\n} from \"@chakra-ui/hooks\"\nimport { popperCSSVars, usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport { HTMLProps, mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport {\n  callAllHandlers,\n  contains,\n  determineLazyBehavior,\n  FocusableElement,\n  getRelatedTarget,\n  LazyBehavior,\n  px,\n} from \"@chakra-ui/utils\"\nimport { RefObject, useCallback, useEffect, useRef, useState } from \"react\"\n\nconst TRIGGER = {\n  click: \"click\",\n  hover: \"hover\",\n} as const\n\nexport interface UsePopoverProps extends UsePopperProps {\n  /**\n   * The html `id` attribute of the popover.\n   * If not provided, we generate a unique id.\n   *\n   * This `id` is also used to auto-generate the `aria-labelledby`\n   * and `aria-decribedby` attributes that points to the `PopoverHeader` and `PopoverBody`\n   */\n  id?: string\n  /**\n   * If `true`, the popover will be opened in controlled mode.\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the popover will be initially opened.\n   */\n  defaultIsOpen?: boolean\n  /**\n   * The `ref` of the element that should receive focus when the popover opens.\n   */\n  initialFocusRef?: RefObject<FocusableElement>\n  /**\n   * If `true`, focus will be returned to the element that triggers the popover\n   * when it closes\n   */\n  returnFocusOnClose?: boolean\n  /**\n   * If `true`, focus will be transferred to the first interactive element\n   * when the popover opens\n   */\n  autoFocus?: boolean\n  /**\n   * If `true`, the popover will close when you blur out it by\n   * clicking outside or tabbing out\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the popover will close when you hit the `Esc` key\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback fired when the popover opens\n   */\n  onOpen?: () => void\n  /**\n   * Callback fired when the popover closes\n   */\n  onClose?: () => void\n  /**\n   * The size of the popover arrow\n   */\n  arrowSize?: number\n  /**\n   * The `box-shadow` of the popover arrow\n   */\n  arrowShadowColor?: string\n  /**\n   * The interaction that triggers the popover.\n   *\n   * `hover` - means the popover will open when you hover with mouse or\n   * focus with keyboard on the popover trigger\n   *\n   * `click` - means the popover will open on click or\n   * press `Enter` to `Space` on keyboard\n   */\n  trigger?: keyof typeof TRIGGER\n  openDelay?: number\n  closeDelay?: number\n  /**\n   * Performance 🚀:\n   * If `true`, the PopoverContent rendering will be deferred\n   * until the popover is open.\n   */\n  isLazy?: boolean\n  /**\n   * Performance 🚀:\n   * The lazy behavior of popover's content when not visible.\n   * Only works when `isLazy={true}`\n   *\n   * - \"unmount\": The popover's content is always unmounted when not open.\n   * - \"keepMounted\": The popover's content initially unmounted,\n   * but stays mounted when popover is open.\n   *\n   * @default \"unmount\"\n   */\n  lazyBehavior?: LazyBehavior\n}\n\n/**\n * @internal\n */\nexport function usePopover(props: UsePopoverProps = {}) {\n  const {\n    closeOnBlur = true,\n    closeOnEsc = true,\n    initialFocusRef,\n    id,\n    returnFocusOnClose = true,\n    autoFocus = true,\n    arrowSize,\n    arrowShadowColor,\n    trigger = TRIGGER.click,\n    openDelay = 200,\n    closeDelay = 200,\n    isLazy,\n    lazyBehavior = \"unmount\",\n    ...popperProps\n  } = props\n\n  const { isOpen, onClose, onOpen, onToggle } = useDisclosure(props)\n\n  const triggerRef = useRef<HTMLElement>(null)\n  const popoverRef = useRef<HTMLElement>(null)\n\n  const isHoveringRef = useRef(false)\n\n  const hasBeenOpened = useRef(false)\n  if (isOpen) {\n    hasBeenOpened.current = true\n  }\n\n  const [hasHeader, setHasHeader] = useState(false)\n  const [hasBody, setHasBody] = useState(false)\n\n  const [triggerId, popoverId, headerId, bodyId] = useIds(\n    id,\n    \"popover-trigger\",\n    \"popover-content\",\n    \"popover-header\",\n    \"popover-body\",\n  )\n\n  const {\n    referenceRef,\n    getArrowProps,\n    getPopperProps,\n    getArrowInnerProps,\n    forceUpdate,\n  } = usePopper(popperProps)\n\n  useFocusOnPointerDown({\n    enabled: isOpen,\n    ref: triggerRef,\n  })\n\n  useFocusOnHide(popoverRef, {\n    focusRef: triggerRef,\n    visible: isOpen,\n    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click,\n  })\n\n  useFocusOnShow(popoverRef, {\n    focusRef: initialFocusRef,\n    visible: isOpen,\n    shouldFocus: autoFocus && trigger === TRIGGER.click,\n  })\n\n  const shouldRenderChildren = determineLazyBehavior({\n    hasBeenSelected: hasBeenOpened.current,\n    isLazy,\n    lazyBehavior,\n    isSelected: isOpen,\n  })\n\n  const getPopoverProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const popoverProps: HTMLProps = {\n        ...props,\n        style: {\n          ...props.style,\n          transformOrigin: popperCSSVars.transformOrigin.varRef,\n        },\n        ref: mergeRefs(popoverRef, _ref),\n        children: shouldRenderChildren ? props.children : null,\n        id: popoverId,\n        tabIndex: -1,\n        role: \"dialog\",\n        onKeyDown: callAllHandlers(props.onKeyDown, (event) => {\n          if (closeOnEsc && event.key === \"Escape\") {\n            onClose()\n          }\n        }),\n        onBlur: callAllHandlers(props.onBlur, (event) => {\n          const relatedTarget = getRelatedTarget(event)\n          const targetIsPopover = contains(popoverRef.current, relatedTarget)\n          const targetIsTrigger = contains(triggerRef.current, relatedTarget)\n          const isValidBlur = !targetIsPopover && !targetIsTrigger\n\n          if (isOpen && closeOnBlur && isValidBlur) {\n            onClose()\n          }\n        }),\n        \"aria-labelledby\": hasHeader ? headerId : undefined,\n        \"aria-describedby\": hasBody ? bodyId : undefined,\n      }\n\n      if (trigger === TRIGGER.hover) {\n        popoverProps.role = \"tooltip\"\n        popoverProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n        })\n        popoverProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n          isHoveringRef.current = false\n          setTimeout(onClose, closeDelay)\n        })\n      }\n\n      return popoverProps\n    },\n    [\n      shouldRenderChildren,\n      popoverId,\n      hasHeader,\n      headerId,\n      hasBody,\n      bodyId,\n      trigger,\n      closeOnEsc,\n      onClose,\n      isOpen,\n      closeOnBlur,\n      closeDelay,\n    ],\n  )\n\n  const getPopoverPositionerProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) =>\n      getPopperProps(\n        {\n          ...props,\n          style: {\n            [popperCSSVars.arrowSize.var]: arrowSize\n              ? px(arrowSize)\n              : undefined,\n            [popperCSSVars.arrowShadowColor.var]: arrowShadowColor,\n            visibility: isOpen ? \"visible\" : \"hidden\",\n            ...props.style,\n          },\n        },\n        forwardedRef,\n      ),\n    [arrowShadowColor, arrowSize, isOpen, getPopperProps],\n  )\n\n  const openTimeout = useRef<number>()\n  const closeTimeout = useRef<number>()\n\n  const getTriggerProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const triggerProps: HTMLProps = {\n        ...props,\n        ref: mergeRefs(triggerRef, _ref, referenceRef),\n        id: triggerId,\n        \"aria-haspopup\": \"dialog\",\n        \"aria-expanded\": isOpen,\n        \"aria-controls\": popoverId,\n      }\n\n      if (trigger === TRIGGER.click) {\n        triggerProps.onClick = callAllHandlers(props.onClick, onToggle)\n      }\n\n      if (trigger === TRIGGER.hover) {\n        /**\n         * Any content that shows on pointer hover should also show on keyboard focus.\n         * Consider focus and blur to be the `hover` for keyboard users.\n         *\n         * @see https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html\n         */\n        triggerProps.onFocus = callAllHandlers(props.onFocus, onOpen)\n        triggerProps.onBlur = callAllHandlers(props.onBlur, onClose)\n\n        /**\n         * Any content that shows on hover or focus must be dismissible.\n         * This case pressing `Escape` will dismiss the popover\n         */\n        triggerProps.onKeyDown = callAllHandlers(props.onKeyDown, (event) => {\n          if (event.key === \"Escape\") {\n            onClose()\n          }\n        })\n\n        triggerProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n          openTimeout.current = window.setTimeout(onOpen, openDelay)\n        })\n\n        triggerProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n          isHoveringRef.current = false\n\n          if (openTimeout.current) {\n            clearTimeout(openTimeout.current)\n            openTimeout.current = undefined\n          }\n\n          closeTimeout.current = window.setTimeout(() => {\n            if (isHoveringRef.current === false) {\n              onClose()\n            }\n          }, closeDelay)\n        })\n      }\n\n      return triggerProps\n    },\n    [\n      triggerId,\n      isOpen,\n      popoverId,\n      trigger,\n      referenceRef,\n      onToggle,\n      onOpen,\n      onClose,\n      openDelay,\n      closeDelay,\n    ],\n  )\n\n  useEffect(() => {\n    return () => {\n      if (openTimeout.current) {\n        clearTimeout(openTimeout.current)\n      }\n      if (closeTimeout.current) {\n        clearTimeout(closeTimeout.current)\n      }\n    }\n  }, [])\n\n  const getHeaderProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      id: headerId,\n      ref: mergeRefs(ref, (node: HTMLElement | null) => {\n        setHasHeader(!!node)\n      }),\n    }),\n    [headerId],\n  )\n\n  const getBodyProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      id: bodyId,\n      ref: mergeRefs(ref, (node) => {\n        setHasBody(!!node)\n      }),\n    }),\n    [bodyId],\n  )\n\n  return {\n    forceUpdate,\n    isOpen,\n    onClose,\n    getArrowProps,\n    getArrowInnerProps,\n    getPopoverPositionerProps,\n    getPopoverProps,\n    getTriggerProps,\n    getHeaderProps,\n    getBodyProps,\n  }\n}\n\nexport type UsePopoverReturn = ReturnType<typeof usePopover>\n"]},"metadata":{},"sourceType":"module"}