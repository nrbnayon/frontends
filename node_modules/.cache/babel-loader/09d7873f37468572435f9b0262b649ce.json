{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { useCallbackRef, useControllableState } from \"@chakra-ui/hooks\";\nimport { addItem, removeItem, isInputEvent } from \"@chakra-ui/utils\";\nimport { useCallback } from \"react\";\n\n/**\r\n * React hook that provides all the state management logic\r\n * for a group of checkboxes.\r\n *\r\n * It is consumed by the `CheckboxGroup` component\r\n */\nexport function useCheckboxGroup(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var {\n    defaultValue,\n    value: valueProp,\n    onChange,\n    isDisabled,\n    isNative\n  } = props;\n  var onChangeProp = useCallbackRef(onChange);\n  var [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue || [],\n    onChange: onChangeProp\n  });\n  var handleChange = useCallback(eventOrValue => {\n    if (!value) return;\n    var isChecked = isInputEvent(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);\n    var selectedValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n    var nextValue = isChecked ? addItem(value, selectedValue) : removeItem(value, selectedValue);\n    setValue(nextValue);\n  }, [setValue, value]);\n  var getCheckboxProps = useCallback(function (props) {\n    if (props === void 0) {\n      props = {};\n    }\n    var checkedKey = isNative ? \"checked\" : \"isChecked\";\n    return _extends({}, props, {\n      [checkedKey]: value.includes(props.value),\n      onChange: handleChange\n    });\n  }, [handleChange, isNative, value]);\n  return {\n    value,\n    isDisabled,\n    onChange: handleChange,\n    setValue,\n    getCheckboxProps\n  };\n}","map":{"version":3,"names":["useCallbackRef","useControllableState","addItem","removeItem","isInputEvent","useCallback","useCheckboxGroup","props","defaultValue","value","valueProp","onChange","isDisabled","isNative","onChangeProp","setValue","handleChange","eventOrValue","isChecked","target","checked","includes","selectedValue","nextValue","getCheckboxProps","checkedKey","_extends"],"sources":["../../src/use-checkbox-group.ts"],"sourcesContent":["import { useCallbackRef, useControllableState } from \"@chakra-ui/hooks\"\nimport {\n  addItem,\n  Dict,\n  removeItem,\n  StringOrNumber,\n  isInputEvent,\n} from \"@chakra-ui/utils\"\nimport { ChangeEvent, useCallback } from \"react\"\n\ntype EventOrValue = ChangeEvent<HTMLInputElement> | StringOrNumber\n\nexport interface UseCheckboxGroupProps {\n  /**\n   * The value of the checkbox group\n   */\n  value?: StringOrNumber[]\n  /**\n   * The initial value of the checkbox group\n   */\n  defaultValue?: StringOrNumber[]\n  /**\n   * The callback fired when any children Checkbox is checked or unchecked\n   */\n  onChange?(value: StringOrNumber[]): void\n  /**\n   * If `true`, all wrapped checkbox inputs will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, input elements will receive\n   * `checked` attribute instead of `isChecked`.\n   *\n   * This assumes, you're using native radio inputs\n   */\n  isNative?: boolean\n}\n\n/**\n * React hook that provides all the state management logic\n * for a group of checkboxes.\n *\n * It is consumed by the `CheckboxGroup` component\n */\nexport function useCheckboxGroup(props: UseCheckboxGroupProps = {}) {\n  const {\n    defaultValue,\n    value: valueProp,\n    onChange,\n    isDisabled,\n    isNative,\n  } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n\n  const [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue || [],\n    onChange: onChangeProp,\n  })\n\n  const handleChange = useCallback(\n    (eventOrValue: EventOrValue) => {\n      if (!value) return\n\n      const isChecked = isInputEvent(eventOrValue)\n        ? eventOrValue.target.checked\n        : !value.includes(eventOrValue)\n\n      const selectedValue = isInputEvent(eventOrValue)\n        ? eventOrValue.target.value\n        : eventOrValue\n\n      const nextValue = isChecked\n        ? addItem(value, selectedValue)\n        : removeItem(value, selectedValue)\n\n      setValue(nextValue)\n    },\n    [setValue, value],\n  )\n\n  const getCheckboxProps = useCallback(\n    (props: Dict = {}) => {\n      const checkedKey = isNative ? \"checked\" : \"isChecked\"\n      return {\n        ...props,\n        [checkedKey]: value.includes(props.value),\n        onChange: handleChange,\n      }\n    },\n    [handleChange, isNative, value],\n  )\n\n  return {\n    value,\n    isDisabled,\n    onChange: handleChange,\n    setValue,\n    getCheckboxProps,\n  }\n}\n\nexport type UseCheckboxGroupReturn = ReturnType<typeof useCheckboxGroup>\n"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,cAAT,EAAyBC,oBAAzB,QAAqD,kBAArD;AACA,SACEC,OADF,EAGEC,UAHF,EAKEC,YALF,QAMO,kBANP;AAOA,SAAsBC,WAAtB,QAAyC,OAAzC;;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAATA,CAA0BC,KAA1B,EAA6D;EAAA,IAAnCA,KAAmC;IAAnCA,KAAmC,GAAJ,EAAI;EAAA;EAClE,IAAM;IACJC,YADI;IAEJC,KAAK,EAAEC,SAFH;IAGJC,QAHI;IAIJC,UAJI;IAKJC;EALI,IAMFN,KANJ;EAQA,IAAMO,YAAY,GAAGd,cAAc,CAACW,QAAD,CAAnC;EAEA,IAAM,CAACF,KAAD,EAAQM,QAAR,IAAoBd,oBAAoB,CAAC;IAC7CQ,KAAK,EAAEC,SADsC;IAE7CF,YAAY,EAAEA,YAAY,IAAI,EAFe;IAG7CG,QAAQ,EAAEG;EAHmC,CAAD,CAA9C;EAMA,IAAME,YAAY,GAAGX,WAAW,CAC7BY,YAAD,IAAgC;IAC9B,IAAI,CAACR,KAAL,EAAY;IAEZ,IAAMS,SAAS,GAAGd,YAAY,CAACa,YAAD,CAAZ,GACdA,YAAY,CAACE,MAAb,CAAoBC,OADN,GAEd,CAACX,KAAK,CAACY,QAAN,CAAeJ,YAAf,CAFL;IAIA,IAAMK,aAAa,GAAGlB,YAAY,CAACa,YAAD,CAAZ,GAClBA,YAAY,CAACE,MAAb,CAAoBV,KADF,GAElBQ,YAFJ;IAIA,IAAMM,SAAS,GAAGL,SAAS,GACvBhB,OAAO,CAACO,KAAD,EAAQa,aAAR,CADgB,GAEvBnB,UAAU,CAACM,KAAD,EAAQa,aAAR,CAFd;IAIAP,QAAQ,CAACQ,SAAD,CAAR;EACD,CAjB6B,EAkB9B,CAACR,QAAD,EAAWN,KAAX,CAlB8B,CAAhC;EAqBA,IAAMe,gBAAgB,GAAGnB,WAAW,CAClC,UAACE,KAAD,EAAsB;IAAA,IAArBA,KAAqB;MAArBA,KAAqB,GAAP,EAAO;IAAA;IACpB,IAAMkB,UAAU,GAAGZ,QAAQ,GAAG,SAAH,GAAe,WAA1C;IACA,OAAAa,QAAA,KACKnB,KADL;MAEE,CAACkB,UAAD,GAAchB,KAAK,CAACY,QAAN,CAAed,KAAK,CAACE,KAArB,CAFhB;MAGEE,QAAQ,EAAEK;IAHZ;EAKD,CARiC,EASlC,CAACA,YAAD,EAAeH,QAAf,EAAyBJ,KAAzB,CATkC,CAApC;EAYA,OAAO;IACLA,KADK;IAELG,UAFK;IAGLD,QAAQ,EAAEK,YAHL;IAILD,QAJK;IAKLS;EALK,CAAP;AAOD"},"metadata":{},"sourceType":"module"}