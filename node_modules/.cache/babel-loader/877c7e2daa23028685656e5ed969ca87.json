{"ast":null,"code":"import { resetBox, applyTreeDeltas } from '../../utils/geometry/delta-apply.js';\nimport { updateBoxDelta } from '../../utils/geometry/delta-calc.js';\nfunction updateLayoutDeltas(_a, _b, treePath, transformOrigin) {\n  var delta = _a.delta,\n    layout = _a.layout,\n    layoutCorrected = _a.layoutCorrected,\n    treeScale = _a.treeScale;\n  var target = _b.target;\n  /**\r\n   * Reset the corrected box with the latest values from box, as we're then going\r\n   * to perform mutative operations on it.\r\n   */\n  resetBox(layoutCorrected, layout);\n  /**\r\n   * Apply all the parent deltas to this box to produce the corrected box. This\r\n   * is the layout box, as it will appear on screen as a result of the transforms of its parents.\r\n   */\n  applyTreeDeltas(layoutCorrected, treeScale, treePath);\n  /**\r\n   * Update the delta between the corrected box and the target box before user-set transforms were applied.\r\n   * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\r\n   * for our layout reprojection, but still allow them to be scaled correctly by the user.\r\n   * It might be that to simplify this we may want to accept that user-set scale is also corrected\r\n   * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\r\n   * to allow people to choose whether these styles are corrected based on just the\r\n   * layout reprojection or the final bounding box.\r\n   */\n  updateBoxDelta(delta, layoutCorrected, target, transformOrigin);\n}\nexport { updateLayoutDeltas };","map":{"version":3,"names":["resetBox","applyTreeDeltas","updateBoxDelta","updateLayoutDeltas","_a","_b","treePath","transformOrigin","delta","layout","layoutCorrected","treeScale","target"],"sources":["E:/Hasan sir project/ChattersTwo/frontend/node_modules/framer-motion/dist/es/render/utils/projection.js"],"sourcesContent":["import { resetBox, applyTreeDeltas } from '../../utils/geometry/delta-apply.js';\r\nimport { updateBoxDelta } from '../../utils/geometry/delta-calc.js';\r\n\r\nfunction updateLayoutDeltas(_a, _b, treePath, transformOrigin) {\r\n    var delta = _a.delta, layout = _a.layout, layoutCorrected = _a.layoutCorrected, treeScale = _a.treeScale;\r\n    var target = _b.target;\r\n    /**\r\n     * Reset the corrected box with the latest values from box, as we're then going\r\n     * to perform mutative operations on it.\r\n     */\r\n    resetBox(layoutCorrected, layout);\r\n    /**\r\n     * Apply all the parent deltas to this box to produce the corrected box. This\r\n     * is the layout box, as it will appear on screen as a result of the transforms of its parents.\r\n     */\r\n    applyTreeDeltas(layoutCorrected, treeScale, treePath);\r\n    /**\r\n     * Update the delta between the corrected box and the target box before user-set transforms were applied.\r\n     * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\r\n     * for our layout reprojection, but still allow them to be scaled correctly by the user.\r\n     * It might be that to simplify this we may want to accept that user-set scale is also corrected\r\n     * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\r\n     * to allow people to choose whether these styles are corrected based on just the\r\n     * layout reprojection or the final bounding box.\r\n     */\r\n    updateBoxDelta(delta, layoutCorrected, target, transformOrigin);\r\n}\r\n\r\nexport { updateLayoutDeltas };\r\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,eAAe,QAAQ,qCAAqC;AAC/E,SAASC,cAAc,QAAQ,oCAAoC;AAEnE,SAASC,kBAAkBA,CAACC,EAAE,EAAEC,EAAE,EAAEC,QAAQ,EAAEC,eAAe,EAAE;EAC3D,IAAIC,KAAK,GAAGJ,EAAE,CAACI,KAAK;IAAEC,MAAM,GAAGL,EAAE,CAACK,MAAM;IAAEC,eAAe,GAAGN,EAAE,CAACM,eAAe;IAAEC,SAAS,GAAGP,EAAE,CAACO,SAAS;EACxG,IAAIC,MAAM,GAAGP,EAAE,CAACO,MAAM;EACtB;AACJ;AACA;AACA;EACIZ,QAAQ,CAACU,eAAe,EAAED,MAAM,CAAC;EACjC;AACJ;AACA;AACA;EACIR,eAAe,CAACS,eAAe,EAAEC,SAAS,EAAEL,QAAQ,CAAC;EACrD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIJ,cAAc,CAACM,KAAK,EAAEE,eAAe,EAAEE,MAAM,EAAEL,eAAe,CAAC;AACnE;AAEA,SAASJ,kBAAkB"},"metadata":{},"sourceType":"module"}